// Generated by andromda-angular cartridge (view\components\component.ts.vsl) DO NOT EDIT
import {
  AfterViewInit,
  Component,
  Input,
  OnDestroy,
  OnInit,
  ViewChild,
} from "@angular/core";
import {COMMA, ENTER} from '@angular/cdk/keycodes';
import {
  FormsModule,
  ReactiveFormsModule,
  FormGroup,
  FormControl,
  FormBuilder,
  Validators,
  FormArray,
} from "@angular/forms";
import { SelectItem } from "@app/utils/select-item";
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatChip, MatChipInput, MatChipInputEvent } from "@angular/material/chips";
import {MatAutocompleteSelectedEvent, MatAutocompleteModule} from '@angular/material/autocomplete';
import { MatDialog } from '@angular/material/dialog';
import { Observable, map, of, startWith } from "rxjs";
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { SharedModule } from '@app/@shared';
import { MaterialModule } from '@app/material.module';
import { CsvModule } from '@ctrl/ngx-csv';

@Component({
  selector: "app-crop-type-editor",
  templateUrl: "./crop-type-editor.component.html",
  styleUrls: [],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    SharedModule,
    MaterialModule,
    CsvModule,
  ]
})
export class CropTypeEditorComponent implements OnInit, OnDestroy, AfterViewInit {

    separatorKeysCodes: number[] = [ENTER, COMMA];
    @Input() cropTypeEditorForm: FormGroup = new FormGroup({});

    @Input() id?: string;

    @Input() createdBy?: string;

    @Input() updatedBy?: string;

    @Input() createdDate?: Date;

    @Input() updatedDate?: Date;

    @Input() code?: string;

    @Input() name?: string;

    @Input() images?: File[];

    imagesPreviews: any[] = [];
    imagesSelectedFiles?: FileList;
    @Input() description?: string;


    constructor(
      private formBuilder: FormBuilder
    ) {
    }

    ngOnInit() {
        if(!this.cropTypeEditorForm) {
            this.initForm();
        }
    }

    ngOnDestroy() {}

    ngAfterViewInit() {

    }

    initForm() {
        this.cropTypeEditorForm = this.formBuilder.group({
            id: [{value: this.id, disabled: false}],
            createdBy: [{value: this.createdBy, disabled: false}],
            updatedBy: [{value: this.updatedBy, disabled: false}],
            createdDate: [{value: this.createdDate, disabled: false}],
            updatedDate: [{value: this.updatedDate, disabled: false}],
            code: [{value: this.code, disabled: false}, [Validators.required, ]],
            name: [{value: this.name, disabled: false}, [Validators.required, ]],
            images: this.formBuilder.array(this.images ? this.images : []),
            description: [{value: this.description, disabled: false}],
        });
    }


    get idControl(): FormControl {
        return this.cropTypeEditorForm?.get('id') as FormControl;
    }


    get createdByControl(): FormControl {
        return this.cropTypeEditorForm?.get('createdBy') as FormControl;
    }


    get updatedByControl(): FormControl {
        return this.cropTypeEditorForm?.get('updatedBy') as FormControl;
    }


    get createdDateControl(): FormControl {
        return this.cropTypeEditorForm?.get('createdDate') as FormControl;
    }


    get updatedDateControl(): FormControl {
        return this.cropTypeEditorForm?.get('updatedDate') as FormControl;
    }


    get codeControl(): FormControl {
        return this.cropTypeEditorForm?.get('code') as FormControl;
    }


    get nameControl(): FormControl {
        return this.cropTypeEditorForm?.get('name') as FormControl;
    }


    get imagesControl(): FormArray {
        return this.cropTypeEditorForm?.get('images') as FormArray;
    }


    private reloadSelectedImages(files: File[]) {
        this.imagesPreviews = [];
        if (files && files.length > 0) {
            const numberOfFiles = files.length;
            for (let i = 0; i < numberOfFiles; i++) {
                const reader = new FileReader();
    
                reader.onload = (e: any) => {
                    this.imagesPreviews.push(e.target.result);
                };
    
                reader.readAsDataURL(files[i]);
            }
        }

    }

    deleteFromSelectedImages(index: number) {
        this.imagesControl.removeAt(index);
        this.imagesPreviews.splice(index, 1);
        this.reloadSelectedImages(this.imagesControl.value);
    }
    
    imagesSelectFiles(event: any): void {
        this.imagesSelectedFiles = event.target.files;
        this.imagesPreviews = [];
        if (this.imagesSelectedFiles && this.imagesSelectedFiles[0]) {
            const numberOfFiles = this.imagesSelectedFiles.length;
            for (let i = 0; i < numberOfFiles; i++) {
                const reader = new FileReader();
    
                reader.onload = (e: any) => {
                    this.imagesPreviews.push(e.target.result);
                };
    
                reader.readAsDataURL(this.imagesSelectedFiles[i]);
                this.imagesControl.push(this.formBuilder.control(this.imagesSelectedFiles[i]));
            }
        }
    }

    get descriptionControl(): FormControl {
        return this.cropTypeEditorForm?.get('description') as FormControl;
    }


}