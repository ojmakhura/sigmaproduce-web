// Generated by andromda-angular cartridge (view\components\component.ts.vsl) DO NOT EDIT
import { AfterViewInit, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import {
  FormsModule,
  ReactiveFormsModule,
  FormGroup,
  FormControl,
  FormBuilder,
  Validators,
  FormArray,
} from '@angular/forms';
import { SelectItem } from '@app/utils/select-item';
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatChip, MatChipInput, MatChipInputEvent } from '@angular/material/chips';
import { MatAutocompleteSelectedEvent, MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatDialog } from '@angular/material/dialog';
import { Observable, map, of, startWith } from 'rxjs';
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { SharedModule } from '@app/@shared';
import { MaterialModule } from '@app/material.module';
import { CsvModule } from '@ctrl/ngx-csv';
import { CropListVO } from '@app/model/crop/crop-list-vo';

@Component({
  selector: 'app-crop-table',
  templateUrl: './crop-table.component.html',
  styleUrls: [],
  standalone: true,
  imports: [CommonModule, FormsModule, ReactiveFormsModule, TranslateModule, SharedModule, MaterialModule, CsvModule],
})
export class CropTableComponent implements OnInit, OnDestroy, AfterViewInit {
  separatorKeysCodes: number[] = [ENTER, COMMA];
  @Input() cropTableForm: FormGroup = new FormGroup({});

  @Input() crops?: CropListVO[];

  cropsDataSource = new MatTableDataSource<CropListVO>([]);
  cropsColumns = ['id', 'type', 'code', 'name'];

  cropsModalColumns = ['actions', ...this.cropsColumns];

  @ViewChild('cropsPaginator', { static: true }) cropsPaginator: MatPaginator;
  @ViewChild('cropsSort', { static: true }) cropsSort: MatSort;

  @ViewChild('cropsModalPaginator', { static: true }) cropsModalPaginator: MatPaginator;
  @ViewChild('cropsModalSort', { static: true }) cropsModalSort: MatSort;

  crops$: Observable<CropListVO[]>;
  cropsDataSource = new MatTableDataSource<CropListVO>([]);
  cropsSearchField: FormControl = new FormControl([]);
  cropsSelect: CropListVO[] = [];

  constructor(private formBuilder: FormBuilder) {}

  ngOnInit() {
    if (!this.cropTableForm) {
      this.initForm();
    }
  }

  ngOnDestroy() {}

  ngAfterViewInit() {}

  initForm() {
    this.cropTableForm = this.formBuilder.group({
      crops: this.createCropListVOArray(this.crops),
    });
  }

  createCropListVOGroup(value?: CropListVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      code: [value?.code],
      name: [value?.name],
      type: [value?.type],
      typeId: [value?.typeId],
    });
  }

  createCropListVOArray(values?: CropListVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createCropListVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  get cropsControl(): FormArray {
    return this.cropTableForm?.get('crops') as FormArray;
  }

  get cropsIdControl(): FormControl {
    return this.cropsControl?.get('id') as FormControl;
  }

  get cropsCreatedByControl(): FormControl {
    return this.cropsControl?.get('createdBy') as FormControl;
  }

  get cropsUpdatedByControl(): FormControl {
    return this.cropsControl?.get('updatedBy') as FormControl;
  }

  get cropsCreatedDateControl(): FormControl {
    return this.cropsControl?.get('createdDate') as FormControl;
  }

  get cropsUpdatedDateControl(): FormControl {
    return this.cropsControl?.get('updatedDate') as FormControl;
  }

  get cropsCodeControl(): FormControl {
    return this.cropsControl?.get('code') as FormControl;
  }

  get cropsNameControl(): FormControl {
    return this.cropsControl?.get('name') as FormControl;
  }

  get cropsTypeControl(): FormControl {
    return this.cropsControl?.get('type') as FormControl;
  }

  get cropsTypeIdControl(): FormControl {
    return this.cropsControl?.get('typeId') as FormControl;
  }
}
