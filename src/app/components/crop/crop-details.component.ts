// Generated by andromda-angular cartridge (view\components\component.ts.vsl) DO NOT EDIT
import {
  AfterViewInit,
  Component,
  Input,
  OnDestroy,
  OnInit,
  ViewChild,
} from "@angular/core";
import {COMMA, ENTER} from '@angular/cdk/keycodes';
import {
  FormsModule,
  ReactiveFormsModule,
  FormGroup,
  FormControl,
  FormBuilder,
  Validators,
  FormArray,
} from "@angular/forms";
import { SelectItem } from "@app/utils/select-item";
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatChip, MatChipInput, MatChipInputEvent } from "@angular/material/chips";
import {MatAutocompleteSelectedEvent, MatAutocompleteModule} from '@angular/material/autocomplete';
import { MatDialog } from '@angular/material/dialog';
import { Observable, map, of, startWith } from "rxjs";
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { SharedModule } from '@app/@shared';
import { MaterialModule } from '@app/material.module';
import { CsvModule } from '@ctrl/ngx-csv';
import { CropTypeListVO } from '@app/model/bw/co/sigmaproduce/crop/type/crop-type-list-vo';

@Component({
  selector: "app-crop-details",
  templateUrl: "./crop-details.component.html",
  styleUrls: [],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    SharedModule,
    MaterialModule,
    CsvModule,
  ]
})
export class CropDetailsComponent implements OnInit, OnDestroy, AfterViewInit {

    separatorKeysCodes: number[] = [ENTER, COMMA];
    @Input() cropDetailsForm: FormGroup = new FormGroup({});

    @Input() id?: string;

    @Input() createdBy?: string;

    @Input() updatedBy?: string;

    @Input() createdDate?: Date;

    @Input() updatedDate?: Date;

    @Input() type?: CropTypeListVO;

    @Input() code?: string;

    @Input() name?: string;

    @Input() description?: string;

    @Input() images?: File[];

    imagesPreviews: any[] = [];
    imagesSelectedFiles?: FileList;
    @Input() numberOfDiseases?: number;

    @Input() numberOfPests?: number;

    @Input() numberOfVarieties?: number;

    @Input() maturesIn?: string;



    constructor(
      private formBuilder: FormBuilder
    ) {
    }

    ngOnInit() {
        if(!this.cropDetailsForm) {
            this.initForm();
        }
    }

    ngOnDestroy() {}

    ngAfterViewInit() {

    }

    initForm() {
        this.cropDetailsForm = this.formBuilder.group({
            id: [{value: this.id, disabled: false}],
            createdBy: [{value: this.createdBy, disabled: false}],
            updatedBy: [{value: this.updatedBy, disabled: false}],
            createdDate: [{value: this.createdDate, disabled: false}],
            updatedDate: [{value: this.updatedDate, disabled: false}],
            type: this.createCropTypeListVOGroup(this.type),
            code: [{value: this.code, disabled: false}, [Validators.required, ]],
            name: [{value: this.name, disabled: false}, [Validators.required, ]],
            description: [{value: this.description, disabled: false}],
            images: this.formBuilder.array(this.images ? this.images : []),
            numberOfDiseases: [{value: this.numberOfDiseases, disabled: false}],
            numberOfPests: [{value: this.numberOfPests, disabled: false}],
            numberOfVarieties: [{value: this.numberOfVarieties, disabled: false}],
            maturesIn: [{value: this.maturesIn, disabled: false}],
        });
    }

    createCropTypeListVOGroup(value?: CropTypeListVO): FormGroup {
        return this.formBuilder.group({
            code: [value?.code],
            id: [value?.id],
            name: [value?.name],
        });
    }

    createCropTypeListVOArray(values?: CropTypeListVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropTypeListVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }


    get idControl(): FormControl {
        return this.cropDetailsForm?.get('id') as FormControl;
    }


    get createdByControl(): FormControl {
        return this.cropDetailsForm?.get('createdBy') as FormControl;
    }


    get updatedByControl(): FormControl {
        return this.cropDetailsForm?.get('updatedBy') as FormControl;
    }


    get createdDateControl(): FormControl {
        return this.cropDetailsForm?.get('createdDate') as FormControl;
    }


    get updatedDateControl(): FormControl {
        return this.cropDetailsForm?.get('updatedDate') as FormControl;
    }


    get typeControl(): FormGroup {
        return this.cropDetailsForm?.get('type') as FormGroup;
    }


    get typeCodeControl(): FormControl {
        return this.typeControl?.get('code') as FormControl;
    }

    get typeIdControl(): FormControl {
        return this.typeControl?.get('id') as FormControl;
    }

    get typeNameControl(): FormControl {
        return this.typeControl?.get('name') as FormControl;
    }

    get codeControl(): FormControl {
        return this.cropDetailsForm?.get('code') as FormControl;
    }


    get nameControl(): FormControl {
        return this.cropDetailsForm?.get('name') as FormControl;
    }


    get descriptionControl(): FormControl {
        return this.cropDetailsForm?.get('description') as FormControl;
    }


    get imagesControl(): FormArray {
        return this.cropDetailsForm?.get('images') as FormArray;
    }


    private reloadSelectedImages(files: File[]) {
        this.imagesPreviews = [];
        if (files && files.length > 0) {
            const numberOfFiles = files.length;
            for (let i = 0; i < numberOfFiles; i++) {
                const reader = new FileReader();
    
                reader.onload = (e: any) => {
                    this.imagesPreviews.push(e.target.result);
                };
    
                reader.readAsDataURL(files[i]);
            }
        }

    }

    deleteFromSelectedImages(index: number) {
        this.imagesControl.removeAt(index);
        this.imagesPreviews.splice(index, 1);
        this.reloadSelectedImages(this.imagesControl.value);
    }
    
    imagesSelectFiles(event: any): void {
        this.imagesSelectedFiles = event.target.files;
        this.imagesPreviews = [];
        if (this.imagesSelectedFiles && this.imagesSelectedFiles[0]) {
            const numberOfFiles = this.imagesSelectedFiles.length;
            for (let i = 0; i < numberOfFiles; i++) {
                const reader = new FileReader();
    
                reader.onload = (e: any) => {
                    this.imagesPreviews.push(e.target.result);
                };
    
                reader.readAsDataURL(this.imagesSelectedFiles[i]);
                this.imagesControl.push(this.formBuilder.control(this.imagesSelectedFiles[i]));
            }
        }
    }

    get numberOfDiseasesControl(): FormControl {
        return this.cropDetailsForm?.get('numberOfDiseases') as FormControl;
    }


    get numberOfPestsControl(): FormControl {
        return this.cropDetailsForm?.get('numberOfPests') as FormControl;
    }


    get numberOfVarietiesControl(): FormControl {
        return this.cropDetailsForm?.get('numberOfVarieties') as FormControl;
    }


    get maturesInControl(): FormControl {
        return this.cropDetailsForm?.get('maturesIn') as FormControl;
    }


    onAddVarietyClick() {
    }

}