// Generated by andromda-angular cartridge (view\components\component.ts.vsl) DO NOT EDIT
import {
  AfterViewInit,
  Component,
  Input,
  OnDestroy,
  OnInit,
  ViewChild,
} from "@angular/core";
import {COMMA, ENTER} from '@angular/cdk/keycodes';
import {
  FormsModule,
  ReactiveFormsModule,
  FormGroup,
  FormControl,
  FormBuilder,
  Validators,
  FormArray,
} from "@angular/forms";
import { SelectItem } from "@app/utils/select-item";
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatChip, MatChipInput, MatChipInputEvent } from "@angular/material/chips";
import {MatAutocompleteSelectedEvent, MatAutocompleteModule} from '@angular/material/autocomplete';
import { MatDialog } from '@angular/material/dialog';
import { Observable, map, of, startWith } from "rxjs";
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { SharedModule } from '@app/@shared';
import { MaterialModule } from '@app/material.module';
import { CsvModule } from '@ctrl/ngx-csv';
import { FarmListVO } from '@app/model/bw/co/sigmaproduce/farm/farm-list-vo';
import { Unit } from '@app/model/bw/co/sigmaproduce/farm/unit';
import { CropVarietyList } from '@app/model/bw/co/sigmaproduce/crop/variety/crop-variety-list';

@Component({
  selector: "app-cultivation-editor",
  templateUrl: "./cultivation-editor.component.html",
  styleUrls: [],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    SharedModule,
    MaterialModule,
    CsvModule,
  ]
})
export class CultivationEditorComponent implements OnInit, OnDestroy, AfterViewInit {

    separatorKeysCodes: number[] = [ENTER, COMMA];
    @Input() cultivationEditorForm: FormGroup = new FormGroup({});

    @Input() id?: string;

    @Input() createdBy?: string;

    @Input() updatedBy?: string;

    @Input() createdDate?: Date;

    @Input() updatedDate?: Date;

    @Input() farm?: FarmListVO;

    @Input() cropVariety?: CropVarietyList;

    @Input() cultivationDate?: Date;

    @Input() exptectedHarvestDate?: Date;

    @Input() size?: number;

    @Input() unit?: Unit;
    unitT: any = Unit;
    unitOptions = Object.keys(this.unitT);
    unitBackingList: SelectItem[] = [];
    unitFilteredList$: Observable<SelectItem[]> = of([]);


    constructor(
      private formBuilder: FormBuilder
    ) {
    }

    ngOnInit() {
        if(!this.cultivationEditorForm) {
            this.initForm();
        }
    }

    ngOnDestroy() {}

    ngAfterViewInit() {

    }

    initForm() {
        this.cultivationEditorForm = this.formBuilder.group({
            id: [{value: this.id, disabled: false}],
            createdBy: [{value: this.createdBy, disabled: false}],
            updatedBy: [{value: this.updatedBy, disabled: false}],
            createdDate: [{value: this.createdDate, disabled: false}],
            updatedDate: [{value: this.updatedDate, disabled: false}],
            farm: this.createFarmListVOGroup(this.farm),
            cropVariety: this.createCropVarietyListGroup(this.cropVariety),
            cultivationDate: [{value: this.cultivationDate, disabled: false}],
            exptectedHarvestDate: [{value: this.exptectedHarvestDate, disabled: false}],
            size: [{value: this.size, disabled: false}],
            unit: [{value: this.unit, disabled: false}],
        });
    }

    createFarmListVOGroup(value?: FarmListVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            name: [value?.name],
            latitude: [value?.latitude],
            longitude: [value?.longitude],
            owner: [value?.owner],
            nearestVillage: [value?.nearestVillage],
            unit: [value?.unit],
            size: [value?.size],
        });
    }

    createFarmListVOArray(values?: FarmListVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createFarmListVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createCropVarietyListGroup(value?: CropVarietyList): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            code: [value?.code],
            name: [value?.name],
            cropId: [value?.cropId],
            crop: [value?.crop],
        });
    }

    createCropVarietyListArray(values?: CropVarietyList[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropVarietyListGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }


    get idControl(): FormControl {
        return this.cultivationEditorForm?.get('id') as FormControl;
    }


    get createdByControl(): FormControl {
        return this.cultivationEditorForm?.get('createdBy') as FormControl;
    }


    get updatedByControl(): FormControl {
        return this.cultivationEditorForm?.get('updatedBy') as FormControl;
    }


    get createdDateControl(): FormControl {
        return this.cultivationEditorForm?.get('createdDate') as FormControl;
    }


    get updatedDateControl(): FormControl {
        return this.cultivationEditorForm?.get('updatedDate') as FormControl;
    }


    get farmControl(): FormGroup {
        return this.cultivationEditorForm?.get('farm') as FormGroup;
    }


    get farmIdControl(): FormControl {
        return this.farmControl?.get('id') as FormControl;
    }

    get farmNameControl(): FormControl {
        return this.farmControl?.get('name') as FormControl;
    }

    get farmLatitudeControl(): FormControl {
        return this.farmControl?.get('latitude') as FormControl;
    }

    get farmLongitudeControl(): FormControl {
        return this.farmControl?.get('longitude') as FormControl;
    }

    get farmOwnerControl(): FormControl {
        return this.farmControl?.get('owner') as FormControl;
    }

    get farmNearestVillageControl(): FormControl {
        return this.farmControl?.get('nearestVillage') as FormControl;
    }

    get farmUnitControl(): FormGroup {
        return this.farmControl?.get('unit') as FormGroup;
    }

    get farmSizeControl(): FormControl {
        return this.farmControl?.get('size') as FormControl;
    }

    get cropVarietyControl(): FormGroup {
        return this.cultivationEditorForm?.get('cropVariety') as FormGroup;
    }


    get cropVarietyIdControl(): FormControl {
        return this.cropVarietyControl?.get('id') as FormControl;
    }

    get cropVarietyCodeControl(): FormControl {
        return this.cropVarietyControl?.get('code') as FormControl;
    }

    get cropVarietyNameControl(): FormControl {
        return this.cropVarietyControl?.get('name') as FormControl;
    }

    get cropVarietyCropIdControl(): FormControl {
        return this.cropVarietyControl?.get('cropId') as FormControl;
    }

    get cropVarietyCropControl(): FormControl {
        return this.cropVarietyControl?.get('crop') as FormControl;
    }

    get cultivationDateControl(): FormControl {
        return this.cultivationEditorForm?.get('cultivationDate') as FormControl;
    }


    get exptectedHarvestDateControl(): FormControl {
        return this.cultivationEditorForm?.get('exptectedHarvestDate') as FormControl;
    }


    get sizeControl(): FormControl {
        return this.cultivationEditorForm?.get('size') as FormControl;
    }


    get unitControl(): FormGroup {
        return this.cultivationEditorForm?.get('unit') as FormGroup;
    }


}