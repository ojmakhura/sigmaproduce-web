// Generated by andromda-angular cartridge (view\components\component.ts.vsl) DO NOT EDIT
import { AfterViewInit, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import {
  FormsModule,
  ReactiveFormsModule,
  FormGroup,
  FormControl,
  FormBuilder,
  Validators,
  FormArray,
} from '@angular/forms';
import { SelectItem } from '@app/utils/select-item';
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatChip, MatChipInput, MatChipInputEvent } from '@angular/material/chips';
import { MatAutocompleteSelectedEvent, MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatDialog } from '@angular/material/dialog';
import { Observable, map, of, startWith } from 'rxjs';
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { SharedModule } from '@app/@shared';
import { MaterialModule } from '@app/material.module';
import { CsvModule } from '@ctrl/ngx-csv';
import { CultivationVO } from '@app/model/farm/cultivation/cultivation-vo';
import { FarmListVO } from '@app/model/farm/farm-list-vo';
import { Unit } from '@app/model/farm/unit';
import { CropVarietyList } from '@app/model/crop/variety/crop-variety-list';
import { HarvestUnit } from '@app/model/farm/cultivation/harvest/harvest-unit';

@Component({
  selector: 'app-harvest-details',
  templateUrl: './harvest-details.component.html',
  styleUrls: [],
  standalone: true,
  imports: [CommonModule, FormsModule, ReactiveFormsModule, TranslateModule, SharedModule, MaterialModule, CsvModule],
})
export class HarvestDetailsComponent implements OnInit, OnDestroy, AfterViewInit {
  separatorKeysCodes: number[] = [ENTER, COMMA];
  @Input() harvestDetailsForm: FormGroup = new FormGroup({});

  @Input() id?: string;

  @Input() createdBy?: string;

  @Input() updatedBy?: string;

  @Input() createdDate?: Date;

  @Input() updatedDate?: Date;

  @Input() quantity?: number;

  @Input() unit?: HarvestUnit;
  unitT: any = HarvestUnit;
  unitOptions = Object.keys(this.unitT);
  unitBackingList: SelectItem[] = [];
  unitFilteredList$: Observable<SelectItem[]> = of([]);

  @Input() images?: File[];

  imagesPreviews: any[] = [];
  imagesSelectedFiles?: FileList;
  @Input() cultivation?: CultivationVO;
  @ViewChild('cultivationFarmModalPaginator', { static: true }) cultivationFarmModalPaginator: MatPaginator;
  @ViewChild('cultivationFarmModalSort', { static: true }) cultivationFarmModalSort: MatSort;

  cultivationFarms$: Observable<FarmListVO[]>;
  cultivationFarmSearchField: FormControl = new FormControl([]);
  cultivationFarmSelect: FarmListVO = new FarmListVO();

  cultivationFarmsDataSource = new MatTableDataSource<FarmListVO>([]);

  cultivationFarmModalColumns = ['actions'];
  @ViewChild('cultivationCropVarietyModalPaginator', { static: true })
  cultivationCropVarietyModalPaginator: MatPaginator;
  @ViewChild('cultivationCropVarietyModalSort', { static: true }) cultivationCropVarietyModalSort: MatSort;

  cultivationCropVarieties$: Observable<CropVarietyList[]>;
  cultivationCropVarietySearchField: FormControl = new FormControl([]);
  cultivationCropVarietySelect: CropVarietyList = new CropVarietyList();

  cultivationCropVarietiesDataSource = new MatTableDataSource<CropVarietyList>([]);

  cultivationCropVarietyModalColumns = ['actions'];

  constructor(private formBuilder: FormBuilder) {}

  ngOnInit() {
    if (!this.harvestDetailsForm) {
      this.initForm();
    }
  }

  ngOnDestroy() {}

  ngAfterViewInit() {}

  initForm() {
    this.harvestDetailsForm = this.formBuilder.group({
      id: [{ value: this.id, disabled: false }],
      createdBy: [{ value: this.createdBy, disabled: false }],
      updatedBy: [{ value: this.updatedBy, disabled: false }],
      createdDate: [{ value: this.createdDate, disabled: false }],
      updatedDate: [{ value: this.updatedDate, disabled: false }],
      quantity: [{ value: this.quantity, disabled: false }],
      unit: [{ value: this.unit, disabled: false }, [Validators.required]],
      images: this.formBuilder.array(this.images ? this.images : []),
      cultivation: this.createCultivationVOGroup(this.cultivation),
    });
  }

  createCultivationVOGroup(value?: CultivationVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      cultivationDate: [value?.cultivationDate],
      exptectedHarvestDate: [value?.exptectedHarvestDate],
      size: [value?.size],
      unit: [value?.unit],
    });
  }

  createCultivationVOArray(values?: CultivationVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createCultivationVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  createFarmListVOGroup(value?: FarmListVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      name: [value?.name],
      latitude: [value?.latitude],
      longitude: [value?.longitude],
      owner: [value?.owner],
      nearestVillage: [value?.nearestVillage],
      unit: [value?.unit],
      size: [value?.size],
    });
  }

  createFarmListVOArray(values?: FarmListVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createFarmListVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  createCropVarietyListGroup(value?: CropVarietyList): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      code: [value?.code],
      name: [value?.name],
      cropId: [value?.cropId],
      crop: [value?.crop],
    });
  }

  createCropVarietyListArray(values?: CropVarietyList[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createCropVarietyListGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  get idControl(): FormControl {
    return this.harvestDetailsForm?.get('id') as FormControl;
  }

  get createdByControl(): FormControl {
    return this.harvestDetailsForm?.get('createdBy') as FormControl;
  }

  get updatedByControl(): FormControl {
    return this.harvestDetailsForm?.get('updatedBy') as FormControl;
  }

  get createdDateControl(): FormControl {
    return this.harvestDetailsForm?.get('createdDate') as FormControl;
  }

  get updatedDateControl(): FormControl {
    return this.harvestDetailsForm?.get('updatedDate') as FormControl;
  }

  get quantityControl(): FormControl {
    return this.harvestDetailsForm?.get('quantity') as FormControl;
  }

  get unitControl(): FormGroup {
    return this.harvestDetailsForm?.get('unit') as FormGroup;
  }

  get imagesControl(): FormArray {
    return this.harvestDetailsForm?.get('images') as FormArray;
  }

  deleteFromSelectedImages(index: number) {
    this.imagesControl.removeAt(index);
  }

  imagesSelectFiles(event: any): void {
    this.imagesSelectedFiles = event.target.files;
    if (this.imagesSelectedFiles && this.imagesSelectedFiles[0]) {
      const numberOfFiles = this.imagesSelectedFiles.length;
      for (let i = 0; i < numberOfFiles; i++) {
        this.imagesControl.push(this.formBuilder.control(this.imagesSelectedFiles[i]));
      }
    }
  }

  get cultivationControl(): FormGroup {
    return this.harvestDetailsForm?.get('cultivation') as FormGroup;
  }

  get cultivationIdControl(): FormControl {
    return this.cultivationControl?.get('id') as FormControl;
  }

  get cultivationCreatedByControl(): FormControl {
    return this.cultivationControl?.get('createdBy') as FormControl;
  }

  get cultivationUpdatedByControl(): FormControl {
    return this.cultivationControl?.get('updatedBy') as FormControl;
  }

  get cultivationCreatedDateControl(): FormControl {
    return this.cultivationControl?.get('createdDate') as FormControl;
  }

  get cultivationUpdatedDateControl(): FormControl {
    return this.cultivationControl?.get('updatedDate') as FormControl;
  }

  get cultivationFarmControl(): FormGroup {
    return this.cultivationControl?.get('farm') as FormGroup;
  }

  cultivationFarmAddDialog() {}

  cultivationFarmClear() {}

  cultivationFarmSelected(event: MatCheckboxChange, row: number) {}

  cultivationFarmSearch() {}

  addSelectedCultivationFarm() {}

  get cultivationCropVarietyControl(): FormGroup {
    return this.cultivationControl?.get('cropVariety') as FormGroup;
  }

  cultivationCropVarietyAddDialog() {}

  cultivationCropVarietyClear() {}

  cultivationCropVarietySelected(event: MatCheckboxChange, row: number) {}

  cultivationCropVarietySearch() {}

  addSelectedCultivationCropVariety() {}

  get cultivationCultivationDateControl(): FormControl {
    return this.cultivationControl?.get('cultivationDate') as FormControl;
  }

  get cultivationExptectedHarvestDateControl(): FormControl {
    return this.cultivationControl?.get('exptectedHarvestDate') as FormControl;
  }

  get cultivationSizeControl(): FormControl {
    return this.cultivationControl?.get('size') as FormControl;
  }

  get cultivationUnitControl(): FormGroup {
    return this.cultivationControl?.get('unit') as FormGroup;
  }
}
