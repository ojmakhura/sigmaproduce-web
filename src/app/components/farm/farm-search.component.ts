// Generated by andromda-angular cartridge (view\components\component.ts.vsl) DO NOT EDIT
import {
  AfterViewInit,
  Component,
  Input,
  OnDestroy,
  OnInit,
  ViewChild,
} from "@angular/core";
import {COMMA, ENTER} from '@angular/cdk/keycodes';
import {
  FormsModule,
  ReactiveFormsModule,
  FormGroup,
  FormControl,
  FormBuilder,
  Validators,
  FormArray,
} from "@angular/forms";
import { SelectItem } from "@app/utils/select-item";
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatChip, MatChipInput, MatChipInputEvent } from "@angular/material/chips";
import {MatAutocompleteSelectedEvent, MatAutocompleteModule} from '@angular/material/autocomplete';
import { MatDialog } from '@angular/material/dialog';
import { Observable, map, of, startWith } from "rxjs";
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { SharedModule } from '@app/@shared';
import { MaterialModule } from '@app/material.module';
import { CsvModule } from '@ctrl/ngx-csv';
import { Unit } from '@app/model/bw/co/sigmaproduce/farm/unit';

@Component({
  selector: "app-farm-search",
  templateUrl: "./farm-search.component.html",
  styleUrls: [],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    SharedModule,
    MaterialModule,
    CsvModule,
  ]
})
export class FarmSearchComponent implements OnInit, OnDestroy, AfterViewInit {

    separatorKeysCodes: number[] = [ENTER, COMMA];
    @Input() farmSearchForm: FormGroup = new FormGroup({});

    @Input() name?: string;

    @Input() owner?: string;

    @Input() village?: string;

    @Input() minSize?: number;

    @Input() maxSize?: number;

    @Input() unit?: Unit;
    unitT: any = Unit;
    unitOptions = Object.keys(this.unitT);
    unitBackingList: SelectItem[] = [];
    unitFilteredList$: Observable<SelectItem[]> = of([]);


    constructor(
      private formBuilder: FormBuilder
    ) {
    }

    ngOnInit() {
        if(!this.farmSearchForm) {
            this.initForm();
        }
    }

    ngOnDestroy() {}

    ngAfterViewInit() {

    }

    initForm() {
        this.farmSearchForm = this.formBuilder.group({
            name: [{value: this.name, disabled: false}],
            owner: [{value: this.owner, disabled: false}],
            village: [{value: this.village, disabled: false}],
            minSize: [{value: this.minSize, disabled: false}],
            maxSize: [{value: this.maxSize, disabled: false}],
            unit: [{value: this.unit, disabled: false}],
        });
    }


    get nameControl(): FormControl {
        return this.farmSearchForm?.get('name') as FormControl;
    }


    get ownerControl(): FormControl {
        return this.farmSearchForm?.get('owner') as FormControl;
    }


    get villageControl(): FormControl {
        return this.farmSearchForm?.get('village') as FormControl;
    }


    get minSizeControl(): FormControl {
        return this.farmSearchForm?.get('minSize') as FormControl;
    }


    get maxSizeControl(): FormControl {
        return this.farmSearchForm?.get('maxSize') as FormControl;
    }


    get unitControl(): FormGroup {
        return this.farmSearchForm?.get('unit') as FormGroup;
    }


}