// license-header java merge-point
// Generated by andromda-angular cartridge (controller\controller.ts.vsl) DO NOT EDIT!
import { Injector } from '@angular/core';
import { ControllerBase } from '@app/controller/utils/controller.base';

import { AccessPointTypeRestController } from '@app/service//access/type/access-point-type-rest-controller';

export abstract class AccessPointTypeController extends ControllerBase {
  actionToDialog: boolean = false;
  accessPointTypeRestController: AccessPointTypeRestController;
  protected _injector: Injector;

  constructor(injector: Injector) {
    super(injector);
    this.accessPointTypeRestController = injector.get(AccessPointTypeRestController);
    this._injector = injector;
  }

  /**
   * TODO: Model Documentation for access.type.AccessPointTypeController.doInitialiseEditScreen
   *
   * @param form the associated form
   * [org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[access.type.accessPointType], org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[access.type.id]]
   */
  public abstract doInitialiseEditScreen(form: any): void;

  /**
   * TODO: Model Documentation for access.type.AccessPointTypeController.doDelete
   *
   * @param form the associated form
   * [org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[access.type.accessPointType]]
   */
  public abstract doDelete(form: any): void;

  /**
   * TODO: Model Documentation for access.type.AccessPointTypeController.doSave
   *
   * @param form the associated form
   * [org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[access.type.accessPointType]]
   */
  public abstract doSave(form: any): void;

  /**
   * TODO: Model Documentation for access.type.AccessPointTypeController.doInitialiseSearchScreen
   *
   * @param form the associated form
   * []
   */
  public abstract doInitialiseSearchScreen(form: any): void;

  /**
   * TODO: Model Documentation for access.type.AccessPointTypeController.doSearch
   *
   * @param form the associated form
   * [org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[access.type.criteria]]
   */
  public abstract doSearch(form: any): void;

  /**
   * TODO: Model Documentation for access.type.AccessPointTypeController.doEdit
   *
   * @param form the associated form
   * [org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[access.type.AccessPointTypeController.doEdit(id)]]
   */
  public abstract doEdit(form: any): void;

  /**
   * TODO: Model Documentation for access.type.save
   * This method is called when 'save' is triggered in the view 'Edit Access Point Type'.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _editAccessPointType_save(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves editAccessPointTypeSave()
   *
   * @return editAccessPointTypeSave
   * @throws Throwable
   */
  public editAccessPointTypeSave(form: any) {
    let forward: string;

    //trigger method execution
    this._editAccessPointType_save(form);

    forward = this._saveAccessPointTypeEditAccessPointTypeSaveFormImpl(form);

    if (forward !== null) {
      if (forward === 'access/type/edit-access-point-type') {
        //forward = null; //the destination form is the same, stay on the current view
      }
    }

    if (!this.actionToDialog && forward !== null) {
      this.router.navigate([forward], { queryParams: this.useCaseScope.queryParams });
    }
  }

  /**
   * TODO: Model Documentation for access.type.Save Access Point Type
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _saveAccessPointTypeEditAccessPointTypeSaveFormImpl(form: any): string {
    let forward: string = '';
    this.doSave(form);
    forward = null;
    return forward;
  }

  /**
   * TODO: Model Documentation for access.type.delete
   * This method is called when 'delete' is triggered in the view 'Edit Access Point Type'.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _editAccessPointType_delete(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves editAccessPointTypeDelete()
   *
   * @return editAccessPointTypeDelete
   * @throws Throwable
   */
  public editAccessPointTypeDelete(form: any) {
    let forward: string;

    //trigger method execution
    this._editAccessPointType_delete(form);

    forward = this._deleteFormSubmissionEditAccessPointTypeDeleteFormImpl(form);

    if (forward !== null) {
      if (forward === 'access/type/edit-access-point-type') {
        //forward = null; //the destination form is the same, stay on the current view
      }
    }

    if (!this.actionToDialog && forward !== null) {
      this.router.navigate([forward], { queryParams: this.useCaseScope.queryParams });
    }
  }

  /**
   * TODO: Model Documentation for access.type.Delete Form Submission
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _deleteFormSubmissionEditAccessPointTypeDeleteFormImpl(form: any): string {
    let forward: string = '';
    this.doDelete(form);
    forward = null;
    return forward;
  }

  /**
   * TODO: Model Documentation for access.type.search
   * This method is called when 'search' is triggered in the view 'Edit Access Point Type'.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _editAccessPointType_search(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves editAccessPointTypeSearch()
   *
   * @return editAccessPointTypeSearch
   * @throws Throwable
   */
  public editAccessPointTypeSearch(form: any) {
    let forward: string;

    //trigger method execution
    this._editAccessPointType_search(form);

    forward = this._initialiseSearchScreenEditAccessPointTypeSearchFormImpl(form);

    if (forward !== null) {
      if (forward === 'access/type/edit-access-point-type') {
        //forward = null; //the destination form is the same, stay on the current view
      }
    }

    if (!this.actionToDialog && forward !== null) {
      this.router.navigate([forward], { queryParams: this.useCaseScope.queryParams });
    }
  }

  /**
   * TODO: Model Documentation for access.type.Initialise Search Screen
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _initialiseSearchScreenEditAccessPointTypeSearchFormImpl(form: any): string {
    let forward: string = '';
    this.actionToDialog = false;
    this.doInitialiseSearchScreen(form);
    forward = 'access/type/search-access-point-types';
    return forward;
  }

  /**
   * TODO: Model Documentation for access.type.edit
   * This method is called when 'edit' is triggered in the view 'Search Access Point Types'.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _searchAccessPointTypes_edit(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves searchAccessPointTypesEdit()
   *
   * @return searchAccessPointTypesEdit
   * @throws Throwable
   */
  public searchAccessPointTypesEdit(form: any) {
    let forward: string;

    //trigger method execution
    this._searchAccessPointTypes_edit(form);

    forward = this._initialiseEditScreenSearchAccessPointTypesEditFormImpl(form);

    if (forward !== null) {
      if (forward === 'access/type/search-access-point-types') {
        //forward = null; //the destination form is the same, stay on the current view
      }
    }

    if (!this.actionToDialog && forward !== null) {
      this.router.navigate([forward], { queryParams: this.useCaseScope.queryParams });
    }
  }

  /**
   * TODO: Model Documentation for access.type.Initialise Edit Screen
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _initialiseEditScreenSearchAccessPointTypesEditFormImpl(form: any): string {
    let forward: string = '';
    this.actionToDialog = false;
    this.doInitialiseEditScreen(form);
    forward = 'access/type/edit-access-point-type';
    return forward;
  }

  /**
   * TODO: Model Documentation for access.type.search
   * This method is called when 'search' is triggered in the view 'Search Access Point Types'.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _searchAccessPointTypes_search(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves searchAccessPointTypesSearch()
   *
   * @return searchAccessPointTypesSearch
   * @throws Throwable
   */
  public searchAccessPointTypesSearch(form: any) {
    let forward: string;

    //trigger method execution
    this._searchAccessPointTypes_search(form);

    forward = this._accessPointTypeSearchSearchAccessPointTypesSearchFormImpl(form);

    if (forward !== null) {
      if (forward === 'access/type/search-access-point-types') {
        //forward = null; //the destination form is the same, stay on the current view
      }
    }

    if (!this.actionToDialog && forward !== null) {
      this.router.navigate([forward], { queryParams: this.useCaseScope.queryParams });
    }
  }

  /**
   * TODO: Model Documentation for access.type.Access Point Type Search
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _accessPointTypeSearchSearchAccessPointTypesSearchFormImpl(form: any): string {
    let forward: string = '';
    this.doSearch(form);
    forward = this._initialiseSearchScreenSearchAccessPointTypesSearchFormImpl(form);
    return forward;
  }

  /**
   * TODO: Model Documentation for access.type.Initialise Search Screen
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _initialiseSearchScreenSearchAccessPointTypesSearchFormImpl(form: any): string {
    let forward: string = '';
    this.actionToDialog = false;
    this.doInitialiseSearchScreen(form);
    forward = 'access/type/search-access-point-types';
    return forward;
  }

  /**
   * TODO: Model Documentation for access.type.create
   * This method is called when 'create' is triggered in the view 'Search Access Point Types'.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _searchAccessPointTypes_create(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves searchAccessPointTypesCreate()
   *
   * @return searchAccessPointTypesCreate
   * @throws Throwable
   */
  public searchAccessPointTypesCreate(form: any) {
    let forward: string;

    //trigger method execution
    this._searchAccessPointTypes_create(form);

    forward = this._initialiseEditScreenSearchAccessPointTypesCreateFormImpl(form);

    if (forward !== null) {
      if (forward === 'access/type/search-access-point-types') {
        //forward = null; //the destination form is the same, stay on the current view
      }
    }

    if (!this.actionToDialog && forward !== null) {
      this.router.navigate([forward], { queryParams: this.useCaseScope.queryParams });
    }
  }

  /**
   * TODO: Model Documentation for access.type.Initialise Edit Screen
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _initialiseEditScreenSearchAccessPointTypesCreateFormImpl(form: any): string {
    let forward: string = '';
    this.actionToDialog = false;
    this.doInitialiseEditScreen(form);
    forward = 'access/type/edit-access-point-type';
    return forward;
  }

  /**
   * This method is called when the use case 'Access Point Type' starts.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _accessPointType_started(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves the internal start use case
   *
   * @return accessPointType
   * @throws Throwable
   */
  protected internalStartUseCase(pageVariables: any): string {
    let forward: string;

    //trigger method execution
    let form: any = Object.assign({}, pageVariables);
    this._accessPointType_started(form);

    forward = this._initialiseEditScreenAccessPointTypeFormImpl(form);

    return forward;
  }

  /**
   * TODO: Model Documentation for access.type.Initialise Edit Screen
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _initialiseEditScreenAccessPointTypeFormImpl(form: any): string {
    let forward: string = '';
    this.actionToDialog = false;
    this.doInitialiseEditScreen(form);
    forward = 'access/type/edit-access-point-type';
    return forward;
  }
}
