// license-header java merge-point
// Generated by andromda-angular cartridge (controller\controller.ts.vsl) DO NOT EDIT!
import { Injector } from '@angular/core';
import { ControllerBase } from '@app/controller/utils/controller.base';

import { AuthorisationRestController } from '@app/service//auth/authorisation-rest-controller';

export abstract class AuthorisationController extends ControllerBase {
  actionToDialog: boolean = false;
  authorisationRestController: AuthorisationRestController;
  protected _injector: Injector;

  constructor(injector: Injector) {
    super(injector);
    this.authorisationRestController = injector.get(AuthorisationRestController);
    this._injector = injector;
  }

  /**
   * TODO: Model Documentation for auth.AuthorisationController.doInitialiseEditScreen
   *
   * @param form the associated form
   * [org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[auth.authorisation], org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[auth.id]]
   */
  public abstract doInitialiseEditScreen(form: any): void;

  /**
   * TODO: Model Documentation for auth.AuthorisationController.doSave
   *
   * @param form the associated form
   * [org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[auth.authorisation]]
   */
  public abstract doSave(form: any): void;

  /**
   * TODO: Model Documentation for auth.AuthorisationController.doInitialiseSearchScreen
   *
   * @param form the associated form
   * []
   */
  public abstract doInitialiseSearchScreen(form: any): void;

  /**
   * TODO: Model Documentation for auth.AuthorisationController.doSearch
   *
   * @param form the associated form
   * [org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[auth.criteria]]
   */
  public abstract doSearch(form: any): void;

  /**
   * TODO: Model Documentation for auth.AuthorisationController.doEditAuthorisation
   *
   * @param form the associated form
   * [org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[auth.AuthorisationController.doEditAuthorisation(id)]]
   */
  public abstract doEditAuthorisation(form: any): void;

  /**
   * TODO: Model Documentation for auth.AuthorisationController.doDelete
   *
   * @param form the associated form
   * [org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[auth.authorisation]]
   */
  public abstract doDelete(form: any): void;

  /**
   * TODO: Model Documentation for auth.save
   * This method is called when 'save' is triggered in the view 'Edit Authorisation'.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _editAuthorisation_save(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves editAuthorisationSave()
   *
   * @return editAuthorisationSave
   * @throws Throwable
   */
  public editAuthorisationSave(form: any) {
    let forward: string;

    //trigger method execution
    this._editAuthorisation_save(form);

    forward = this._saveAuthorisationEditAuthorisationSaveFormImpl(form);

    if (forward !== null) {
      if (forward === 'authorisation/edit-authorisation') {
        //forward = null; //the destination form is the same, stay on the current view
      }
    }

    if (!this.actionToDialog && forward !== null) {
      this.router.navigate([forward], { queryParams: this.useCaseScope.queryParams });
    }
  }

  /**
   * TODO: Model Documentation for auth.Save Authorisation
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _saveAuthorisationEditAuthorisationSaveFormImpl(form: any): string {
    let forward: string = '';
    this.doSave(form);
    forward = null;
    return forward;
  }

  /**
   * TODO: Model Documentation for auth.search
   * This method is called when 'search' is triggered in the view 'Edit Authorisation'.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _editAuthorisation_search(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves editAuthorisationSearch()
   *
   * @return editAuthorisationSearch
   * @throws Throwable
   */
  public editAuthorisationSearch(form: any) {
    let forward: string;

    //trigger method execution
    this._editAuthorisation_search(form);

    forward = this._initialiseSearchScreenEditAuthorisationSearchFormImpl(form);

    if (forward !== null) {
      if (forward === 'authorisation/edit-authorisation') {
        //forward = null; //the destination form is the same, stay on the current view
      }
    }

    if (!this.actionToDialog && forward !== null) {
      this.router.navigate([forward], { queryParams: this.useCaseScope.queryParams });
    }
  }

  /**
   * TODO: Model Documentation for auth.Initialise Search Screen
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _initialiseSearchScreenEditAuthorisationSearchFormImpl(form: any): string {
    let forward: string = '';
    this.actionToDialog = false;
    this.doInitialiseSearchScreen(form);
    forward = 'authorisation/search-authorisations';
    return forward;
  }

  /**
   * TODO: Model Documentation for auth.delete
   * This method is called when 'delete' is triggered in the view 'Edit Authorisation'.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _editAuthorisation_delete(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves editAuthorisationDelete()
   *
   * @return editAuthorisationDelete
   * @throws Throwable
   */
  public editAuthorisationDelete(form: any) {
    let forward: string;

    //trigger method execution
    this._editAuthorisation_delete(form);

    forward = this._deleteAuthorisationEditAuthorisationDeleteFormImpl(form);

    if (forward !== null) {
      if (forward === 'authorisation/edit-authorisation') {
        //forward = null; //the destination form is the same, stay on the current view
      }
    }

    if (!this.actionToDialog && forward !== null) {
      this.router.navigate([forward], { queryParams: this.useCaseScope.queryParams });
    }
  }

  /**
   * TODO: Model Documentation for auth.Delete Authorisation
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _deleteAuthorisationEditAuthorisationDeleteFormImpl(form: any): string {
    let forward: string = '';
    this.doDelete(form);
    forward = null;
    return forward;
  }

  /**
   * TODO: Model Documentation for auth.edit
   * This method is called when 'edit' is triggered in the view 'Search Authorisations'.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _searchAuthorisations_edit(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves searchAuthorisationsEdit()
   *
   * @return searchAuthorisationsEdit
   * @throws Throwable
   */
  public searchAuthorisationsEdit(form: any) {
    let forward: string;

    //trigger method execution
    this._searchAuthorisations_edit(form);

    forward = this._initialiseEditScreenSearchAuthorisationsEditFormImpl(form);

    if (forward !== null) {
      if (forward === 'authorisation/search-authorisations') {
        //forward = null; //the destination form is the same, stay on the current view
      }
    }

    if (!this.actionToDialog && forward !== null) {
      this.router.navigate([forward], { queryParams: this.useCaseScope.queryParams });
    }
  }

  /**
   * TODO: Model Documentation for auth.Initialise Edit Screen
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _initialiseEditScreenSearchAuthorisationsEditFormImpl(form: any): string {
    let forward: string = '';
    this.actionToDialog = false;
    this.doInitialiseEditScreen(form);
    forward = 'authorisation/edit-authorisation';
    return forward;
  }

  /**
   * TODO: Model Documentation for auth.search
   * This method is called when 'search' is triggered in the view 'Search Authorisations'.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _searchAuthorisations_search(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves searchAuthorisationsSearch()
   *
   * @return searchAuthorisationsSearch
   * @throws Throwable
   */
  public searchAuthorisationsSearch(form: any) {
    let forward: string;

    //trigger method execution
    this._searchAuthorisations_search(form);

    forward = this._uRLAuthorisationsSearchSearchAuthorisationsSearchFormImpl(form);

    if (forward !== null) {
      if (forward === 'authorisation/search-authorisations') {
        //forward = null; //the destination form is the same, stay on the current view
      }
    }

    if (!this.actionToDialog && forward !== null) {
      this.router.navigate([forward], { queryParams: this.useCaseScope.queryParams });
    }
  }

  /**
   * TODO: Model Documentation for auth.URL Authorisations Search
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _uRLAuthorisationsSearchSearchAuthorisationsSearchFormImpl(form: any): string {
    let forward: string = '';
    this.doSearch(form);
    forward = this._initialiseSearchScreenSearchAuthorisationsSearchFormImpl(form);
    return forward;
  }

  /**
   * TODO: Model Documentation for auth.Initialise Search Screen
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _initialiseSearchScreenSearchAuthorisationsSearchFormImpl(form: any): string {
    let forward: string = '';
    this.actionToDialog = false;
    this.doInitialiseSearchScreen(form);
    forward = 'authorisation/search-authorisations';
    return forward;
  }

  /**
   * This method is called when the use case 'Authorisations' starts.
   * It can be safely overridden in descendant classes.
   *
   * @param form the associated form
   */
  protected _authorisations_started(form: any): void {
    //this method can be overridden
  }

  /**
   * Retrieves the internal start use case
   *
   * @return authorisations
   * @throws Throwable
   */
  protected internalStartUseCase(pageVariables: any): string {
    let forward: string;

    //trigger method execution
    let form: any = Object.assign({}, pageVariables);
    this._authorisations_started(form);

    forward = this._initialiseEditScreenAuthorisationsFormImpl(form);

    return forward;
  }

  /**
   * TODO: Model Documentation for auth.Initialise Edit Screen
   *
   * @param form the associated form
   * @return the forward view
   * @throws Throwable
   */
  protected _initialiseEditScreenAuthorisationsFormImpl(form: any): string {
    let forward: string = '';
    this.actionToDialog = false;
    this.doInitialiseEditScreen(form);
    forward = 'authorisation/edit-authorisation';
    return forward;
  }
}
