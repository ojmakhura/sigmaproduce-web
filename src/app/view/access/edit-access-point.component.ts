// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
  Component,
  OnInit,
  Injector,
  ViewChild,
  Input,
  Output,
  EventEmitter,
  AfterViewInit,
  OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatTableDataSource } from '@angular/material/table';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { AccessPointState } from '@app/store/access/access-point.state';
import * as AccessPointSelectors from '@app/store/access/access-point.selectors';
import * as AccessPointActions from '@app/store/access/access-point.actions';

import { AccessPointRestController } from '@app/service//access/access-point-rest-controller';
import { AccessPointControllerImpl } from '@app/controller/access/access-point-controller.impl';
import { AccessPointVO } from '@app/model//access/access-point-vo';
import { AccessPointCriteria } from '@app/model//access/access-point-criteria';
import { AccessPointTypeVO } from '@app/model//access/type/access-point-type-vo';

export class EditAccessPointSaveForm {
  accessPoint: AccessPointVO | any;
}

export class EditAccessPointDeleteForm {
  accessPoint: AccessPointVO | any;
}

export class EditAccessPointSearchForm {
  accessPoints: Array<AccessPointVO>[] | any[];
  criteria: AccessPointCriteria | any;
  id: number | any;
}
export class EditAccessPointVarsForm {
  accessPoint: AccessPointVO | any;
}

@Component({
  selector: 'app-edit-access-point-base',
  template: '',
})
export abstract class EditAccessPointComponent implements OnInit, AfterViewInit, OnDestroy {
  editAccessPointForm: FormGroup | any;
  hide: boolean = false;
  protected route: ActivatedRoute;
  protected router: Router;
  protected formBuilder: FormBuilder;
  protected _injector: Injector;
  protected useCaseScope: UseCaseScope;
  protected store: Store<AccessPointState>;
  dialog: MatDialog;
  accessPointController: AccessPointControllerImpl;
  accessPointRestController: AccessPointRestController;
  @ViewChild('accessPointAccessPointTypeModalPaginator', { static: true })
  accessPointAccessPointTypeModalPaginator: MatPaginator;
  @ViewChild('accessPointAccessPointTypeModalSort', { static: true }) accessPointAccessPointTypeModalSort: MatSort;

  accessPointAccessPointTypes$: Observable<Array<AccessPointTypeVO>>;
  accessPointAccessPointTypesDataSource = new MatTableDataSource<AccessPointTypeVO>([]);
  accessPointAccessPointTypeSelect: AccessPointTypeVO = new AccessPointTypeVO();
  accessPointAccessPointTypeSearchField: FormControl = new FormControl();

  accessPointAccessPointTypeModalColumns = ['actions', 'id', 'name'];

  accessPointAccessPointTypeBackingList: Array<SelectItem> = [];
  accessPoint$: Observable<AccessPointVO>;
  messages: Observable<any>;
  success: Observable<boolean>;
  loading: Observable<boolean>;
  loaderMessage: Observable<string>;
  error: Observable<boolean>;
  selected: any = null;

  constructor(injector: Injector) {
    this.route = injector.get(ActivatedRoute);
    this.router = injector.get(Router);
    this.formBuilder = injector.get(FormBuilder);
    this.useCaseScope = injector.get(UseCaseScope);
    this.store = injector.get(Store);
    this.dialog = injector.get(MatDialog);
    this.accessPointController = injector.get(AccessPointControllerImpl);
    this.accessPointRestController = injector.get(AccessPointRestController);
    this._injector = injector;
    this.accessPoint$ = this.store.pipe(select(AccessPointSelectors.selectAccessPoint));
    this.loading = this.store.pipe(select(AccessPointSelectors.selectLoading));
    this.loaderMessage = this.store.pipe(select(AccessPointSelectors.selectLoaderMessage));
    this.success = this.store.pipe(select(AccessPointSelectors.selectSuccess));
    this.error = this.store.pipe(select(AccessPointSelectors.selectError));
    this.messages = this.store.pipe(select(AccessPointSelectors.selectMessages));
  }

  beforeOnInit(form: EditAccessPointVarsForm): EditAccessPointVarsForm {
    return form;
  }

  ngOnInit() {
    let form: EditAccessPointVarsForm = this.beforeOnInit(new EditAccessPointVarsForm());
    this.editAccessPointForm = this.newForm(form);

    this.editAccessPointForm.valueChanges.subscribe((change: any) => {
      this.handleFormChanges(change);
    });

    this.accessPointAccessPointTypes$?.subscribe((data) => {
      this.accessPointAccessPointTypesDataSource.data = data;
      this.accessPointAccessPointTypesDataSource.paginator = this.accessPointAccessPointTypeModalPaginator;
      this.accessPointAccessPointTypesDataSource.sort = this.accessPointAccessPointTypeModalSort;
    });

    this.afterOnInit();
  }

  handleFormChanges(change: any): void {}

  editAccessPointFormReset() {
    this.store.dispatch(AccessPointActions.accessPointReset());

    this.editAccessPointForm.reset();
    this.editAccessPointForm.markAsPristine();

    if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
      this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
    } else {
      this.router.navigate([this.router.url]);
    }
  }

  afterOnInit(): void {}

  doNgAfterViewInit(): void {}

  ngAfterViewInit() {
    this.doNgAfterViewInit();
    this.accessPointController.resetUseCaseScope();
  }

  newForm(editAccessPointVarsForm$: EditAccessPointVarsForm): FormGroup {
    return this.formBuilder.group({
      accessPoint: this.createAccessPointForm(editAccessPointVarsForm$?.accessPoint),
    });
  }

  abstract doNgOnDestroy(): void;

  ngOnDestroy() {
    this.doNgOnDestroy();
    this.store.dispatch(AccessPointActions.accessPointReset());
  }

  get editAccessPointSaveForm(): EditAccessPointSaveForm {
    let form: EditAccessPointSaveForm = new EditAccessPointSaveForm();
    form.accessPoint = this.accessPoint;

    return form;
  }

  /**
   * This method may be overwritten
   */
  beforeEditAccessPointSave(form: EditAccessPointSaveForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditAccessPointSave(form: EditAccessPointSaveForm): void {}

  editAccessPointSave(): void {
    let form: EditAccessPointSaveForm = this.editAccessPointSaveForm;
    this.beforeEditAccessPointSave(form);

    this.accessPointController.editAccessPointSave(form);
    this.afterEditAccessPointSave(form);
  }

  getEditAccessPointSaveForm(value: any): EditAccessPointSaveForm {
    let form: EditAccessPointSaveForm = new EditAccessPointSaveForm();

    if (value?.accessPoint) {
      form.accessPoint = value?.accessPoint;
    }

    return form;
  }

  get editAccessPointDeleteForm(): EditAccessPointDeleteForm {
    let form: EditAccessPointDeleteForm = new EditAccessPointDeleteForm();
    form.accessPoint = this.accessPoint;

    return form;
  }

  /**
   * This method may be overwritten
   */
  beforeEditAccessPointDelete(form: EditAccessPointDeleteForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditAccessPointDelete(form: EditAccessPointDeleteForm): void {}

  editAccessPointDelete(): void {
    let form: EditAccessPointDeleteForm = this.editAccessPointDeleteForm;
    this.beforeEditAccessPointDelete(form);

    this.accessPointController.editAccessPointDelete(form);
    this.afterEditAccessPointDelete(form);
  }

  getEditAccessPointDeleteForm(value: any): EditAccessPointDeleteForm {
    let form: EditAccessPointDeleteForm = new EditAccessPointDeleteForm();

    if (value?.accessPoint) {
      form.accessPoint = value?.accessPoint;
    }

    return form;
  }

  get editAccessPointSearchForm(): EditAccessPointSearchForm {
    let form: EditAccessPointSearchForm = new EditAccessPointSearchForm();

    return form;
  }

  /**
   * This method may be overwritten
   */
  beforeEditAccessPointSearch(form: EditAccessPointSearchForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditAccessPointSearch(form: EditAccessPointSearchForm): void {}

  editAccessPointSearch(): void {
    let form: EditAccessPointSearchForm = this.editAccessPointSearchForm;
    this.beforeEditAccessPointSearch(form);

    this.accessPointController.editAccessPointSearch(form);
    this.afterEditAccessPointSearch(form);
  }

  getEditAccessPointSearchForm(value: any): EditAccessPointSearchForm {
    let form: EditAccessPointSearchForm = new EditAccessPointSearchForm();

    return form;
  }

  get editAccessPointVarsFormControl(): FormGroup {
    return this.getGroupControl('editAccessPointVarsForm');
  }

  /**
   * This method may be overwritten
   */
  afterSetEditAccessPointVarsForm(form: EditAccessPointVarsForm): void {}

  setEditAccessPointVarsForm(form: EditAccessPointVarsForm) {
    this.editAccessPointVarsFormControl.setControl('accessPoint', this.createAccessPointForm(form.accessPoint));

    this.afterSetEditAccessPointVarsForm(form);
  }

  createAccessPointForm(accessPoint: AccessPointVO): FormGroup {
    return this.formBuilder.group({
      id: [{ value: accessPoint?.id, disabled: false }],
      createdBy: [{ value: accessPoint?.createdBy, disabled: false }],
      updatedBy: [{ value: accessPoint?.updatedBy, disabled: false }],
      createdDate: [{ value: accessPoint?.createdDate, disabled: false }],
      updatedDate: [{ value: accessPoint?.updatedDate, disabled: false }],
      accessPointType: this.createAccessPointTypeVOGroup(accessPoint?.accessPointType),
      name: [{ value: accessPoint?.name, disabled: false }, [Validators.required]],
      url: [{ value: accessPoint?.url, disabled: false }, [Validators.required]],
      icon: [{ value: accessPoint?.icon, disabled: false }],
    });
  }

  get accessPointControl(): FormGroup {
    return this.getGroupControl('accessPoint') as FormGroup;
  }

  get accessPoint(): AccessPointVO {
    return this.accessPointControl.value;
  }

  get accessPointIdControl(): FormControl {
    return this.accessPointControl.get('id') as FormControl;
  }

  get accessPointId(): number {
    return this.accessPointIdControl.value;
  }

  get accessPointCreatedByControl(): FormControl {
    return this.accessPointControl.get('createdBy') as FormControl;
  }

  get accessPointCreatedBy(): string {
    return this.accessPointCreatedByControl.value;
  }

  get accessPointUpdatedByControl(): FormControl {
    return this.accessPointControl.get('updatedBy') as FormControl;
  }

  get accessPointUpdatedBy(): string {
    return this.accessPointUpdatedByControl.value;
  }

  get accessPointCreatedDateControl(): FormControl {
    return this.accessPointControl.get('createdDate') as FormControl;
  }

  get accessPointCreatedDate(): Date {
    return this.accessPointCreatedDateControl.value;
  }

  get accessPointUpdatedDateControl(): FormControl {
    return this.accessPointControl.get('updatedDate') as FormControl;
  }

  get accessPointUpdatedDate(): Date {
    return this.accessPointUpdatedDateControl.value;
  }

  get accessPointAccessPointTypeControl(): FormGroup {
    return this.accessPointControl.get('accessPointType') as FormGroup;
  }

  get accessPointAccessPointType(): AccessPointTypeVO {
    return this.accessPointAccessPointTypeControl.value;
  }

  get accessPointNameControl(): FormControl {
    return this.accessPointControl.get('name') as FormControl;
  }

  get accessPointName(): string {
    return this.accessPointNameControl.value;
  }

  get accessPointUrlControl(): FormControl {
    return this.accessPointControl.get('url') as FormControl;
  }

  get accessPointUrl(): string {
    return this.accessPointUrlControl.value;
  }

  get accessPointIconControl(): FormControl {
    return this.accessPointControl.get('icon') as FormControl;
  }

  get accessPointIcon(): string {
    return this.accessPointIconControl.value;
  }

  getItemControl(name: string): FormControl {
    return this.editAccessPointForm.get(name) as FormControl;
  }

  getGroupControl(name: string): FormGroup {
    return this.editAccessPointForm.get(name) as FormGroup;
  }

  getArrayControl(name: string): FormArray {
    return this.editAccessPointForm.get(name) as FormArray;
  }

  setEditAccessPointFormValue(form: any) {
    if (form.accessPoint) {
      this.editAccessPointForm.setControl('accessPoint', this.createAccessPointForm(form.accessPoint));
    }
  }

  createAccessPointVOGroup(value: AccessPointVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      name: [value?.name],
      url: [value?.url],
      icon: [value?.icon],
    });
  }

  createAccessPointVOArray(values: AccessPointVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAccessPointVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }

  createAccessPointCriteriaGroup(value: AccessPointCriteria): FormGroup {
    return this.formBuilder.group({
      type: [value?.type],
      name: [value?.name],
      url: [value?.url],
      typeId: [value?.typeId],
    });
  }

  createAccessPointCriteriaArray(values: AccessPointCriteria[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAccessPointCriteriaGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }

  createAccessPointTypeVOGroup(value: AccessPointTypeVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      code: [value?.code],
      name: [value?.name],
      description: [value?.description],
    });
  }

  createAccessPointTypeVOArray(values: AccessPointTypeVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAccessPointTypeVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }
}
