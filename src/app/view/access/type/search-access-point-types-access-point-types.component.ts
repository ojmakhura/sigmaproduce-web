// Generated by andromda-jsf cartridge (view\table\table.component.ts.vsl) DO NOT EDIT!
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { Component, OnInit, ViewChild, Injector, Input, OnDestroy } from '@angular/core';
import { MatTableExporterDirective } from 'mat-table-exporter';
import { MatTableDataSource } from '@angular/material/table';
import { FormArray } from '@angular/forms';
import { ControllerBase } from '@app/controller/utils/controller.base';
import { ActivatedRoute, Router } from '@angular/router';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { AccessPointTypeState } from '@app/store/access/type/access-point-type.state';
import * as AccessPointTypeSelectors from '@app/store/access/type/access-point-type.selectors';

import { AccessPointTypeVO } from '@app/model//access/type/access-point-type-vo';
import { SearchAccessPointTypesComponentImpl } from '@app/view/access/type/search-access-point-types.component.impl';
import { AccessPointTypeControllerImpl } from '@app/controller/access/type/access-point-type-controller.impl';

@Component({
  selector: 'search-access-point-types-access-point-types-base',
  template: '',
})
export abstract class SearchAccessPointTypesAccessPointTypesComponent implements OnInit, OnDestroy {
  accessPointTypesColumns = ['id', 'name'];

  accessPointTypes$: Observable<Array<AccessPointTypeVO>>;

  accessPointTypesDataSource = new MatTableDataSource<AccessPointTypeVO>([]);
  @ViewChild('accessPointTypesPaginator', { static: true }) accessPointTypesPaginator: MatPaginator;
  @ViewChild('accessPointTypesSort', { static: true }) accessPointTypesSort: MatSort;
  @ViewChild(MatTableExporterDirective) matTableExporter: MatTableExporterDirective;

  totalElements: number = 0;

  @Input() protected pageVariables: any;
  protected route: ActivatedRoute;
  protected router: Router;
  protected useCaseScope: UseCaseScope;
  protected store: Store<AccessPointTypeState>;
  protected accessPointTypeController: AccessPointTypeControllerImpl;
  protected searchAccessPointTypesComponent: SearchAccessPointTypesComponentImpl;
  protected _injector: Injector;

  constructor(injector: Injector) {
    this.route = injector.get(ActivatedRoute);
    this.router = injector.get(Router);
    this.useCaseScope = injector.get(UseCaseScope);
    this.store = injector.get(Store);
    this.accessPointTypeController = injector.get(AccessPointTypeControllerImpl);
    this.searchAccessPointTypesComponent = injector.get(SearchAccessPointTypesComponentImpl);
    this._injector = injector;
    this.accessPointTypes$ = this.store.pipe(select(AccessPointTypeSelectors.selectAccessPointTypes));
  }

  ngOnInit(): void {}

  ngOnDestroy() {}

  ngAfterViewInit() {
    this.accessPointTypes$.subscribe((accessPointTypes) => {
      this.accessPointTypesDataSource.data = accessPointTypes;
      this.totalElements = accessPointTypes.length;
      this.accessPointTypesDataSource.paginator = this.accessPointTypesPaginator;
      this.accessPointTypesDataSource.sort = this.accessPointTypesSort;
    });
  }

  doSearchAccessPointTypesEdit(form: any): any {}

  searchAccessPointTypesEdit(id: number) {
    let form = {
      id: id,
    };
    let queryParams: any = {
      id: id,
    };
    this.accessPointTypeController.setQueryParams(Object.assign({}, queryParams));
    let params = this.doSearchAccessPointTypesEdit(form);
    this.useCaseScope.pageVariables = Object.assign({}, params);
    this.accessPointTypeController.searchAccessPointTypesEdit(params);
  }

  getAccessPointTypesExportData(): any {
    return this.accessPointTypesDataSource?.data?.map((row) => {
      return {
        id: row?.id,
        name: row?.name,
      };
    });
  }
}
