// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
  Component,
  OnInit,
  Injector,
  ViewChild,
  Input,
  Output,
  EventEmitter,
  AfterViewInit,
  OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatTableDataSource } from '@angular/material/table';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { AccessPointTypeState } from '@app/store/access/type/access-point-type.state';
import * as AccessPointTypeSelectors from '@app/store/access/type/access-point-type.selectors';
import * as AccessPointTypeActions from '@app/store/access/type/access-point-type.actions';

import { SearchAccessPointTypesAccessPointTypesComponentImpl } from '@app/view/access/type/search-access-point-types-access-point-types.component.impl';
import { AccessPointTypeControllerImpl } from '@app/controller/access/type/access-point-type-controller.impl';
import { AccessPointTypeRestController } from '@app/service//access/type/access-point-type-rest-controller';
import { AccessPointTypeVO } from '@app/model//access/type/access-point-type-vo';

export class SearchAccessPointTypesSearchForm {
  accessPointTypes: Array<AccessPointTypeVO>[] | any[];
  criteria: String | any;
  id: number | any;
}

export class SearchAccessPointTypesCreateForm {
  accessPointType: AccessPointTypeVO | any;
  id: number | any;
}
export class SearchAccessPointTypesVarsForm {
  criteria: String | any;
}

@Component({
  selector: 'app-search-access-point-types-base',
  template: '',
})
export abstract class SearchAccessPointTypesComponent implements OnInit, AfterViewInit, OnDestroy {
  searchAccessPointTypesForm: FormGroup | any;
  hide: boolean = false;
  protected route: ActivatedRoute;
  protected router: Router;
  protected formBuilder: FormBuilder;
  protected _injector: Injector;
  protected useCaseScope: UseCaseScope;
  protected store: Store<AccessPointTypeState>;
  dialog: MatDialog;
  accessPointTypeController: AccessPointTypeControllerImpl;
  accessPointTypeRestController: AccessPointTypeRestController;
  criteria$: Observable<String>;
  messages: Observable<any>;
  success: Observable<boolean>;
  loading: Observable<boolean>;
  loaderMessage: Observable<string>;
  error: Observable<boolean>;
  selected: any = null;

  @ViewChild('searchAccessPointTypesAccessPointTypesComponent')
  searchAccessPointTypesAccessPointTypesComponent: SearchAccessPointTypesAccessPointTypesComponentImpl;

  constructor(injector: Injector) {
    this.route = injector.get(ActivatedRoute);
    this.router = injector.get(Router);
    this.formBuilder = injector.get(FormBuilder);
    this.useCaseScope = injector.get(UseCaseScope);
    this.store = injector.get(Store);
    this.dialog = injector.get(MatDialog);
    this.accessPointTypeController = injector.get(AccessPointTypeControllerImpl);
    this.accessPointTypeRestController = injector.get(AccessPointTypeRestController);
    this._injector = injector;
    this.criteria$ = this.store.pipe(select(AccessPointTypeSelectors.selectCriteria));
    this.loading = this.store.pipe(select(AccessPointTypeSelectors.selectLoading));
    this.loaderMessage = this.store.pipe(select(AccessPointTypeSelectors.selectLoaderMessage));
    this.success = this.store.pipe(select(AccessPointTypeSelectors.selectSuccess));
    this.error = this.store.pipe(select(AccessPointTypeSelectors.selectError));
    this.messages = this.store.pipe(select(AccessPointTypeSelectors.selectMessages));
  }

  beforeOnInit(form: SearchAccessPointTypesVarsForm): SearchAccessPointTypesVarsForm {
    return form;
  }

  ngOnInit() {
    let form: SearchAccessPointTypesVarsForm = this.beforeOnInit(new SearchAccessPointTypesVarsForm());
    this.searchAccessPointTypesForm = this.newForm(form);

    this.searchAccessPointTypesForm.valueChanges.subscribe((change: any) => {
      this.handleFormChanges(change);
    });

    this.afterOnInit();
  }

  handleFormChanges(change: any): void {}

  searchAccessPointTypesFormReset() {
    this.store.dispatch(AccessPointTypeActions.accessPointTypeReset());

    this.searchAccessPointTypesForm.reset();
    this.searchAccessPointTypesForm.markAsPristine();

    if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
      this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
    } else {
      this.router.navigate([this.router.url]);
    }
  }

  afterOnInit(): void {}

  doNgAfterViewInit(): void {}

  ngAfterViewInit() {
    this.doNgAfterViewInit();
    this.accessPointTypeController.resetUseCaseScope();
  }

  newForm(searchAccessPointTypesVarsForm$: SearchAccessPointTypesVarsForm): FormGroup {
    return this.formBuilder.group({
      criteria: [{ value: searchAccessPointTypesVarsForm$?.criteria, disabled: false }, [Validators.required]],
      accessPointTypes: this.formBuilder.array([
        this.formBuilder.group({
          id: [''],
          name: [''],
        }),
      ]),
    });
  }

  abstract doNgOnDestroy(): void;

  ngOnDestroy() {
    this.doNgOnDestroy();
    this.store.dispatch(AccessPointTypeActions.accessPointTypeReset());
  }

  get searchAccessPointTypesSearchForm(): SearchAccessPointTypesSearchForm {
    let form: SearchAccessPointTypesSearchForm = new SearchAccessPointTypesSearchForm();
    form.criteria = this.criteria;

    return form;
  }

  /**
   * This method may be overwritten
   */
  beforeSearchAccessPointTypesSearch(form: SearchAccessPointTypesSearchForm): void {}

  /**
   * This method may be overwritten
   */
  afterSearchAccessPointTypesSearch(form: SearchAccessPointTypesSearchForm): void {}

  searchAccessPointTypesSearch(): void {
    let form: SearchAccessPointTypesSearchForm = this.searchAccessPointTypesSearchForm;
    this.beforeSearchAccessPointTypesSearch(form);

    this.accessPointTypeController.searchAccessPointTypesSearch(form);
    this.afterSearchAccessPointTypesSearch(form);
  }

  getSearchAccessPointTypesSearchForm(value: any): SearchAccessPointTypesSearchForm {
    let form: SearchAccessPointTypesSearchForm = new SearchAccessPointTypesSearchForm();

    if (value?.criteria) {
      form.criteria = value?.criteria;
    }

    return form;
  }

  get searchAccessPointTypesCreateForm(): SearchAccessPointTypesCreateForm {
    let form: SearchAccessPointTypesCreateForm = new SearchAccessPointTypesCreateForm();

    return form;
  }

  /**
   * This method may be overwritten
   */
  beforeSearchAccessPointTypesCreate(form: SearchAccessPointTypesCreateForm): void {}

  /**
   * This method may be overwritten
   */
  afterSearchAccessPointTypesCreate(form: SearchAccessPointTypesCreateForm): void {}

  searchAccessPointTypesCreate(): void {
    let form: SearchAccessPointTypesCreateForm = this.searchAccessPointTypesCreateForm;
    this.beforeSearchAccessPointTypesCreate(form);

    this.accessPointTypeController.searchAccessPointTypesCreate(form);
    this.afterSearchAccessPointTypesCreate(form);
  }

  getSearchAccessPointTypesCreateForm(value: any): SearchAccessPointTypesCreateForm {
    let form: SearchAccessPointTypesCreateForm = new SearchAccessPointTypesCreateForm();

    if (value?.id) {
      form.id = value?.id;
    }

    return form;
  }

  get searchAccessPointTypesVarsFormControl(): FormGroup {
    return this.getGroupControl('searchAccessPointTypesVarsForm');
  }

  /**
   * This method may be overwritten
   */
  afterSetSearchAccessPointTypesVarsForm(form: SearchAccessPointTypesVarsForm): void {}

  setSearchAccessPointTypesVarsForm(form: SearchAccessPointTypesVarsForm) {
    this.searchAccessPointTypesVarsFormControl.get('criteria').setValue(form.criteria);

    this.afterSetSearchAccessPointTypesVarsForm(form);
  }

  get criteriaControl(): FormControl {
    return this.getItemControl('criteria') as FormControl;
  }

  get criteria(): String {
    return this.criteriaControl.value;
  }

  getItemControl(name: string): FormControl {
    return this.searchAccessPointTypesForm.get(name) as FormControl;
  }

  getGroupControl(name: string): FormGroup {
    return this.searchAccessPointTypesForm.get(name) as FormGroup;
  }

  getArrayControl(name: string): FormArray {
    return this.searchAccessPointTypesForm.get(name) as FormArray;
  }

  setSearchAccessPointTypesFormValue(form: any) {
    if (form.criteria) {
      this.searchAccessPointTypesForm.get('criteria').setValue(form.criteria);
    }
  }

  setAccessPointTypes(accessPointTypes: Array<AccessPointTypeVO>): FormArray {
    const accessPointTypesArray = new FormArray([]);

    if (!accessPointTypes || accessPointTypes === undefined || accessPointTypes === null) {
      return accessPointTypesArray;
    }

    accessPointTypes.forEach((item) => {
      accessPointTypesArray.push(this.createAccessPointTypesGroup(item));
    });

    this.searchAccessPointTypesForm.setControl('accessPointTypes', accessPointTypesArray);

    return accessPointTypesArray;
  }

  get accessPointTypesControl(): FormArray {
    return this.getArrayControl('accessPointTypes');
  }

  get accessPointTypes(): Array<AccessPointTypeVO>[] {
    return this.accessPointTypesControl.value;
  }

  deleteFromAccessPointTypes(index: number) {
    this.accessPointTypesControl.removeAt(index);
  }

  addToAccessPointTypes(data: any) {
    this.accessPointTypesControl.push(this.createAccessPointTypesGroup(data));
  }

  createAccessPointTypesGroup(data: any): FormGroup {
    return this.formBuilder.group({
      id: [data?.id],
      name: [data?.name],
    });
  }

  addAccessPointTypesDummyData() {
    this.accessPointTypesControl.push(
      this.formBuilder.group({
        id: [1],
        name: ['name-1'],
      })
    );

    this.accessPointTypesControl.push(
      this.formBuilder.group({
        id: [2],
        name: ['name-2'],
      })
    );
  }

  createAccessPointTypeVOGroup(value: AccessPointTypeVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      code: [value?.code],
      name: [value?.name],
      description: [value?.description],
    });
  }

  createAccessPointTypeVOArray(values: AccessPointTypeVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAccessPointTypeVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }
}
