// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import * as AccessPointTypeActions from '@app/store/access/type/access-point-type.actions';
import * as ViewActions from '@app/store/view/view.actions';
import * as ViewSelectors from '@app/store/view/view.selectors';
import {
  EditAccessPointTypeComponent,
  EditAccessPointTypeDeleteForm,
  EditAccessPointTypeSaveForm,
  EditAccessPointTypeVarsForm,
} from '@app/view/access/type/edit-access-point-type.component';
import { KeycloakService } from 'keycloak-angular';
import { Observable } from 'rxjs';
import { select } from '@ngrx/store';

@Component({
  selector: 'app-edit-access-point-type',
  templateUrl: './edit-access-point-type.component.html',
  styleUrls: ['./edit-access-point-type.component.scss'],
})
export class EditAccessPointTypeComponentImpl extends EditAccessPointTypeComponent {
  protected keycloakService: KeycloakService;
  unauthorisedUrls$: Observable<string[]>;
  deleteUnrestricted: boolean = true;

  constructor(private injector: Injector) {
    super(injector);
    this.unauthorisedUrls$ = this.store.pipe(select(ViewSelectors.selectUnauthorisedUrls));
    this.keycloakService = injector.get(KeycloakService);
  }

  override beforeOnInit(form: EditAccessPointTypeVarsForm): EditAccessPointTypeVarsForm {
    return form;
  }

  override doNgOnDestroy() {}

  override doNgAfterViewInit(): void {
    this.store.dispatch(
      ViewActions.loadViewAuthorisations({
        viewUrl: '/access/type/edit-access-point-type',
        roles: this.keycloakService.getUserRoles(),
        loading: true,
      })
    );

    this.route.queryParams.subscribe((queryParams: any) => {
      if (queryParams?.id) {
        this.store.dispatch(
          AccessPointTypeActions.findById({
            id: queryParams?.id,
            loading: false,
            loaderMessage: 'Loading access point type by id ...',
          })
        );
      }
    });

    // this.store.dispatch(
    //   ViewActions.loadViewAuthorisations({
    //     viewUrl: "/access/type/edit-access-point-type",
    //     roles: this.keycloakService.getUserRoles(),
    //     loading: true
    //   })
    // );

    this.unauthorisedUrls$.subscribe((restrictedItems) => {
      restrictedItems.forEach((item) => {
        if (item === '/access/type/edit-access-point-type/{button:delete}') {
          this.deleteUnrestricted = false;
        }
      });
    });

    this.accessPointType$.subscribe((accessPointType) => {
      this.setEditAccessPointTypeFormValue({ accessPointType: accessPointType });
    });

    // this.unauthorisedUrls$.subscribe(restrictedItems => {
    //   restrictedItems.forEach(item => {
    //     if (item === '/access/type/edit-access-point-type/{button:delete}') {
    //       this.deleteUnrestricted = false;
    //     }
    //   });
    // });
  }

  override beforeEditAccessPointTypeSave(form: EditAccessPointTypeSaveForm): void {
    if (this.editAccessPointTypeForm.valid) {
      this.store.dispatch(
        AccessPointTypeActions.save({
          accessPointType: form.accessPointType,
          loading: true,
          loaderMessage: 'Saving access point type ...',
        })
      );
    } else {
      let messages: string[] = [];
      if (!this.accessPointTypeControl.valid) {
        messages.push('Access Point Type has errors, Please fill the required form fields.');
      }
      if (!this.accessPointTypeNameControl.valid) {
        messages.push('Access Point Type Name is missing!');
      }
      if (!this.accessPointTypeCodeControl.valid) {
        messages.push('Access Point Type Code is missing!');
      }
      this.store.dispatch(AccessPointTypeActions.accessPointTypeFailure({ messages: messages }));
    }
  }

  override beforeEditAccessPointTypeDelete(form: EditAccessPointTypeDeleteForm): void {
    if (form?.accessPointType?.id && confirm('Are you sure you want to delete the access point type?')) {
      this.store.dispatch(
        AccessPointTypeActions.remove({
          id: form?.accessPointType?.id,
          loading: false,
          loaderMessage: 'Removing access point type by id ...',
        })
      );
      this.editAccessPointTypeFormReset();
    } else {
      this.store.dispatch(
        AccessPointTypeActions.accessPointTypeFailure({ messages: ['Please select something to delete'] })
      );
    }
  }
}
