// Generated by andromda-jsf cartridge (view\table\table.component.ts.vsl) DO NOT EDIT!
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { Component, OnInit, ViewChild, Injector, Input, OnDestroy } from '@angular/core';
import { MatTableExporterDirective } from 'mat-table-exporter';
import { MatTableDataSource } from '@angular/material/table';
import { FormArray } from '@angular/forms';
import { ControllerBase } from '@app/controller/utils/controller.base';
import { ActivatedRoute, Router } from '@angular/router';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { AccessPointState } from '@app/store/access/access-point.state';
import * as AccessPointSelectors from '@app/store/access/access-point.selectors';

import { AccessPointVO } from '@app/model//access/access-point-vo';
import { AccessPointCriteria } from '@app/model//access/access-point-criteria';
import { AccessPointTypeVO } from '@app/model//access/type/access-point-type-vo';
import { SearchAccessPointsComponentImpl } from '@app/view/access/search-access-points.component.impl';
import { AccessPointControllerImpl } from '@app/controller/access/access-point-controller.impl';

@Component({
  selector: 'search-access-points-access-points-base',
  template: '',
})
export abstract class SearchAccessPointsAccessPointsComponent implements OnInit, OnDestroy {
  accessPointsColumns = ['id', 'accessPointType.name', 'name', 'url'];

  accessPoints$: Observable<Array<AccessPointVO>>;

  accessPointsDataSource = new MatTableDataSource<AccessPointVO>([]);
  @ViewChild('accessPointsPaginator', { static: true }) accessPointsPaginator: MatPaginator;
  @ViewChild('accessPointsSort', { static: true }) accessPointsSort: MatSort;
  @ViewChild(MatTableExporterDirective) matTableExporter: MatTableExporterDirective;

  totalElements: number = 0;

  @Input() protected pageVariables: any;
  protected route: ActivatedRoute;
  protected router: Router;
  protected useCaseScope: UseCaseScope;
  protected store: Store<AccessPointState>;
  protected accessPointController: AccessPointControllerImpl;
  protected searchAccessPointsComponent: SearchAccessPointsComponentImpl;
  protected _injector: Injector;

  constructor(injector: Injector) {
    this.route = injector.get(ActivatedRoute);
    this.router = injector.get(Router);
    this.useCaseScope = injector.get(UseCaseScope);
    this.store = injector.get(Store);
    this.accessPointController = injector.get(AccessPointControllerImpl);
    this.searchAccessPointsComponent = injector.get(SearchAccessPointsComponentImpl);
    this._injector = injector;
    this.accessPoints$ = this.store.pipe(select(AccessPointSelectors.selectAccessPoints));
  }

  ngOnInit(): void {}

  ngOnDestroy() {}

  ngAfterViewInit() {
    this.accessPoints$.subscribe((accessPoints) => {
      this.accessPointsDataSource.data = accessPoints;
      this.totalElements = accessPoints.length;
      this.accessPointsDataSource.paginator = this.accessPointsPaginator;
      this.accessPointsDataSource.sort = this.accessPointsSort;
    });
  }

  doSearchAccessPointsEdit(form: any): any {}

  searchAccessPointsEdit(id: number) {
    let form = {
      id: id,
    };
    let queryParams: any = {
      id: id,
    };
    this.accessPointController.setQueryParams(Object.assign({}, queryParams));
    let params = this.doSearchAccessPointsEdit(form);
    this.useCaseScope.pageVariables = Object.assign({}, params);
    this.accessPointController.searchAccessPointsEdit(params);
  }

  getAccessPointsExportData(): any {
    return this.accessPointsDataSource?.data?.map((row) => {
      return {
        id: row?.id,
        accessPointTypename: row?.accessPointType?.name,
        name: row?.name,
        url: row?.url,
      };
    });
  }
}
