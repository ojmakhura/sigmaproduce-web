// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
  Component,
  OnInit,
  Injector,
  ViewChild,
  Input,
  Output,
  EventEmitter,
  AfterViewInit,
  OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatTableDataSource } from '@angular/material/table';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { AccessPointState } from '@app/store/access/access-point.state';
import * as AccessPointSelectors from '@app/store/access/access-point.selectors';
import * as AccessPointActions from '@app/store/access/access-point.actions';

import { AccessPointRestController } from '@app/service//access/access-point-rest-controller';
import { AccessPointControllerImpl } from '@app/controller/access/access-point-controller.impl';
import { SearchAccessPointsAccessPointsComponentImpl } from '@app/view/access/search-access-points-access-points.component.impl';
import { AccessPointCriteria } from '@app/model//access/access-point-criteria';
import { AccessPointVO } from '@app/model//access/access-point-vo';
import { AccessPointTypeVO } from '@app/model//access/type/access-point-type-vo';

export class SearchAccessPointsSearchForm {
  accessPoints: Array<AccessPointVO>[] | any[];
  criteria: AccessPointCriteria | any;
  id: number | any;
}

export class SearchAccessPointsCreateForm {
  accessPoint: AccessPointVO | any;
  id: number | any;
}
export class SearchAccessPointsVarsForm {
  criteria: AccessPointCriteria | any;
}

@Component({
  selector: 'app-search-access-points-base',
  template: '',
})
export abstract class SearchAccessPointsComponent implements OnInit, AfterViewInit, OnDestroy {
  searchAccessPointsForm: FormGroup | any;
  hide: boolean = false;
  protected route: ActivatedRoute;
  protected router: Router;
  protected formBuilder: FormBuilder;
  protected _injector: Injector;
  protected useCaseScope: UseCaseScope;
  protected store: Store<AccessPointState>;
  dialog: MatDialog;
  accessPointController: AccessPointControllerImpl;
  accessPointRestController: AccessPointRestController;
  @ViewChild('accessPointsAccessPointTypeModalPaginator', { static: true })
  accessPointsAccessPointTypeModalPaginator: MatPaginator;
  @ViewChild('accessPointsAccessPointTypeModalSort', { static: true }) accessPointsAccessPointTypeModalSort: MatSort;

  accessPointsAccessPointTypes$: Observable<Array<AccessPointTypeVO>>;
  accessPointsAccessPointTypesDataSource = new MatTableDataSource<AccessPointTypeVO>([]);
  accessPointsAccessPointTypeSelect: AccessPointTypeVO = new AccessPointTypeVO();
  accessPointsAccessPointTypeSearchField: FormControl = new FormControl();

  accessPointsAccessPointTypeModalColumns = ['actions', 'id', 'name'];

  criteria$: Observable<AccessPointCriteria>;
  messages: Observable<any>;
  success: Observable<boolean>;
  loading: Observable<boolean>;
  loaderMessage: Observable<string>;
  error: Observable<boolean>;
  selected: any = null;

  @ViewChild('searchAccessPointsAccessPointsComponent')
  searchAccessPointsAccessPointsComponent: SearchAccessPointsAccessPointsComponentImpl;

  constructor(injector: Injector) {
    this.route = injector.get(ActivatedRoute);
    this.router = injector.get(Router);
    this.formBuilder = injector.get(FormBuilder);
    this.useCaseScope = injector.get(UseCaseScope);
    this.store = injector.get(Store);
    this.dialog = injector.get(MatDialog);
    this.accessPointController = injector.get(AccessPointControllerImpl);
    this.accessPointRestController = injector.get(AccessPointRestController);
    this._injector = injector;
    this.criteria$ = this.store.pipe(select(AccessPointSelectors.selectCriteria));
    this.loading = this.store.pipe(select(AccessPointSelectors.selectLoading));
    this.loaderMessage = this.store.pipe(select(AccessPointSelectors.selectLoaderMessage));
    this.success = this.store.pipe(select(AccessPointSelectors.selectSuccess));
    this.error = this.store.pipe(select(AccessPointSelectors.selectError));
    this.messages = this.store.pipe(select(AccessPointSelectors.selectMessages));
  }

  beforeOnInit(form: SearchAccessPointsVarsForm): SearchAccessPointsVarsForm {
    return form;
  }

  ngOnInit() {
    let form: SearchAccessPointsVarsForm = this.beforeOnInit(new SearchAccessPointsVarsForm());
    this.searchAccessPointsForm = this.newForm(form);

    this.searchAccessPointsForm.valueChanges.subscribe((change: any) => {
      this.handleFormChanges(change);
    });

    this.accessPointsAccessPointTypes$?.subscribe((data) => {
      this.accessPointsAccessPointTypesDataSource.data = data;
      this.accessPointsAccessPointTypesDataSource.paginator = this.accessPointsAccessPointTypeModalPaginator;
      this.accessPointsAccessPointTypesDataSource.sort = this.accessPointsAccessPointTypeModalSort;
    });

    this.afterOnInit();
  }

  handleFormChanges(change: any): void {}

  searchAccessPointsFormReset() {
    this.store.dispatch(AccessPointActions.accessPointReset());

    this.searchAccessPointsForm.reset();
    this.searchAccessPointsForm.markAsPristine();

    if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
      this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
    } else {
      this.router.navigate([this.router.url]);
    }
  }

  afterOnInit(): void {}

  doNgAfterViewInit(): void {}

  ngAfterViewInit() {
    this.doNgAfterViewInit();
    this.accessPointController.resetUseCaseScope();
  }

  newForm(searchAccessPointsVarsForm$: SearchAccessPointsVarsForm): FormGroup {
    return this.formBuilder.group({
      criteria: this.createCriteriaForm(searchAccessPointsVarsForm$?.criteria),
      accessPoints: this.formBuilder.array([
        this.formBuilder.group({
          id: [''],
          name: [''],
          url: [''],
        }),
      ]),
    });
  }

  abstract doNgOnDestroy(): void;

  ngOnDestroy() {
    this.doNgOnDestroy();
    this.store.dispatch(AccessPointActions.accessPointReset());
  }

  get searchAccessPointsSearchForm(): SearchAccessPointsSearchForm {
    let form: SearchAccessPointsSearchForm = new SearchAccessPointsSearchForm();
    form.criteria = this.criteria;

    return form;
  }

  /**
   * This method may be overwritten
   */
  beforeSearchAccessPointsSearch(form: SearchAccessPointsSearchForm): void {}

  /**
   * This method may be overwritten
   */
  afterSearchAccessPointsSearch(form: SearchAccessPointsSearchForm): void {}

  searchAccessPointsSearch(): void {
    let form: SearchAccessPointsSearchForm = this.searchAccessPointsSearchForm;
    this.beforeSearchAccessPointsSearch(form);

    this.accessPointController.searchAccessPointsSearch(form);
    this.afterSearchAccessPointsSearch(form);
  }

  getSearchAccessPointsSearchForm(value: any): SearchAccessPointsSearchForm {
    let form: SearchAccessPointsSearchForm = new SearchAccessPointsSearchForm();

    if (value?.criteria) {
      form.criteria = value?.criteria;
    }

    return form;
  }

  get searchAccessPointsCreateForm(): SearchAccessPointsCreateForm {
    let form: SearchAccessPointsCreateForm = new SearchAccessPointsCreateForm();

    return form;
  }

  /**
   * This method may be overwritten
   */
  beforeSearchAccessPointsCreate(form: SearchAccessPointsCreateForm): void {}

  /**
   * This method may be overwritten
   */
  afterSearchAccessPointsCreate(form: SearchAccessPointsCreateForm): void {}

  searchAccessPointsCreate(): void {
    let form: SearchAccessPointsCreateForm = this.searchAccessPointsCreateForm;
    this.beforeSearchAccessPointsCreate(form);

    this.accessPointController.searchAccessPointsCreate(form);
    this.afterSearchAccessPointsCreate(form);
  }

  getSearchAccessPointsCreateForm(value: any): SearchAccessPointsCreateForm {
    let form: SearchAccessPointsCreateForm = new SearchAccessPointsCreateForm();

    if (value?.id) {
      form.id = value?.id;
    }

    return form;
  }

  get searchAccessPointsVarsFormControl(): FormGroup {
    return this.getGroupControl('searchAccessPointsVarsForm');
  }

  /**
   * This method may be overwritten
   */
  afterSetSearchAccessPointsVarsForm(form: SearchAccessPointsVarsForm): void {}

  setSearchAccessPointsVarsForm(form: SearchAccessPointsVarsForm) {
    this.searchAccessPointsVarsFormControl.setControl('criteria', this.createCriteriaForm(form.criteria));

    this.afterSetSearchAccessPointsVarsForm(form);
  }

  createCriteriaForm(criteria: AccessPointCriteria): FormGroup {
    return this.formBuilder.group({
      type: [{ value: criteria?.type, disabled: false }],
      name: [{ value: criteria?.name, disabled: false }],
      url: [{ value: criteria?.url, disabled: false }],
      typeId: [{ value: criteria?.typeId, disabled: false }],
    });
  }

  get criteriaControl(): FormGroup {
    return this.getGroupControl('criteria') as FormGroup;
  }

  get criteria(): AccessPointCriteria {
    return this.criteriaControl.value;
  }

  get criteriaTypeControl(): FormControl {
    return this.criteriaControl.get('type') as FormControl;
  }

  get criteriaType(): string {
    return this.criteriaTypeControl.value;
  }

  get criteriaNameControl(): FormControl {
    return this.criteriaControl.get('name') as FormControl;
  }

  get criteriaName(): string {
    return this.criteriaNameControl.value;
  }

  get criteriaUrlControl(): FormControl {
    return this.criteriaControl.get('url') as FormControl;
  }

  get criteriaUrl(): string {
    return this.criteriaUrlControl.value;
  }

  get criteriaTypeIdControl(): FormControl {
    return this.criteriaControl.get('typeId') as FormControl;
  }

  get criteriaTypeId(): number {
    return this.criteriaTypeIdControl.value;
  }

  getItemControl(name: string): FormControl {
    return this.searchAccessPointsForm.get(name) as FormControl;
  }

  getGroupControl(name: string): FormGroup {
    return this.searchAccessPointsForm.get(name) as FormGroup;
  }

  getArrayControl(name: string): FormArray {
    return this.searchAccessPointsForm.get(name) as FormArray;
  }

  setSearchAccessPointsFormValue(form: any) {
    if (form.criteria) {
      this.searchAccessPointsForm.setControl('criteria', this.createCriteriaForm(form.criteria));
    }
  }

  setAccessPoints(accessPoints: Array<AccessPointVO>): FormArray {
    const accessPointsArray = new FormArray([]);

    if (!accessPoints || accessPoints === undefined || accessPoints === null) {
      return accessPointsArray;
    }

    accessPoints.forEach((item) => {
      accessPointsArray.push(this.createAccessPointsGroup(item));
    });

    this.searchAccessPointsForm.setControl('accessPoints', accessPointsArray);

    return accessPointsArray;
  }

  get accessPointsControl(): FormArray {
    return this.getArrayControl('accessPoints');
  }

  get accessPoints(): Array<AccessPointVO>[] {
    return this.accessPointsControl.value;
  }

  deleteFromAccessPoints(index: number) {
    this.accessPointsControl.removeAt(index);
  }

  addToAccessPoints(data: any) {
    this.accessPointsControl.push(this.createAccessPointsGroup(data));
  }

  createAccessPointsGroup(data: any): FormGroup {
    return this.formBuilder.group({
      id: [data?.id],
      name: [data?.name],
      url: [data?.url],
    });
  }

  addAccessPointsDummyData() {
    this.accessPointsControl.push(
      this.formBuilder.group({
        id: [1],
        name: ['name-1'],
        url: ['url-1'],
      })
    );

    this.accessPointsControl.push(
      this.formBuilder.group({
        id: [2],
        name: ['name-2'],
        url: ['url-2'],
      })
    );
  }

  createAccessPointVOGroup(value: AccessPointVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      name: [value?.name],
      url: [value?.url],
      icon: [value?.icon],
    });
  }

  createAccessPointVOArray(values: AccessPointVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAccessPointVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }

  createAccessPointCriteriaGroup(value: AccessPointCriteria): FormGroup {
    return this.formBuilder.group({
      type: [value?.type],
      name: [value?.name],
      url: [value?.url],
      typeId: [value?.typeId],
    });
  }

  createAccessPointCriteriaArray(values: AccessPointCriteria[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAccessPointCriteriaGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }

  createAccessPointTypeVOGroup(value: AccessPointTypeVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      code: [value?.code],
      name: [value?.name],
      description: [value?.description],
    });
  }

  createAccessPointTypeVOArray(values: AccessPointTypeVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAccessPointTypeVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }
}
