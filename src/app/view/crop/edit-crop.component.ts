// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import { 
    Component, 
    OnInit, 
    inject, 
    ViewChild, 
    Input, 
    Output, 
    EventEmitter, 
    AfterViewInit,
    signal,
    OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule, 
    Validators 
} from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { CropState } from '@app/store/crop/crop.state';
import * as CropSelectors from '@app/store/crop/crop.selectors';
import * as CropActions from '@app/store/crop/crop.actions';

import { CropListVO } from '@app/model/bw/co/sigmaproduce/crop/crop-list-vo';
import { CropDetailsComponent } from '@app/components/crop/crop-details.component';
import { CropControllerImpl } from '@app/controller/crop/crop-controller.impl';
import { CropEditorComponent } from '@app/components/crop/crop-editor.component';
import { CropVO } from '@app/model/bw/co/sigmaproduce/crop/crop-vo';
import { CropVarietyVO } from '@app/model/bw/co/sigmaproduce/crop/variety/crop-variety-vo';
import { CropTypeListVO } from '@app/model/bw/co/sigmaproduce/crop/type/crop-type-list-vo';
import { TimePeriod } from '@app/model/bw/co/sigmaproduce/time-period';

export class EditCropVarsForm {
    crop: CropEditorComponent | any;
}

@Component({
  selector: 'app-edit-crop-base',
  template: ''
})
export abstract class EditCropComponent implements OnInit, AfterViewInit, OnDestroy {

	editCropForm: FormGroup = new FormGroup({});
    hide: boolean = false;
    protected route: ActivatedRoute = inject(ActivatedRoute);
    protected router: Router = inject(Router);
    protected formBuilder: FormBuilder = inject(FormBuilder);
    protected useCaseScope: UseCaseScope = inject(UseCaseScope);
    protected store: Store<CropState> = inject(Store);
    dialog: MatDialog = inject(MatDialog);
    cropController: CropControllerImpl = inject(CropControllerImpl);
    @ViewChild('crop') cropComponent?: CropEditorComponent;
    cropEditorForm: FormGroup = new FormGroup({});
    cropTypes$: Observable<CropTypeListVO[]>;
    cropTypesSubscription?: Subscription;
    cropTypesDataSource = new MatTableDataSource<CropTypeListVO>([]);
    cropTypeSelect: CropTypeListVO = new CropTypeListVO();
    cropTypeSearchField: FormControl = new FormControl();

    cropTypeModalColumns = [
        'actions',
        'code',
        'name',
    ];

    cropTypeBackingList: SelectItem[] = [];
    maturityPeriodT = TimePeriod;
    maturityPeriodOptions: string[] = Object.keys(this.maturityPeriodT);
    messages: Observable<any>;
    messagesSubscription?: Subscription;
    success: Observable<boolean>;
    successSubscription?: Subscription;
    loading: Observable<boolean>;
    loadingSubscription?: Subscription;
    error: Observable<boolean>;
    errorSubscription?: Subscription;
    selected: any = null;
    deleteUnrestricted = signal(false);

    editCropFormValueSubscription?: Subscription;

    constructor() {
        this.loading = this.store.pipe(select(CropSelectors.selectLoading));
        this.success = this.store.pipe(select(CropSelectors.selectSuccess));
        this.error = this.store.pipe(select(CropSelectors.selectError));
        this.messages = this.store.pipe(select(CropSelectors.selectMessages));
    }

    abstract beforeOnInit(form: EditCropVarsForm): EditCropVarsForm;
	
    ngOnInit() {
        let form: EditCropVarsForm = this.beforeOnInit(new EditCropVarsForm);
        this.editCropForm = this.newForm(form);

        this.editCropFormValueSubscription = this.editCropForm.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
        this.cropEditorForm = this.cropControl;
    }

    handleFormChanges(change: any): void {
        
    }

    editCropFormReset() {

        this.store.dispatch(CropActions.cropReset());
        this.editCropForm.reset()
        this.editCropForm.markAsPristine();

        if(this.router.url.substring(0, this.router.url.indexOf('?'))) {
            this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
        } else {
            this.router.navigate([this.router.url]);
        }
    }

    afterOnInit(): void {}
    
    doNgAfterViewInit(): void {}

    ngAfterViewInit() {
        this.doNgAfterViewInit();
        this.cropController.resetUseCaseScope();
    }

    newForm(editCropVarsForm$: EditCropVarsForm): FormGroup {
        return this.formBuilder.group({
            crop: this.createCropForm(editCropVarsForm$?.crop),
        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() { 
        this.doNgOnDestroy();

        if(this.editCropFormValueSubscription) {
            this.editCropFormValueSubscription.unsubscribe();
        }
        
        this.store.dispatch(CropActions.cropReset());
        if(this.cropTypesSubscription) {
            this.cropTypesSubscription.unsubscribe();
        }

        if(this.messagesSubscription) {
            this.messagesSubscription.unsubscribe();
        }

        if(this.successSubscription) {
            this.successSubscription.unsubscribe();
        }

        if(this.loadingSubscription) {
            this.loadingSubscription.unsubscribe();
        }

        if(this.errorSubscription) {
            this.errorSubscription.unsubscribe();
        }
    }


    /**
     * This method may be overwritten
     */
    beforeEditCropSave(form: any): void {}

    /**
     * This method may be overwritten
     */
    afterEditCropSave(form: any): void {}

    /**
     * This method may be overwritten
     */
    get editCropSaveCrop(): CropVO {
        return {} as CropVO;
    }

    editCropSave(): void {

        let form: any = {
            crop: this.editCropSaveCrop,
        };

        this.beforeEditCropSave(form);

        this.cropController.editCropSave(form);
        this.afterEditCropSave(form);
    }


    /**
     * This method may be overwritten
     */
    beforeEditCropSearch(form: any): void {}

    /**
     * This method may be overwritten
     */
    afterEditCropSearch(form: any): void {}

    editCropSearch(): void {

        let form: any = {
        };

        this.beforeEditCropSearch(form);

        this.cropController.editCropSearch();
        this.afterEditCropSearch(form);
    }


    /**
     * This method may be overwritten
     */
    beforeEditCropDelete(form: any): void {}

    /**
     * This method may be overwritten
     */
    afterEditCropDelete(form: any): void {}

    /**
     * This method may be overwritten
     */
    get editCropDeleteCrop(): CropVO {
        return {} as CropVO;
    }

    editCropDelete(): void {

        let form: any = {
            crop: this.editCropDeleteCrop,
        };

        this.beforeEditCropDelete(form);

        this.cropController.editCropDelete(form);
        this.afterEditCropDelete(form);
    }


    /**
     * This method may be overwritten
     */
    beforeEditCropViewDetails(form: any): void {}

    /**
     * This method may be overwritten
     */
    afterEditCropViewDetails(form: any): void {}

    /**
     * This method may be overwritten
     */
    get editCropViewDetailsId(): string {
        return {} as string;
    }

    editCropViewDetails(): void {

        let form: any = {
            id: this.editCropViewDetailsId,
        };

        this.beforeEditCropViewDetails(form);

        this.cropController.editCropViewDetails(form);
        this.afterEditCropViewDetails(form);
    }

    get editCropVarsFormControl(): FormGroup {
        return this.getGroupControl('editCropVarsForm');
    }

    createCropForm(crop?: CropEditorComponent): FormGroup {
        return this.formBuilder.group({
            id: [{value: crop?.id, disabled: false}],
            createdBy: [{value: crop?.createdBy, disabled: false}],
            updatedBy: [{value: crop?.updatedBy, disabled: false}],
            createdDate: [{value: crop?.createdDate, disabled: false}],
            updatedDate: [{value: crop?.updatedDate, disabled: false}],
            type: this.createCropTypeListVOGroup(crop?.type),
            code: [{value: crop?.code, disabled: false}, [Validators.required, ]],
            name: [{value: crop?.name, disabled: false}, [Validators.required, ]],
            description: [{value: crop?.description, disabled: false}],
            images: this.formBuilder.array(crop?.images ? crop.images : []),
            maturesIn: [{value: crop?.maturesIn, disabled: false}],
            maturityPeriod: [{value: crop?.maturityPeriod, disabled: false}],
        });
    }

    get cropControl(): FormGroup {
        return this.getGroupControl('crop') as FormGroup;
    }

    get crop(): CropEditorComponent {
        return this.cropControl.value;
    }

    get cropIdControl(): FormControl {
        return this.cropControl.get('id') as FormControl;
    }

    get cropId(): string {
        return this.cropIdControl.value;
    }

    get cropCreatedByControl(): FormControl {
        return this.cropControl.get('createdBy') as FormControl;
    }

    get cropCreatedBy(): string {
        return this.cropCreatedByControl.value;
    }

    get cropUpdatedByControl(): FormControl {
        return this.cropControl.get('updatedBy') as FormControl;
    }

    get cropUpdatedBy(): string {
        return this.cropUpdatedByControl.value;
    }

    get cropCreatedDateControl(): FormControl {
        return this.cropControl.get('createdDate') as FormControl;
    }

    get cropCreatedDate(): Date {
        return this.cropCreatedDateControl.value;
    }

    get cropUpdatedDateControl(): FormControl {
        return this.cropControl.get('updatedDate') as FormControl;
    }

    get cropUpdatedDate(): Date {
        return this.cropUpdatedDateControl.value;
    }

    get cropTypeControl(): FormGroup {
        return this.cropControl.get('type') as FormGroup;
    }

    get cropType(): CropTypeListVO[] {
        return this.cropTypeControl.value;
    }

    get cropCodeControl(): FormControl {
        return this.cropControl.get('code') as FormControl;
    }

    get cropCode(): string {
        return this.cropCodeControl.value;
    }

    get cropNameControl(): FormControl {
        return this.cropControl.get('name') as FormControl;
    }

    get cropName(): string {
        return this.cropNameControl.value;
    }

    get cropDescriptionControl(): FormControl {
        return this.cropControl.get('description') as FormControl;
    }

    get cropDescription(): string {
        return this.cropDescriptionControl.value;
    }

    get cropImagesControl(): FormArray {
        return this.cropControl.get('images') as FormArray;
    }

    get cropImages(): File[] {
        return this.cropImagesControl.value;
    }

    get cropMaturesInControl(): FormControl {
        return this.cropControl.get('maturesIn') as FormControl;
    }

    get cropMaturesIn(): number {
        return this.cropMaturesInControl.value;
    }

    get cropMaturityPeriodControl(): FormGroup {
        return this.cropControl.get('maturityPeriod') as FormGroup;
    }

    get cropMaturityPeriod(): TimePeriod {
        return this.cropMaturityPeriodControl.value;
    }

    getItemControl(name: string): FormControl {
        return this.editCropForm.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.editCropForm.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.editCropForm.get(name) as FormArray;
    }

    setEditCropFormValue(form: any) {
        if(form.crop) {
            this.editCropForm.setControl('crop', this.createCropForm(form.crop));
        }
    }

    createCropListVOGroup(value?: CropListVO): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            code: [value?.code],
            name: [value?.name],
            type: [value?.type],
            typeId: [value?.typeId],
        });
    }

    createCropListVOArray(values?: CropListVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropListVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createCropDetailsComponentGroup(value?: CropDetailsComponent): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            code: [value?.code],
            name: [value?.name],
            description: [value?.description],
            numberOfDiseases: [value?.numberOfDiseases],
            numberOfPests: [value?.numberOfPests],
            numberOfVarieties: [value?.numberOfVarieties],
            maturesIn: [value?.maturesIn],
        });
    }

    createCropDetailsComponentArray(values?: CropDetailsComponent[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropDetailsComponentGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createCropEditorComponentGroup(value?: CropEditorComponent): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            code: [value?.code],
            name: [value?.name],
            description: [value?.description],
            maturesIn: [value?.maturesIn],
            maturityPeriod: [value?.maturityPeriod],
        });
    }

    createCropEditorComponentArray(values?: CropEditorComponent[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropEditorComponentGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createCropVOGroup(value?: CropVO): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            code: [value?.code],
            name: [value?.name],
            description: [value?.description],
            maturesIn: [value?.maturesIn],
            numberOfDiseases: [value?.numberOfDiseases],
            numberOfPests: [value?.numberOfPests],
            maturityPeriod: [value?.maturityPeriod],
        });
    }

    createCropVOArray(values?: CropVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createCropVarietyVOGroup(value?: CropVarietyVO): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            code: [value?.code],
            name: [value?.name],
            description: [value?.description],
        });
    }

    createCropVarietyVOArray(values?: CropVarietyVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropVarietyVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createCropTypeListVOGroup(value?: CropTypeListVO): FormGroup { 
        return this.formBuilder.group({
            code: [value?.code],
            id: [value?.id],
            name: [value?.name],
        });
    }

    createCropTypeListVOArray(values?: CropTypeListVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropTypeListVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

}
