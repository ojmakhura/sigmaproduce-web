// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component } from '@angular/core';
import { EditCropComponent } from '@app/view/crop/edit-crop.component';
import { EditCropVarsForm } from '@app/view/crop/edit-crop.component';
import { CropState } from '@app/store/crop/crop.state';
import * as CropSelectors from '@app/store/crop/crop.selectors';
import * as CropActions from '@app/store/crop/crop.actions';
import * as CropTypeSelectors from '@app/store/crop/type/crop-type.selectors';
import * as CropTypeActions from '@app/store/crop/type/crop-type.actions';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { SharedModule } from '@app/@shared';
import { MaterialModule } from '@app/material.module';
import { CsvModule } from '@ctrl/ngx-csv';
import { EditVarietyImplComponent } from '@app/view/crop/edit-variety-impl.component';
import { CropEditorComponent } from '@app/components/crop/crop-editor.component';
import { CropVarietyEditorComponent } from '@app/components/crop/varieties/crop-variety-editor.component';
import { CropVO } from '@app/model/crop/crop-vo';
import { CropViewComponent, CropViewVarsForm } from './crop-view.component';
import { Observable, Subscription } from 'rxjs';
import { CropDetailsComponent } from '@app/components/crop/crop-details.component';

@Component({
  selector: 'app-crop-view',
  templateUrl: './crop-view.component.html',
  styleUrls: ['./crop-view.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    SharedModule,
    MaterialModule,
    CsvModule,
    CropDetailsComponent,
  ],
})
export class CropViewImplComponent extends CropViewComponent {
  crop$: Observable<CropVO> = this.store.select(CropSelectors.selectCrop);
  cropSubscription: Subscription;

  constructor() {
    super();
  }

  override beforeOnInit(form: CropViewVarsForm): CropViewVarsForm {
    return form;
  }

  doNgOnDestroy(): void {
    if (this.cropSubscription) {
      this.cropSubscription.unsubscribe();
    }
  }

  override doNgAfterViewInit(): void {
    this.route.queryParams.subscribe((params: any) => {
      if (params['id']) {
        this.store.dispatch(
          CropActions.findById({
            id: params['id'],
            loading: true,
            loaderMessage: 'Loading crop...',
          })
        );
      }
    });

    this.cropSubscription = this.crop$.subscribe((crop) => {
      if (crop) {
        this.cropDetailsIdControl.setValue(crop.id);
        this.cropDetailsNameControl.setValue(crop.name);
        this.cropDetailsDescriptionControl.setValue(crop.description);
        this.cropDetailsTypeControl.setValue(crop.type);
      }
    });
  }
}
