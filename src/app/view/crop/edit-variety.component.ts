// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
  Component,
  OnInit,
  inject,
  ViewChild,
  Input,
  Output,
  EventEmitter,
  AfterViewInit,
  signal,
  Inject,
  OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { MatDialogRef } from '@angular/material/dialog';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { CropState } from '@app/store/crop/crop.state';
import * as CropSelectors from '@app/store/crop/crop.selectors';
import * as CropActions from '@app/store/crop/crop.actions';

import { CropListVO } from '@app/model/crop/crop-list-vo';
import { CropControllerImpl } from '@app/controller/crop/crop-controller.impl';
import { CropVarietyEditorComponent } from '@app/components/crop/varieties/crop-variety-editor.component';
import { EditVarietyImplComponent } from '@app/view/crop/edit-variety-impl.component';

export class EditVarietyVarsForm {
  cropVariety: CropVarietyEditorComponent | any;
}

@Component({
  selector: 'app-edit-variety-base',
  template: '',
})
export abstract class EditVarietyComponent implements OnInit, AfterViewInit, OnDestroy {
  public dialogRef: MatDialogRef<EditVarietyImplComponent> = inject(MatDialogRef);
  dialogData: any;
  editVarietyForm: FormGroup = new FormGroup({});
  hide: boolean = false;
  protected route: ActivatedRoute = inject(ActivatedRoute);
  protected router: Router = inject(Router);
  protected formBuilder: FormBuilder = inject(FormBuilder);
  protected useCaseScope: UseCaseScope = inject(UseCaseScope);
  protected store: Store<CropState> = inject(Store);
  dialog: MatDialog = inject(MatDialog);
  cropController: CropControllerImpl = inject(CropControllerImpl);
  @ViewChild('cropVariety') cropVarietyComponent?: CropVarietyEditorComponent;
  cropVarietyEditorForm: FormGroup = new FormGroup({});
  cropVarietyCrops$: Observable<CropListVO[]>;
  cropVarietyCropsSubscription?: Subscription;
  cropVarietyCropsDataSource = new MatTableDataSource<CropListVO>([]);
  cropVarietyCropSelect: CropListVO = new CropListVO();
  cropVarietyCropSearchField: FormControl = new FormControl();

  cropVarietyCropModalColumns = ['actions', 'code', 'name', 'type'];

  cropVarietyCropBackingList: SelectItem[] = [];
  messages: Observable<any>;
  messagesSubscription?: Subscription;
  success: Observable<boolean>;
  successSubscription?: Subscription;
  loading: Observable<boolean>;
  loadingSubscription?: Subscription;
  error: Observable<boolean>;
  errorSubscription?: Subscription;
  selected: any = null;

  editVarietyFormValueSubscription?: Subscription;

  constructor(@Inject(MAT_DIALOG_DATA) data: any) {
    this.loading = this.store.pipe(select(CropSelectors.selectLoading));
    this.success = this.store.pipe(select(CropSelectors.selectSuccess));
    this.error = this.store.pipe(select(CropSelectors.selectError));
    this.messages = this.store.pipe(select(CropSelectors.selectMessages));
  }

  abstract beforeOnInit(form: EditVarietyVarsForm): EditVarietyVarsForm;

  ngOnInit() {
    let form: EditVarietyVarsForm = this.beforeOnInit(new EditVarietyVarsForm());
    this.editVarietyForm = this.newForm(form);

    this.editVarietyFormValueSubscription = this.editVarietyForm.valueChanges.subscribe((change: any) => {
      this.handleFormChanges(change);
    });

    this.afterOnInit();
    this.cropVarietyEditorForm = this.cropVarietyControl;
  }

  handleFormChanges(change: any): void {}

  editVarietyFormReset() {
    this.store.dispatch(CropActions.cropReset());
    this.editVarietyForm.reset();
    this.editVarietyForm.markAsPristine();

    if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
      this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
    } else {
      this.router.navigate([this.router.url]);
    }
  }

  afterOnInit(): void {}

  doNgAfterViewInit(): void {}

  ngAfterViewInit() {
    this.doNgAfterViewInit();
    this.cropController.resetUseCaseScope();
  }

  newForm(editVarietyVarsForm$: EditVarietyVarsForm): FormGroup {
    return this.formBuilder.group({
      cropVariety: this.createCropVarietyForm(editVarietyVarsForm$?.cropVariety),
    });
  }

  abstract doNgOnDestroy(): void;

  ngOnDestroy() {
    this.doNgOnDestroy();

    if (this.editVarietyFormValueSubscription) {
      this.editVarietyFormValueSubscription.unsubscribe();
    }

    if (this.cropVarietyCropsSubscription) {
      this.cropVarietyCropsSubscription.unsubscribe();
    }

    if (this.messagesSubscription) {
      this.messagesSubscription.unsubscribe();
    }

    if (this.successSubscription) {
      this.successSubscription.unsubscribe();
    }

    if (this.loadingSubscription) {
      this.loadingSubscription.unsubscribe();
    }

    if (this.errorSubscription) {
      this.errorSubscription.unsubscribe();
    }
  }

  get editVarietyVarsFormControl(): FormGroup {
    return this.getGroupControl('editVarietyVarsForm');
  }

  createCropVarietyForm(cropVariety?: CropVarietyEditorComponent): FormGroup {
    return this.formBuilder.group({
      id: [{ value: cropVariety?.id, disabled: false }],
      createdBy: [{ value: cropVariety?.createdBy, disabled: false }],
      updatedBy: [{ value: cropVariety?.updatedBy, disabled: false }],
      createdDate: [{ value: cropVariety?.createdDate, disabled: false }],
      updatedDate: [{ value: cropVariety?.updatedDate, disabled: false }],
      crop: this.createCropListVOGroup(cropVariety?.crop),
      code: [{ value: cropVariety?.code, disabled: false }, [Validators.required]],
      name: [{ value: cropVariety?.name, disabled: false }, [Validators.required]],
      description: [{ value: cropVariety?.description, disabled: false }],
      images: this.formBuilder.array(cropVariety?.images ? cropVariety.images : []),
    });
  }

  get cropVarietyControl(): FormGroup {
    return this.getGroupControl('cropVariety') as FormGroup;
  }

  get cropVariety(): CropVarietyEditorComponent {
    return this.cropVarietyControl.value;
  }

  get cropVarietyIdControl(): FormControl {
    return this.cropVarietyControl.get('id') as FormControl;
  }

  get cropVarietyId(): string {
    return this.cropVarietyIdControl.value;
  }

  get cropVarietyCreatedByControl(): FormControl {
    return this.cropVarietyControl.get('createdBy') as FormControl;
  }

  get cropVarietyCreatedBy(): string {
    return this.cropVarietyCreatedByControl.value;
  }

  get cropVarietyUpdatedByControl(): FormControl {
    return this.cropVarietyControl.get('updatedBy') as FormControl;
  }

  get cropVarietyUpdatedBy(): string {
    return this.cropVarietyUpdatedByControl.value;
  }

  get cropVarietyCreatedDateControl(): FormControl {
    return this.cropVarietyControl.get('createdDate') as FormControl;
  }

  get cropVarietyCreatedDate(): Date {
    return this.cropVarietyCreatedDateControl.value;
  }

  get cropVarietyUpdatedDateControl(): FormControl {
    return this.cropVarietyControl.get('updatedDate') as FormControl;
  }

  get cropVarietyUpdatedDate(): Date {
    return this.cropVarietyUpdatedDateControl.value;
  }

  get cropVarietyCropControl(): FormGroup {
    return this.cropVarietyControl.get('crop') as FormGroup;
  }

  get cropVarietyCrop(): CropListVO[] {
    return this.cropVarietyCropControl.value;
  }

  cropVarietyCropAddDialog(): void {}

  cropVarietyCropSearch(): void {}

  handleCropVarietyCropSelected(event: MatRadioChange, data: CropListVO): void {}

  cropVarietyCropSelected(event: MatRadioChange, data: CropListVO): void {
    this.cropVarietyCropSelect = data;
    this.handleCropVarietyCropSelected(event, data);
  }

  /**
   * May be overridden to customise behaviour
   *
   */
  addSelectedCropVarietyCrop(): void {
    this.cropVarietyControl.patchValue({ crop: this.cropVarietyCropSelect });
  }

  cropVarietyCropClear(): void {
    this.cropVarietyControl.patchValue({ crop: new CropListVO() });
  }

  get cropVarietyCodeControl(): FormControl {
    return this.cropVarietyControl.get('code') as FormControl;
  }

  get cropVarietyCode(): string {
    return this.cropVarietyCodeControl.value;
  }

  get cropVarietyNameControl(): FormControl {
    return this.cropVarietyControl.get('name') as FormControl;
  }

  get cropVarietyName(): string {
    return this.cropVarietyNameControl.value;
  }

  get cropVarietyDescriptionControl(): FormControl {
    return this.cropVarietyControl.get('description') as FormControl;
  }

  get cropVarietyDescription(): string {
    return this.cropVarietyDescriptionControl.value;
  }

  get cropVarietyImagesControl(): FormArray {
    return this.cropVarietyControl.get('images') as FormArray;
  }

  get cropVarietyImages(): File[] {
    return this.cropVarietyImagesControl.value;
  }

  getItemControl(name: string): FormControl {
    return this.editVarietyForm.get(name) as FormControl;
  }

  getGroupControl(name: string): FormGroup {
    return this.editVarietyForm.get(name) as FormGroup;
  }

  getArrayControl(name: string): FormArray {
    return this.editVarietyForm.get(name) as FormArray;
  }

  setEditVarietyFormValue(form: any) {
    if (form.cropVariety) {
      this.editVarietyForm.setControl('cropVariety', this.createCropVarietyForm(form.cropVariety));
    }
  }

  createCropListVOGroup(value?: CropListVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      code: [value?.code],
      name: [value?.name],
      type: [value?.type],
      typeId: [value?.typeId],
    });
  }

  createCropListVOArray(values?: CropListVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createCropListVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  createCropVarietyEditorComponentGroup(value?: CropVarietyEditorComponent): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      code: [value?.code],
      name: [value?.name],
      description: [value?.description],
    });
  }

  createCropVarietyEditorComponentArray(values?: CropVarietyEditorComponent[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createCropVarietyEditorComponentGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  handleCancelDialog(): void {}

  cancelDialog() {
    this.handleCancelDialog();
    this.dialogRef.close({ event: 'Cancel' });
  }

  handleDialogDone(data: any): any {
    return data;
  }

  dialogDone() {
    this.dialogRef.close({
      dialogData: this.handleDialogDone(this.editVarietyForm.value),
    });
  }
}
