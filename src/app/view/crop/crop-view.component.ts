// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
  Component,
  OnInit,
  inject,
  ViewChild,
  Input,
  Output,
  EventEmitter,
  AfterViewInit,
  signal,
  OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { CropState } from '@app/store/crop/crop.state';
import * as CropSelectors from '@app/store/crop/crop.selectors';
import * as CropActions from '@app/store/crop/crop.actions';

import { CropDetailsComponent } from '@app/components/crop/crop-details.component';
import { CropControllerImpl } from '@app/controller/crop/crop-controller.impl';
import { CropVO } from '@app/model/crop/crop-vo';
import { CropTypeListVO } from '@app/model/crop/type/crop-type-list-vo';

export class CropViewVarsForm {
  cropDetails: CropDetailsComponent | any;
}

@Component({
  selector: 'app-crop-view-base',
  template: '',
})
export abstract class CropViewComponent implements OnInit, AfterViewInit, OnDestroy {
  cropViewForm: FormGroup = new FormGroup({});
  hide: boolean = false;
  protected route: ActivatedRoute = inject(ActivatedRoute);
  protected router: Router = inject(Router);
  protected formBuilder: FormBuilder = inject(FormBuilder);
  protected useCaseScope: UseCaseScope = inject(UseCaseScope);
  protected store: Store<CropState> = inject(Store);
  dialog: MatDialog = inject(MatDialog);
  cropController: CropControllerImpl = inject(CropControllerImpl);
  @ViewChild('cropDetails') cropDetailsComponent?: CropDetailsComponent;
  cropDetailsForm: FormGroup = new FormGroup({});
  cropDetailsTypes$: Observable<CropTypeListVO[]>;
  cropDetailsTypesSubscription?: Subscription;
  cropDetailsTypesDataSource = new MatTableDataSource<CropTypeListVO>([]);
  cropDetailsTypeSelect: CropTypeListVO = new CropTypeListVO();
  cropDetailsTypeSearchField: FormControl = new FormControl();

  cropDetailsTypeModalColumns = ['actions', 'code', 'name'];

  cropDetailsTypeBackingList: SelectItem[] = [];
  messages: Observable<any>;
  messagesSubscription?: Subscription;
  success: Observable<boolean>;
  successSubscription?: Subscription;
  loading: Observable<boolean>;
  loadingSubscription?: Subscription;
  error: Observable<boolean>;
  errorSubscription?: Subscription;
  selected: any = null;

  cropViewFormValueSubscription?: Subscription;

  constructor() {
    this.loading = this.store.pipe(select(CropSelectors.selectLoading));
    this.success = this.store.pipe(select(CropSelectors.selectSuccess));
    this.error = this.store.pipe(select(CropSelectors.selectError));
    this.messages = this.store.pipe(select(CropSelectors.selectMessages));
  }

  abstract beforeOnInit(form: CropViewVarsForm): CropViewVarsForm;

  ngOnInit() {
    let form: CropViewVarsForm = this.beforeOnInit(new CropViewVarsForm());
    this.cropViewForm = this.newForm(form);

    this.cropViewFormValueSubscription = this.cropViewForm.valueChanges.subscribe((change: any) => {
      this.handleFormChanges(change);
    });

    this.afterOnInit();
    this.cropDetailsForm = this.cropDetailsControl;
  }

  handleFormChanges(change: any): void {}

  cropViewFormReset() {
    this.store.dispatch(CropActions.cropReset());
    this.cropViewForm.reset();
    this.cropViewForm.markAsPristine();

    if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
      this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
    } else {
      this.router.navigate([this.router.url]);
    }
  }

  afterOnInit(): void {}

  doNgAfterViewInit(): void {}

  ngAfterViewInit() {
    this.doNgAfterViewInit();
    this.cropController.resetUseCaseScope();
  }

  newForm(cropViewVarsForm$: CropViewVarsForm): FormGroup {
    return this.formBuilder.group({
      cropDetails: this.createCropDetailsForm(cropViewVarsForm$?.cropDetails),
    });
  }

  abstract doNgOnDestroy(): void;

  ngOnDestroy() {
    this.doNgOnDestroy();

    if (this.cropViewFormValueSubscription) {
      this.cropViewFormValueSubscription.unsubscribe();
    }

    this.store.dispatch(CropActions.cropReset());
    if (this.cropDetailsTypesSubscription) {
      this.cropDetailsTypesSubscription.unsubscribe();
    }

    if (this.messagesSubscription) {
      this.messagesSubscription.unsubscribe();
    }

    if (this.successSubscription) {
      this.successSubscription.unsubscribe();
    }

    if (this.loadingSubscription) {
      this.loadingSubscription.unsubscribe();
    }

    if (this.errorSubscription) {
      this.errorSubscription.unsubscribe();
    }
  }

  /**
   * This method may be overwritten
   */
  beforeCropViewEdit(form: any): void {}

  /**
   * This method may be overwritten
   */
  afterCropViewEdit(form: any): void {}

  /**
   * This method may be overwritten
   */
  get cropViewEditId(): string {
    return {} as string;
  }

  cropViewEdit(): void {
    let form: any = {
      id: this.cropViewEditId,
    };

    this.beforeCropViewEdit(form);

    this.cropController.cropViewEdit(form);
    this.afterCropViewEdit(form);
  }

  get cropViewVarsFormControl(): FormGroup {
    return this.getGroupControl('cropViewVarsForm');
  }

  createCropDetailsForm(cropDetails?: CropDetailsComponent): FormGroup {
    return this.formBuilder.group({
      id: [{ value: cropDetails?.id, disabled: false }],
      createdBy: [{ value: cropDetails?.createdBy, disabled: false }],
      updatedBy: [{ value: cropDetails?.updatedBy, disabled: false }],
      createdDate: [{ value: cropDetails?.createdDate, disabled: false }],
      updatedDate: [{ value: cropDetails?.updatedDate, disabled: false }],
      type: this.createCropTypeListVOGroup(cropDetails?.type),
      code: [{ value: cropDetails?.code, disabled: false }, [Validators.required]],
      name: [{ value: cropDetails?.name, disabled: false }, [Validators.required]],
      description: [{ value: cropDetails?.description, disabled: false }],
      images: this.formBuilder.array(cropDetails?.images ? cropDetails.images : []),
      numberOfDiseases: [{ value: cropDetails?.numberOfDiseases, disabled: false }],
      numberOfPests: [{ value: cropDetails?.numberOfPests, disabled: false }],
      numberOfVarieties: [{ value: cropDetails?.numberOfVarieties, disabled: false }],
      maturesIn: [{ value: cropDetails?.maturesIn, disabled: false }],
    });
  }

  get cropDetailsControl(): FormGroup {
    return this.getGroupControl('cropDetails') as FormGroup;
  }

  get cropDetails(): CropDetailsComponent {
    return this.cropDetailsControl.value;
  }

  get cropDetailsIdControl(): FormControl {
    return this.cropDetailsControl.get('id') as FormControl;
  }

  get cropDetailsId(): string {
    return this.cropDetailsIdControl.value;
  }

  get cropDetailsCreatedByControl(): FormControl {
    return this.cropDetailsControl.get('createdBy') as FormControl;
  }

  get cropDetailsCreatedBy(): string {
    return this.cropDetailsCreatedByControl.value;
  }

  get cropDetailsUpdatedByControl(): FormControl {
    return this.cropDetailsControl.get('updatedBy') as FormControl;
  }

  get cropDetailsUpdatedBy(): string {
    return this.cropDetailsUpdatedByControl.value;
  }

  get cropDetailsCreatedDateControl(): FormControl {
    return this.cropDetailsControl.get('createdDate') as FormControl;
  }

  get cropDetailsCreatedDate(): Date {
    return this.cropDetailsCreatedDateControl.value;
  }

  get cropDetailsUpdatedDateControl(): FormControl {
    return this.cropDetailsControl.get('updatedDate') as FormControl;
  }

  get cropDetailsUpdatedDate(): Date {
    return this.cropDetailsUpdatedDateControl.value;
  }

  get cropDetailsTypeControl(): FormGroup {
    return this.cropDetailsControl.get('type') as FormGroup;
  }

  get cropDetailsType(): CropTypeListVO[] {
    return this.cropDetailsTypeControl.value;
  }

  cropDetailsTypeAddDialog(): void {}

  cropDetailsTypeSearch(): void {}

  handleCropDetailsTypeSelected(event: MatRadioChange, data: CropTypeListVO): void {}

  cropDetailsTypeSelected(event: MatRadioChange, data: CropTypeListVO): void {
    this.cropDetailsTypeSelect = data;
    this.handleCropDetailsTypeSelected(event, data);
  }

  /**
   * May be overridden to customise behaviour
   *
   */
  addSelectedCropDetailsType(): void {
    this.cropDetailsControl.patchValue({ type: this.cropDetailsTypeSelect });
  }

  cropDetailsTypeClear(): void {
    this.cropDetailsControl.patchValue({ type: new CropTypeListVO() });
  }

  get cropDetailsCodeControl(): FormControl {
    return this.cropDetailsControl.get('code') as FormControl;
  }

  get cropDetailsCode(): string {
    return this.cropDetailsCodeControl.value;
  }

  get cropDetailsNameControl(): FormControl {
    return this.cropDetailsControl.get('name') as FormControl;
  }

  get cropDetailsName(): string {
    return this.cropDetailsNameControl.value;
  }

  get cropDetailsDescriptionControl(): FormControl {
    return this.cropDetailsControl.get('description') as FormControl;
  }

  get cropDetailsDescription(): string {
    return this.cropDetailsDescriptionControl.value;
  }

  get cropDetailsImagesControl(): FormArray {
    return this.cropDetailsControl.get('images') as FormArray;
  }

  get cropDetailsImages(): File[] {
    return this.cropDetailsImagesControl.value;
  }

  get cropDetailsNumberOfDiseasesControl(): FormControl {
    return this.cropDetailsControl.get('numberOfDiseases') as FormControl;
  }

  get cropDetailsNumberOfDiseases(): number {
    return this.cropDetailsNumberOfDiseasesControl.value;
  }

  get cropDetailsNumberOfPestsControl(): FormControl {
    return this.cropDetailsControl.get('numberOfPests') as FormControl;
  }

  get cropDetailsNumberOfPests(): number {
    return this.cropDetailsNumberOfPestsControl.value;
  }

  get cropDetailsNumberOfVarietiesControl(): FormControl {
    return this.cropDetailsControl.get('numberOfVarieties') as FormControl;
  }

  get cropDetailsNumberOfVarieties(): number {
    return this.cropDetailsNumberOfVarietiesControl.value;
  }

  get cropDetailsMaturesInControl(): FormControl {
    return this.cropDetailsControl.get('maturesIn') as FormControl;
  }

  get cropDetailsMaturesIn(): string {
    return this.cropDetailsMaturesInControl.value;
  }

  get cropDetailsAddVarietyControl(): FormControl {
    return this.cropDetailsControl.get('addVariety') as FormControl;
  }

  get cropDetailsAddVariety(): string {
    return this.cropDetailsAddVarietyControl.value;
  }

  getItemControl(name: string): FormControl {
    return this.cropViewForm.get(name) as FormControl;
  }

  getGroupControl(name: string): FormGroup {
    return this.cropViewForm.get(name) as FormGroup;
  }

  getArrayControl(name: string): FormArray {
    return this.cropViewForm.get(name) as FormArray;
  }

  setCropViewFormValue(form: any) {
    if (form.cropDetails) {
      this.cropViewForm.setControl('cropDetails', this.createCropDetailsForm(form.cropDetails));
    }
  }

  createCropDetailsComponentGroup(value?: CropDetailsComponent): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      code: [value?.code],
      name: [value?.name],
      description: [value?.description],
      numberOfDiseases: [value?.numberOfDiseases],
      numberOfPests: [value?.numberOfPests],
      numberOfVarieties: [value?.numberOfVarieties],
      maturesIn: [value?.maturesIn],
    });
  }

  createCropDetailsComponentArray(values?: CropDetailsComponent[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createCropDetailsComponentGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  createCropVOGroup(value?: CropVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      code: [value?.code],
      name: [value?.name],
      description: [value?.description],
      maturesIn: [value?.maturesIn],
      numberOfDiseases: [value?.numberOfDiseases],
      numberOfPests: [value?.numberOfPests],
      maturityPeriod: [value?.maturityPeriod],
    });
  }

  createCropVOArray(values?: CropVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createCropVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  createCropTypeListVOGroup(value?: CropTypeListVO): FormGroup {
    return this.formBuilder.group({
      code: [value?.code],
      id: [value?.id],
      name: [value?.name],
    });
  }

  createCropTypeListVOArray(values?: CropTypeListVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createCropTypeListVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  onCropDetailsAddVarietyClick() {}
}
