// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import { 
    Component, 
    OnInit, 
    inject, 
    ViewChild, 
    Input, 
    Output, 
    EventEmitter, 
    AfterViewInit,
    signal,
    OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule, 
    Validators 
} from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { CropState } from '@app/store/crop/crop.state';
import * as CropSelectors from '@app/store/crop/crop.selectors';
import * as CropActions from '@app/store/crop/crop.actions';

import { CropListVO } from '@app/model/bw/co/sigmaproduce/crop/crop-list-vo';
import { CropControllerImpl } from '@app/controller/crop/crop-controller.impl';
import { SearchCropsCropsImplComponent } from '@app/view/crop/search-crops-crops-impl.component';
import { CropVO } from '@app/model/bw/co/sigmaproduce/crop/crop-vo';

export class SearchCropsVarsForm {
    criteria: string | any;
}

@Component({
  selector: 'app-search-crops-base',
  template: ''
})
export abstract class SearchCropsComponent implements OnInit, AfterViewInit, OnDestroy {

	searchCropsForm: FormGroup = new FormGroup({});
    hide: boolean = false;
    protected route: ActivatedRoute = inject(ActivatedRoute);
    protected router: Router = inject(Router);
    protected formBuilder: FormBuilder = inject(FormBuilder);
    protected useCaseScope: UseCaseScope = inject(UseCaseScope);
    protected store: Store<CropState> = inject(Store);
    dialog: MatDialog = inject(MatDialog);
    cropController: CropControllerImpl = inject(CropControllerImpl);
    @ViewChild('searchCropsCropsComponent') searchCropsCropsComponent?: SearchCropsCropsImplComponent;
    criteria$: Observable<string>;
    criteriaSubscription?: Subscription;
    messages: Observable<any>;
    messagesSubscription?: Subscription;
    success: Observable<boolean>;
    successSubscription?: Subscription;
    loading: Observable<boolean>;
    loadingSubscription?: Subscription;
    error: Observable<boolean>;
    errorSubscription?: Subscription;
    selected: any = null;

    searchCropsFormValueSubscription?: Subscription;

    constructor() {
        this.criteria$ = this.store.pipe(select(CropSelectors.selectCriteria));
        this.loading = this.store.pipe(select(CropSelectors.selectLoading));
        this.success = this.store.pipe(select(CropSelectors.selectSuccess));
        this.error = this.store.pipe(select(CropSelectors.selectError));
        this.messages = this.store.pipe(select(CropSelectors.selectMessages));
    }

    abstract beforeOnInit(form: SearchCropsVarsForm): SearchCropsVarsForm;
	
    ngOnInit() {
        let form: SearchCropsVarsForm = this.beforeOnInit(new SearchCropsVarsForm);
        this.searchCropsForm = this.newForm(form);

        this.searchCropsFormValueSubscription = this.searchCropsForm.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
    }

    handleFormChanges(change: any): void {
        
    }

    searchCropsFormReset() {

        this.store.dispatch(CropActions.cropReset());
        this.searchCropsForm.reset()
        this.searchCropsForm.markAsPristine();

        if(this.router.url.substring(0, this.router.url.indexOf('?'))) {
            this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
        } else {
            this.router.navigate([this.router.url]);
        }
    }

    afterOnInit(): void {}
    
    doNgAfterViewInit(): void {}

    ngAfterViewInit() {
        this.doNgAfterViewInit();
        this.cropController.resetUseCaseScope();
    }

    newForm(searchCropsVarsForm$: SearchCropsVarsForm): FormGroup {
        return this.formBuilder.group({
            criteria: [{value: searchCropsVarsForm$?.criteria, disabled: false}],
            crops: this.formBuilder.array([
                this.formBuilder.group({
                    code: [''],
                    name: [''],
                    type: [''],
                })
            ]),
        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() { 
        this.doNgOnDestroy();

        if(this.searchCropsFormValueSubscription) {
            this.searchCropsFormValueSubscription.unsubscribe();
        }
        
        this.store.dispatch(CropActions.cropReset());
        if(this.criteriaSubscription) {
            this.criteriaSubscription.unsubscribe();
        }
        
        if(this.criteriaSubscription) {
            this.criteriaSubscription.unsubscribe();
        }

        if(this.messagesSubscription) {
            this.messagesSubscription.unsubscribe();
        }

        if(this.successSubscription) {
            this.successSubscription.unsubscribe();
        }

        if(this.loadingSubscription) {
            this.loadingSubscription.unsubscribe();
        }

        if(this.errorSubscription) {
            this.errorSubscription.unsubscribe();
        }
    }


    /**
     * This method may be overwritten
     */
    beforeSearchCropsSearch(form: any): void {}

    /**
     * This method may be overwritten
     */
    afterSearchCropsSearch(form: any): void {}

    /**
     * This method may be overwritten
     */
    get searchCropsSearchCriteria(): string {
        return {} as string;
    }

    searchCropsSearch(): void {

        let form: any = {
            criteria: this.searchCropsSearchCriteria,
        };

        this.beforeSearchCropsSearch(form);

        this.cropController.searchCropsSearch(form);
        this.afterSearchCropsSearch(form);
    }


    /**
     * This method may be overwritten
     */
    beforeSearchCropsAddNew(form: any): void {}

    /**
     * This method may be overwritten
     */
    afterSearchCropsAddNew(form: any): void {}

    /**
     * This method may be overwritten
     */
    get searchCropsAddNewId(): string {
        return {} as string;
    }

    searchCropsAddNew(): void {

        let form: any = {
            id: this.searchCropsAddNewId,
        };

        this.beforeSearchCropsAddNew(form);

        this.cropController.searchCropsAddNew(form);
        this.afterSearchCropsAddNew(form);
    }

    get searchCropsVarsFormControl(): FormGroup {
        return this.getGroupControl('searchCropsVarsForm');
    }

    get criteriaControl(): FormControl {
        return this.getItemControl('criteria') as FormControl;
    }

    get criteria(): string {
        return this.criteriaControl.value;
    }

    getItemControl(name: string): FormControl {
        return this.searchCropsForm.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.searchCropsForm.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.searchCropsForm.get(name) as FormArray;
    }

    setSearchCropsFormValue(form: any) {
        if(form.criteria) {
            this.searchCropsForm?.get('criteria')?.setValue(form.criteria);
        }
    }

    setCrops(crops: Array<CropListVO>): FormArray {

        const cropsArray = new FormArray([] as any);

        if(!crops || crops === undefined || crops === null) {
            return cropsArray;
        }

        crops.forEach((item) => {
            cropsArray.push(this.createCropsGroup(item));
        });

        this.searchCropsForm.setControl('crops', cropsArray);

        return cropsArray;
    }

    get cropsControl(): FormArray {
        return this.getArrayControl('crops');
    }

    get crops(): Array<CropListVO>[] {
        return this.cropsControl.value;
    }

    deleteFromCrops(index: number) {
        this.cropsControl.removeAt(index);
    }

    addToCrops(data: any) {
        this.cropsControl.push(this.createCropsGroup(data));
    }

    createCropsGroup(data: any): FormGroup {
        return this.formBuilder.group({
            code: [data?.code],
            name: [data?.name],
            type: [data?.type],
        });
    }

    addCropsDummyData() {
        this.cropsControl.push(this.formBuilder.group({
            code: ['code-1'],
            name: ['name-1'],
            type: ['type-1'],
        }));

        this.cropsControl.push(this.formBuilder.group({
            code: ['code-2'],
            name: ['name-2'],
            type: ['type-2'],
        }));
    }

    createCropListVOGroup(value?: CropListVO): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            code: [value?.code],
            name: [value?.name],
            type: [value?.type],
            typeId: [value?.typeId],
        });
    }

    createCropListVOArray(values?: CropListVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropListVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createCropVOGroup(value?: CropVO): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            code: [value?.code],
            name: [value?.name],
            description: [value?.description],
            maturesIn: [value?.maturesIn],
            numberOfDiseases: [value?.numberOfDiseases],
            numberOfPests: [value?.numberOfPests],
            maturityPeriod: [value?.maturityPeriod],
        });
    }

    createCropVOArray(values?: CropVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

}
