// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import { 
    Component, 
    OnInit, 
    inject, 
    ViewChild, 
    Input, 
    Output, 
    EventEmitter, 
    AfterViewInit,
    signal,
    OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule, 
    Validators 
} from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { CropTypeState } from '@app/store/crop/type/crop-type.state';
import * as CropTypeSelectors from '@app/store/crop/type/crop-type.selectors';
import * as CropTypeActions from '@app/store/crop/type/crop-type.actions';

import { CropTypeControllerImpl } from '@app/controller/crop/type/crop-type-controller.impl';
import { CropTypeEditorComponent } from '@app/components/crop/type/crop-type-editor.component';
import { CropTypeVO } from '@app/model/bw/co/sigmaproduce/crop/type/crop-type-vo';
import { SearchCropTypesCropTypesImplComponent } from '@app/view/crop/type/search-crop-types-crop-types-impl.component';
import { CropTypeListVO } from '@app/model/bw/co/sigmaproduce/crop/type/crop-type-list-vo';

export class SearchCropTypesVarsForm {
    criteria: string | any;
}

@Component({
  selector: 'app-search-crop-types-base',
  template: ''
})
export abstract class SearchCropTypesComponent implements OnInit, AfterViewInit, OnDestroy {

	searchCropTypesForm: FormGroup = new FormGroup({});
    hide: boolean = false;
    protected route: ActivatedRoute = inject(ActivatedRoute);
    protected router: Router = inject(Router);
    protected formBuilder: FormBuilder = inject(FormBuilder);
    protected useCaseScope: UseCaseScope = inject(UseCaseScope);
    protected store: Store<CropTypeState> = inject(Store);
    dialog: MatDialog = inject(MatDialog);
    cropTypeController: CropTypeControllerImpl = inject(CropTypeControllerImpl);
    @ViewChild('searchCropTypesCropTypesComponent') searchCropTypesCropTypesComponent?: SearchCropTypesCropTypesImplComponent;
    criteria$: Observable<string>;
    criteriaSubscription?: Subscription;
    messages: Observable<any>;
    messagesSubscription?: Subscription;
    success: Observable<boolean>;
    successSubscription?: Subscription;
    loading: Observable<boolean>;
    loadingSubscription?: Subscription;
    error: Observable<boolean>;
    errorSubscription?: Subscription;
    selected: any = null;

    searchCropTypesFormValueSubscription?: Subscription;

    constructor() {
        this.criteria$ = this.store.pipe(select(CropTypeSelectors.selectCriteria));
        this.loading = this.store.pipe(select(CropTypeSelectors.selectLoading));
        this.success = this.store.pipe(select(CropTypeSelectors.selectSuccess));
        this.error = this.store.pipe(select(CropTypeSelectors.selectError));
        this.messages = this.store.pipe(select(CropTypeSelectors.selectMessages));
    }

    abstract beforeOnInit(form: SearchCropTypesVarsForm): SearchCropTypesVarsForm;
	
    ngOnInit() {
        let form: SearchCropTypesVarsForm = this.beforeOnInit(new SearchCropTypesVarsForm);
        this.searchCropTypesForm = this.newForm(form);

        this.searchCropTypesFormValueSubscription = this.searchCropTypesForm.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
    }

    handleFormChanges(change: any): void {
        
    }

    searchCropTypesFormReset() {

        this.store.dispatch(CropTypeActions.cropTypeReset());
        this.searchCropTypesForm.reset()
        this.searchCropTypesForm.markAsPristine();

        if(this.router.url.substring(0, this.router.url.indexOf('?'))) {
            this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
        } else {
            this.router.navigate([this.router.url]);
        }
    }

    afterOnInit(): void {}
    
    doNgAfterViewInit(): void {}

    ngAfterViewInit() {
        this.doNgAfterViewInit();
        this.cropTypeController.resetUseCaseScope();
    }

    newForm(searchCropTypesVarsForm$: SearchCropTypesVarsForm): FormGroup {
        return this.formBuilder.group({
            criteria: [{value: searchCropTypesVarsForm$?.criteria, disabled: false}],
            cropTypes: this.formBuilder.array([
                this.formBuilder.group({
                    code: [''],
                    name: [''],
                })
            ]),
        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() { 
        this.doNgOnDestroy();

        if(this.searchCropTypesFormValueSubscription) {
            this.searchCropTypesFormValueSubscription.unsubscribe();
        }
        
        this.store.dispatch(CropTypeActions.cropTypeReset());
        if(this.criteriaSubscription) {
            this.criteriaSubscription.unsubscribe();
        }
        
        if(this.criteriaSubscription) {
            this.criteriaSubscription.unsubscribe();
        }

        if(this.messagesSubscription) {
            this.messagesSubscription.unsubscribe();
        }

        if(this.successSubscription) {
            this.successSubscription.unsubscribe();
        }

        if(this.loadingSubscription) {
            this.loadingSubscription.unsubscribe();
        }

        if(this.errorSubscription) {
            this.errorSubscription.unsubscribe();
        }
    }


    /**
     * This method may be overwritten
     */
    beforeSearchCropTypesSearch(form: any): void {}

    /**
     * This method may be overwritten
     */
    afterSearchCropTypesSearch(form: any): void {}

    /**
     * This method may be overwritten
     */
    get searchCropTypesSearchCriteria(): string {
        return {} as string;
    }

    searchCropTypesSearch(): void {

        let form: any = {
            criteria: this.searchCropTypesSearchCriteria,
        };

        this.beforeSearchCropTypesSearch(form);

        this.cropTypeController.searchCropTypesSearch(form);
        this.afterSearchCropTypesSearch(form);
    }


    /**
     * This method may be overwritten
     */
    beforeSearchCropTypesAddNew(form: any): void {}

    /**
     * This method may be overwritten
     */
    afterSearchCropTypesAddNew(form: any): void {}

    /**
     * This method may be overwritten
     */
    get searchCropTypesAddNewId(): string {
        return {} as string;
    }

    searchCropTypesAddNew(): void {

        let form: any = {
            id: this.searchCropTypesAddNewId,
        };

        this.beforeSearchCropTypesAddNew(form);

        this.cropTypeController.searchCropTypesAddNew(form);
        this.afterSearchCropTypesAddNew(form);
    }

    get searchCropTypesVarsFormControl(): FormGroup {
        return this.getGroupControl('searchCropTypesVarsForm');
    }

    get criteriaControl(): FormControl {
        return this.getItemControl('criteria') as FormControl;
    }

    get criteria(): string {
        return this.criteriaControl.value;
    }

    getItemControl(name: string): FormControl {
        return this.searchCropTypesForm.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.searchCropTypesForm.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.searchCropTypesForm.get(name) as FormArray;
    }

    setSearchCropTypesFormValue(form: any) {
        if(form.criteria) {
            this.searchCropTypesForm?.get('criteria')?.setValue(form.criteria);
        }
    }

    setCropTypes(cropTypes: Array<CropTypeListVO>): FormArray {

        const cropTypesArray = new FormArray([] as any);

        if(!cropTypes || cropTypes === undefined || cropTypes === null) {
            return cropTypesArray;
        }

        cropTypes.forEach((item) => {
            cropTypesArray.push(this.createCropTypesGroup(item));
        });

        this.searchCropTypesForm.setControl('cropTypes', cropTypesArray);

        return cropTypesArray;
    }

    get cropTypesControl(): FormArray {
        return this.getArrayControl('cropTypes');
    }

    get cropTypes(): Array<CropTypeListVO>[] {
        return this.cropTypesControl.value;
    }

    deleteFromCropTypes(index: number) {
        this.cropTypesControl.removeAt(index);
    }

    addToCropTypes(data: any) {
        this.cropTypesControl.push(this.createCropTypesGroup(data));
    }

    createCropTypesGroup(data: any): FormGroup {
        return this.formBuilder.group({
            code: [data?.code],
            name: [data?.name],
        });
    }

    addCropTypesDummyData() {
        this.cropTypesControl.push(this.formBuilder.group({
            code: ['code-1'],
            name: ['name-1'],
        }));

        this.cropTypesControl.push(this.formBuilder.group({
            code: ['code-2'],
            name: ['name-2'],
        }));
    }

    createCropTypeEditorComponentGroup(value?: CropTypeEditorComponent): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            code: [value?.code],
            name: [value?.name],
            description: [value?.description],
        });
    }

    createCropTypeEditorComponentArray(values?: CropTypeEditorComponent[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropTypeEditorComponentGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createCropTypeVOGroup(value?: CropTypeVO): FormGroup { 
        return this.formBuilder.group({
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            description: [value?.description],
            numberOfCrops: [value?.numberOfCrops],
            numberOfDiseases: [value?.numberOfDiseases],
            numberOfPests: [value?.numberOfPests],
        });
    }

    createCropTypeVOArray(values?: CropTypeVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropTypeVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createCropTypeListVOGroup(value?: CropTypeListVO): FormGroup { 
        return this.formBuilder.group({
            code: [value?.code],
            id: [value?.id],
            name: [value?.name],
        });
    }

    createCropTypeListVOArray(values?: CropTypeListVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCropTypeListVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

}
