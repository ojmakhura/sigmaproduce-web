// Generated by andromda-jsf cartridge (view\table\table.component.ts.vsl) DO NOT EDIT!
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { Component, OnInit, ViewChild, AfterViewInit, inject, Input, OnDestroy, signal } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { FormArray } from '@angular/forms';
import { ControllerBase } from '@app/controller/utils/controller.base';
import { ActivatedRoute, Router } from '@angular/router';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { Store, select } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { CropTypeState } from '@app/store/crop/type/crop-type.state';
import * as CropTypeSelectors from '@app/store/crop/type/crop-type.selectors';

import { CropTypeListVO } from '@app/model/crop/type/crop-type-list-vo';
import { SearchCropTypesImplComponent } from '@app/view/crop/type/search-crop-types-impl.component';
import { CropTypeControllerImpl } from '@app/controller/crop/type/crop-type-controller.impl';

@Component({
  selector: 'app-search-crop-types-crop-types-base',
  template: '',
})
export abstract class SearchCropTypesCropTypesComponent implements OnInit, AfterViewInit, OnDestroy {
  cropTypesColumns = ['code', 'name', 'actions'];

  totalElements = signal(0);
  cropTypes$: Observable<Array<CropTypeListVO>>;
  cropTypesSubscription: Subscription;

  cropTypesDataSource = new MatTableDataSource<CropTypeListVO>([]);
  @ViewChild('cropTypesPaginator', { static: true }) cropTypesPaginator: MatPaginator;
  @ViewChild('cropTypesSort', { static: true }) cropTypesSort: MatSort;

  @Input() protected pageVariables: any;
  protected route: ActivatedRoute = inject(ActivatedRoute);
  protected router: Router = inject(Router);
  protected useCaseScope: UseCaseScope = inject(UseCaseScope);
  protected store: Store<CropTypeState> = inject(Store);
  protected cropTypeController: CropTypeControllerImpl = inject(CropTypeControllerImpl);
  protected searchCropTypesComponent: SearchCropTypesImplComponent = inject(SearchCropTypesImplComponent);

  constructor() {
    this.cropTypes$ = this.store.pipe(select(CropTypeSelectors.selectCropTypes));
  }

  ngOnInit(): void {}

  afOnDestroy() {}
  ngOnDestroy() {
    if (this.cropTypesSubscription) {
      this.cropTypesSubscription.unsubscribe();
    }
    this.afOnDestroy();
  }

  ngAfterViewInit() {
    this.cropTypesSubscription = this.cropTypes$.subscribe((cropTypes) => {
      this.cropTypesDataSource.data = cropTypes;
      this.totalElements.set(cropTypes.length ? cropTypes.length : 0);
    });
    this.cropTypesDataSource.paginator = this.cropTypesPaginator;
    this.cropTypesDataSource.sort = this.cropTypesSort;
  }

  doSearchCropTypesEdit(form: any): any {}

  searchCropTypesEdit(id: string) {
    let form = {
      id: id,
    };
    let queryParams: any = {
      id: id,
    };
    this.cropTypeController.setQueryParams(Object.assign({}, queryParams));
    let params = this.doSearchCropTypesEdit(form);
    this.useCaseScope.pageVariables = Object.assign({}, params);
    this.cropTypeController.searchCropTypesEdit(params);
  }

  doSearchCropTypesDetails(form: any): any {}

  searchCropTypesDetails(id: string) {
    let form = {
      id: id,
    };
    let queryParams: any = {
      id: id,
    };
    this.cropTypeController.setQueryParams(Object.assign({}, queryParams));
    let params = this.doSearchCropTypesDetails(form);
    this.useCaseScope.pageVariables = Object.assign({}, params);
    this.cropTypeController.searchCropTypesDetails(params);
  }
}
