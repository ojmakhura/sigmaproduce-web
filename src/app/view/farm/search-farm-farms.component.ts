// Generated by andromda-jsf cartridge (view\table\table.component.ts.vsl) DO NOT EDIT!
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { 
    Component, 
    OnInit, 
    ViewChild, 
    AfterViewInit,
    inject, 
    Input,
    OnDestroy,
    signal
} from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { FormArray } from '@angular/forms';
import { ControllerBase } from '@app/controller/utils/controller.base';
import { ActivatedRoute, Router } from '@angular/router';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { Store, select } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { FarmState } from '@app/store/farm/farm.state';
import * as FarmSelectors from '@app/store/farm/farm.selectors';

import { FarmSearchComponent } from '@app/components/farm/farm-search.component';
import { FarmListVO } from '@app/model/bw/co/sigmaproduce/farm/farm-list-vo';
import { Unit } from '@app/model/bw/co/sigmaproduce/farm/unit';
import { SearchFarmImplComponent } from '@app/view/farm/search-farm-impl.component';
import { FarmControllerImpl } from '@app/controller/farm/farm-controller.impl';

@Component({
  selector: 'app-search-farm-farms-base',
  template: ''
})
export abstract class SearchFarmFarmsComponent implements OnInit, AfterViewInit, OnDestroy {

    farmsColumns = [
        'id',
        'name',
        'latitude',
        'longitude',
        'owner',
        'nearestVillage',
        'unit',
        'size',
        'actions'
    ];

    totalElements = signal(0);
    farms$: Observable<Array<FarmListVO>>;
    farmsSubscription: Subscription;

    farmsDataSource = new MatTableDataSource<FarmListVO>([]);
    @ViewChild('farmsPaginator', {static: true}) farmsPaginator: MatPaginator;
    @ViewChild('farmsSort', {static: true}) farmsSort: MatSort;

    @Input() protected pageVariables: any;
    protected route: ActivatedRoute = inject(ActivatedRoute);
    protected router: Router = inject(Router);
    protected useCaseScope: UseCaseScope = inject(UseCaseScope);
    protected store: Store<FarmState> = inject(Store);
    protected farmController: FarmControllerImpl = inject(FarmControllerImpl);
    protected searchFarmComponent: SearchFarmImplComponent = inject(SearchFarmImplComponent);

    constructor() {
        this.farms$ = this.store.pipe(select(FarmSelectors.selectFarms));
    }

    ngOnInit(): void {
    }

    afOnDestroy() {
    }   
    ngOnDestroy() { 
        if (this.farmsSubscription) {
            this.farmsSubscription.unsubscribe();
        }
        this.afOnDestroy();
    }
    
    ngAfterViewInit() {
        this.farmsSubscription = this.farms$
        .subscribe(
            farms => {
                this.farmsDataSource.data = farms;
                this.totalElements.set(farms.length ? farms.length : 0);
            }
        );
        this.farmsDataSource.paginator = this.farmsPaginator;
        this.farmsDataSource.sort = this.farmsSort;
    }

    doSearchFarmEdit(form: any): any {}
	
	searchFarmEdit(id: string) {
        let form = {
            id: id,
        };
        let queryParams: any = {
            id: id,
        };
        this.farmController.setQueryParams(Object.assign({}, queryParams));
        let params = this.doSearchFarmEdit(form);
        this.useCaseScope.pageVariables = Object.assign({}, params);
        this.farmController.searchFarmEdit(params);
	}

    doSearchFarmDetails(form: any): any {}
	
	searchFarmDetails(id: string) {
        let form = {
            id: id,
        };
        let queryParams: any = {
            id: id,
        };
        this.farmController.setQueryParams(Object.assign({}, queryParams));
        let params = this.doSearchFarmDetails(form);
        this.useCaseScope.pageVariables = Object.assign({}, params);
        this.farmController.searchFarmDetails(params);
	}
}