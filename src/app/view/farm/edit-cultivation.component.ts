// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
  Component,
  OnInit,
  inject,
  ViewChild,
  Input,
  Output,
  EventEmitter,
  AfterViewInit,
  signal,
  Inject,
  OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { MatDialogRef } from '@angular/material/dialog';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { FarmState } from '@app/store/farm/farm.state';
import * as FarmSelectors from '@app/store/farm/farm.selectors';
import * as FarmActions from '@app/store/farm/farm.actions';

import { FarmControllerImpl } from '@app/controller/farm/farm-controller.impl';
import { CultivationEditorComponent } from '@app/components/farm/cultivation/cultivation-editor.component';
import { FarmListVO } from '@app/model/farm/farm-list-vo';
import { Unit } from '@app/model/farm/unit';
import { CropVarietyList } from '@app/model/crop/variety/crop-variety-list';
import { EditCultivationImplComponent } from '@app/view/farm/edit-cultivation-impl.component';

export class EditCultivationVarsForm {
  cultivation: CultivationEditorComponent | any;
}

@Component({
  selector: 'app-edit-cultivation-base',
  template: '',
})
export abstract class EditCultivationComponent implements OnInit, AfterViewInit, OnDestroy {
  public dialogRef: MatDialogRef<EditCultivationImplComponent> = inject(MatDialogRef);
  dialogData: any;
  editCultivationForm: FormGroup = new FormGroup({});
  hide: boolean = false;
  protected route: ActivatedRoute = inject(ActivatedRoute);
  protected router: Router = inject(Router);
  protected formBuilder: FormBuilder = inject(FormBuilder);
  protected useCaseScope: UseCaseScope = inject(UseCaseScope);
  protected store: Store<FarmState> = inject(Store);
  dialog: MatDialog = inject(MatDialog);
  farmController: FarmControllerImpl = inject(FarmControllerImpl);
  @ViewChild('cultivation') cultivationComponent?: CultivationEditorComponent;
  cultivationEditorForm: FormGroup = new FormGroup({});
  cultivationFarms$: Observable<FarmListVO[]>;
  cultivationFarmsSubscription?: Subscription;
  cultivationFarmsDataSource = new MatTableDataSource<FarmListVO>([]);
  cultivationFarmSelect: FarmListVO = new FarmListVO();
  cultivationFarmSearchField: FormControl = new FormControl();

  cultivationFarmModalColumns = ['actions'];

  cultivationCropVarieties$: Observable<CropVarietyList[]>;
  cultivationCropVarietiesSubscription?: Subscription;
  cultivationCropVarietiesDataSource = new MatTableDataSource<CropVarietyList>([]);
  cultivationCropVarietySelect: CropVarietyList = new CropVarietyList();
  cultivationCropVarietySearchField: FormControl = new FormControl();

  cultivationCropVarietyModalColumns = ['actions'];

  cultivationFarmBackingList: SelectItem[] = [];
  cultivationCropVarietyBackingList: SelectItem[] = [];
  unitT = Unit;
  unitOptions: string[] = Object.keys(this.unitT);
  messages: Observable<any>;
  messagesSubscription?: Subscription;
  success: Observable<boolean>;
  successSubscription?: Subscription;
  loading: Observable<boolean>;
  loadingSubscription?: Subscription;
  error: Observable<boolean>;
  errorSubscription?: Subscription;
  selected: any = null;

  editCultivationFormValueSubscription?: Subscription;

  constructor(@Inject(MAT_DIALOG_DATA) data: any) {
    this.loading = this.store.pipe(select(FarmSelectors.selectLoading));
    this.success = this.store.pipe(select(FarmSelectors.selectSuccess));
    this.error = this.store.pipe(select(FarmSelectors.selectError));
    this.messages = this.store.pipe(select(FarmSelectors.selectMessages));
  }

  abstract beforeOnInit(form: EditCultivationVarsForm): EditCultivationVarsForm;

  ngOnInit() {
    let form: EditCultivationVarsForm = this.beforeOnInit(new EditCultivationVarsForm());
    this.editCultivationForm = this.newForm(form);

    this.editCultivationFormValueSubscription = this.editCultivationForm.valueChanges.subscribe((change: any) => {
      this.handleFormChanges(change);
    });

    this.afterOnInit();
    this.cultivationEditorForm = this.cultivationControl;
  }

  handleFormChanges(change: any): void {}

  editCultivationFormReset() {
    this.store.dispatch(FarmActions.farmReset());
    this.editCultivationForm.reset();
    this.editCultivationForm.markAsPristine();

    if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
      this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
    } else {
      this.router.navigate([this.router.url]);
    }
  }

  afterOnInit(): void {}

  doNgAfterViewInit(): void {}

  ngAfterViewInit() {
    this.doNgAfterViewInit();
    this.farmController.resetUseCaseScope();
  }

  newForm(editCultivationVarsForm$: EditCultivationVarsForm): FormGroup {
    return this.formBuilder.group({
      cultivation: this.createCultivationForm(editCultivationVarsForm$?.cultivation),
    });
  }

  abstract doNgOnDestroy(): void;

  ngOnDestroy() {
    this.doNgOnDestroy();

    if (this.editCultivationFormValueSubscription) {
      this.editCultivationFormValueSubscription.unsubscribe();
    }

    if (this.cultivationFarmsSubscription) {
      this.cultivationFarmsSubscription.unsubscribe();
    }

    if (this.cultivationCropVarietiesSubscription) {
      this.cultivationCropVarietiesSubscription.unsubscribe();
    }

    if (this.messagesSubscription) {
      this.messagesSubscription.unsubscribe();
    }

    if (this.successSubscription) {
      this.successSubscription.unsubscribe();
    }

    if (this.loadingSubscription) {
      this.loadingSubscription.unsubscribe();
    }

    if (this.errorSubscription) {
      this.errorSubscription.unsubscribe();
    }
  }

  get editCultivationVarsFormControl(): FormGroup {
    return this.getGroupControl('editCultivationVarsForm');
  }

  createCultivationForm(cultivation?: CultivationEditorComponent): FormGroup {
    return this.formBuilder.group({
      id: [{ value: cultivation?.id, disabled: false }],
      createdBy: [{ value: cultivation?.createdBy, disabled: false }],
      updatedBy: [{ value: cultivation?.updatedBy, disabled: false }],
      createdDate: [{ value: cultivation?.createdDate, disabled: false }],
      updatedDate: [{ value: cultivation?.updatedDate, disabled: false }],
      farm: this.createFarmListVOGroup(cultivation?.farm),
      cropVariety: this.createCropVarietyListGroup(cultivation?.cropVariety),
      cultivationDate: [{ value: cultivation?.cultivationDate, disabled: false }],
      exptectedHarvestDate: [{ value: cultivation?.exptectedHarvestDate, disabled: false }],
      size: [{ value: cultivation?.size, disabled: false }],
      unit: [{ value: cultivation?.unit, disabled: false }],
    });
  }

  get cultivationControl(): FormGroup {
    return this.getGroupControl('cultivation') as FormGroup;
  }

  get cultivation(): CultivationEditorComponent {
    return this.cultivationControl.value;
  }

  get cultivationIdControl(): FormControl {
    return this.cultivationControl.get('id') as FormControl;
  }

  get cultivationId(): string {
    return this.cultivationIdControl.value;
  }

  get cultivationCreatedByControl(): FormControl {
    return this.cultivationControl.get('createdBy') as FormControl;
  }

  get cultivationCreatedBy(): string {
    return this.cultivationCreatedByControl.value;
  }

  get cultivationUpdatedByControl(): FormControl {
    return this.cultivationControl.get('updatedBy') as FormControl;
  }

  get cultivationUpdatedBy(): string {
    return this.cultivationUpdatedByControl.value;
  }

  get cultivationCreatedDateControl(): FormControl {
    return this.cultivationControl.get('createdDate') as FormControl;
  }

  get cultivationCreatedDate(): Date {
    return this.cultivationCreatedDateControl.value;
  }

  get cultivationUpdatedDateControl(): FormControl {
    return this.cultivationControl.get('updatedDate') as FormControl;
  }

  get cultivationUpdatedDate(): Date {
    return this.cultivationUpdatedDateControl.value;
  }

  get cultivationFarmControl(): FormGroup {
    return this.cultivationControl.get('farm') as FormGroup;
  }

  get cultivationFarm(): FarmListVO[] {
    return this.cultivationFarmControl.value;
  }

  cultivationFarmAddDialog(): void {}

  cultivationFarmSearch(): void {}

  handleCultivationFarmSelected(event: MatRadioChange, data: FarmListVO): void {}

  cultivationFarmSelected(event: MatRadioChange, data: FarmListVO): void {
    this.cultivationFarmSelect = data;
    this.handleCultivationFarmSelected(event, data);
  }

  /**
   * May be overridden to customise behaviour
   *
   */
  addSelectedCultivationFarm(): void {
    this.cultivationControl.patchValue({ farm: this.cultivationFarmSelect });
  }

  cultivationFarmClear(): void {
    this.cultivationControl.patchValue({ farm: new FarmListVO() });
  }

  get cultivationCropVarietyControl(): FormGroup {
    return this.cultivationControl.get('cropVariety') as FormGroup;
  }

  get cultivationCropVariety(): CropVarietyList[] {
    return this.cultivationCropVarietyControl.value;
  }

  cultivationCropVarietyAddDialog(): void {}

  cultivationCropVarietySearch(): void {}

  handleCultivationCropVarietySelected(event: MatRadioChange, data: CropVarietyList): void {}

  cultivationCropVarietySelected(event: MatRadioChange, data: CropVarietyList): void {
    this.cultivationCropVarietySelect = data;
    this.handleCultivationCropVarietySelected(event, data);
  }

  /**
   * May be overridden to customise behaviour
   *
   */
  addSelectedCultivationCropVariety(): void {
    this.cultivationControl.patchValue({ cropVariety: this.cultivationCropVarietySelect });
  }

  cultivationCropVarietyClear(): void {
    this.cultivationControl.patchValue({ cropVariety: new CropVarietyList() });
  }

  get cultivationCultivationDateControl(): FormControl {
    return this.cultivationControl.get('cultivationDate') as FormControl;
  }

  get cultivationCultivationDate(): Date {
    return this.cultivationCultivationDateControl.value;
  }

  get cultivationExptectedHarvestDateControl(): FormControl {
    return this.cultivationControl.get('exptectedHarvestDate') as FormControl;
  }

  get cultivationExptectedHarvestDate(): Date {
    return this.cultivationExptectedHarvestDateControl.value;
  }

  get cultivationSizeControl(): FormControl {
    return this.cultivationControl.get('size') as FormControl;
  }

  get cultivationSize(): number {
    return this.cultivationSizeControl.value;
  }

  get cultivationUnitControl(): FormGroup {
    return this.cultivationControl.get('unit') as FormGroup;
  }

  get cultivationUnit(): Unit {
    return this.cultivationUnitControl.value;
  }

  getItemControl(name: string): FormControl {
    return this.editCultivationForm.get(name) as FormControl;
  }

  getGroupControl(name: string): FormGroup {
    return this.editCultivationForm.get(name) as FormGroup;
  }

  getArrayControl(name: string): FormArray {
    return this.editCultivationForm.get(name) as FormArray;
  }

  setEditCultivationFormValue(form: any) {
    if (form.cultivation) {
      this.editCultivationForm.setControl('cultivation', this.createCultivationForm(form.cultivation));
    }
  }

  createCultivationEditorComponentGroup(value?: CultivationEditorComponent): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      cultivationDate: [value?.cultivationDate],
      exptectedHarvestDate: [value?.exptectedHarvestDate],
      size: [value?.size],
      unit: [value?.unit],
    });
  }

  createCultivationEditorComponentArray(values?: CultivationEditorComponent[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createCultivationEditorComponentGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  createFarmListVOGroup(value?: FarmListVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      name: [value?.name],
      latitude: [value?.latitude],
      longitude: [value?.longitude],
      owner: [value?.owner],
      nearestVillage: [value?.nearestVillage],
      unit: [value?.unit],
      size: [value?.size],
    });
  }

  createFarmListVOArray(values?: FarmListVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createFarmListVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  createCropVarietyListGroup(value?: CropVarietyList): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      code: [value?.code],
      name: [value?.name],
      cropId: [value?.cropId],
      crop: [value?.crop],
    });
  }

  createCropVarietyListArray(values?: CropVarietyList[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createCropVarietyListGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  handleCancelDialog(): void {}

  cancelDialog() {
    this.handleCancelDialog();
    this.dialogRef.close({ event: 'Cancel' });
  }

  handleDialogDone(data: any): any {
    return data;
  }

  dialogDone() {
    this.dialogRef.close({
      dialogData: this.handleDialogDone(this.editCultivationForm.value),
    });
  }
}
