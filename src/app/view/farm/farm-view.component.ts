// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import { 
    Component, 
    OnInit, 
    inject, 
    ViewChild, 
    Input, 
    Output, 
    EventEmitter, 
    AfterViewInit,
    signal,
    OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule, 
    Validators 
} from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { FarmState } from '@app/store/farm/farm.state';
import * as FarmSelectors from '@app/store/farm/farm.selectors';
import * as FarmActions from '@app/store/farm/farm.actions';

import { FarmVO } from '@app/model/bw/co/sigmaproduce/farm/farm-vo';
import { PostVO } from '@app/model/bw/co/sigmaproduce/farm/post/post-vo';
import { FarmDetailsComponent } from '@app/components/farm/farm-details.component';
import { FarmControllerImpl } from '@app/controller/farm/farm-controller.impl';
import { VillageVO } from '@app/model/bw/co/sigmaproduce/village/village-vo';
import { CultivationListVO } from '@app/model/bw/co/sigmaproduce/farm/cultivation/cultivation-list-vo';
import { Unit } from '@app/model/bw/co/sigmaproduce/farm/unit';

export class FarmViewVarsForm {
    farmDetails: FarmDetailsComponent | any;
}

@Component({
  selector: 'app-farm-view-base',
  template: ''
})
export abstract class FarmViewComponent implements OnInit, AfterViewInit, OnDestroy {

	farmViewForm: FormGroup = new FormGroup({});
    hide: boolean = false;
    protected route: ActivatedRoute = inject(ActivatedRoute);
    protected router: Router = inject(Router);
    protected formBuilder: FormBuilder = inject(FormBuilder);
    protected useCaseScope: UseCaseScope = inject(UseCaseScope);
    protected store: Store<FarmState> = inject(Store);
    dialog: MatDialog = inject(MatDialog);
    farmController: FarmControllerImpl = inject(FarmControllerImpl);
    @ViewChild('farmDetails') farmDetailsComponent?: FarmDetailsComponent;
    farmDetailsForm: FormGroup = new FormGroup({});
    farmDetailsNearestVillages$: Observable<VillageVO[]>;
    farmDetailsNearestVillagesSubscription?: Subscription;
    farmDetailsNearestVillagesDataSource = new MatTableDataSource<VillageVO>([]);
    farmDetailsNearestVillageSelect: VillageVO = new VillageVO();
    farmDetailsNearestVillageSearchField: FormControl = new FormControl();

    farmDetailsNearestVillageModalColumns = [
        'actions',
    ];

    unitT = Unit;
    unitOptions: string[] = Object.keys(this.unitT);
    farmDetailsNearestVillageBackingList: SelectItem[] = [];
    farmDetailsPostsBackingList: SelectItem[] = [];
    farmDetailsCultivationsBackingList: SelectItem[] = [];
    messages: Observable<any>;
    messagesSubscription?: Subscription;
    success: Observable<boolean>;
    successSubscription?: Subscription;
    loading: Observable<boolean>;
    loadingSubscription?: Subscription;
    error: Observable<boolean>;
    errorSubscription?: Subscription;
    selected: any = null;

    farmViewFormValueSubscription?: Subscription;

    constructor() {
        this.loading = this.store.pipe(select(FarmSelectors.selectLoading));
        this.success = this.store.pipe(select(FarmSelectors.selectSuccess));
        this.error = this.store.pipe(select(FarmSelectors.selectError));
        this.messages = this.store.pipe(select(FarmSelectors.selectMessages));
    }

    abstract beforeOnInit(form: FarmViewVarsForm): FarmViewVarsForm;
	
    ngOnInit() {
        let form: FarmViewVarsForm = this.beforeOnInit(new FarmViewVarsForm);
        this.farmViewForm = this.newForm(form);

        this.farmViewFormValueSubscription = this.farmViewForm.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
        this.farmDetailsForm = this.farmDetailsControl;
    }

    handleFormChanges(change: any): void {
        
    }

    farmViewFormReset() {

        this.store.dispatch(FarmActions.farmReset());
        this.farmViewForm.reset()
        this.farmViewForm.markAsPristine();

        if(this.router.url.substring(0, this.router.url.indexOf('?'))) {
            this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
        } else {
            this.router.navigate([this.router.url]);
        }
    }

    afterOnInit(): void {}
    
    doNgAfterViewInit(): void {}

    ngAfterViewInit() {
        this.doNgAfterViewInit();
        this.farmController.resetUseCaseScope();
    }

    newForm(farmViewVarsForm$: FarmViewVarsForm): FormGroup {
        return this.formBuilder.group({
            farmDetails: this.createFarmDetailsForm(farmViewVarsForm$?.farmDetails),
        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() { 
        this.doNgOnDestroy();

        if(this.farmViewFormValueSubscription) {
            this.farmViewFormValueSubscription.unsubscribe();
        }
        
        this.store.dispatch(FarmActions.farmReset());
        if(this.farmDetailsNearestVillagesSubscription) {
            this.farmDetailsNearestVillagesSubscription.unsubscribe();
        }

        if(this.messagesSubscription) {
            this.messagesSubscription.unsubscribe();
        }

        if(this.successSubscription) {
            this.successSubscription.unsubscribe();
        }

        if(this.loadingSubscription) {
            this.loadingSubscription.unsubscribe();
        }

        if(this.errorSubscription) {
            this.errorSubscription.unsubscribe();
        }
    }


    /**
     * This method may be overwritten
     */
    beforeFarmViewEdit(form: any): void {}

    /**
     * This method may be overwritten
     */
    afterFarmViewEdit(form: any): void {}

    /**
     * This method may be overwritten
     */
    get farmViewEditId(): string {
        return {} as string;
    }

    farmViewEdit(): void {

        let form: any = {
            id: this.farmViewEditId,
        };

        this.beforeFarmViewEdit(form);

        this.farmController.farmViewEdit(form);
        this.afterFarmViewEdit(form);
    }

    get farmViewVarsFormControl(): FormGroup {
        return this.getGroupControl('farmViewVarsForm');
    }

    createFarmDetailsForm(farmDetails?: FarmDetailsComponent): FormGroup {
        return this.formBuilder.group({
            id: [{value: farmDetails?.id, disabled: false}],
            createdBy: [{value: farmDetails?.createdBy, disabled: false}],
            updatedBy: [{value: farmDetails?.updatedBy, disabled: false}],
            createdDate: [{value: farmDetails?.createdDate, disabled: false}],
            updatedDate: [{value: farmDetails?.updatedDate, disabled: false}],
            name: [{value: farmDetails?.name, disabled: false}, [Validators.required, ]],
            description: [{value: farmDetails?.description, disabled: false}],
            latitude: [{value: farmDetails?.latitude, disabled: false}],
            longitude: [{value: farmDetails?.longitude, disabled: false}],
            owner: [{value: farmDetails?.owner, disabled: false}, [Validators.required, ]],
            size: [{value: farmDetails?.size, disabled: false}],
            unit: [{value: farmDetails?.unit, disabled: false}],
            nearestVillage: this.createVillageVOGroup(farmDetails?.nearestVillage),
            ownerId: [{value: farmDetails?.ownerId, disabled: false}, [Validators.required, ]],
            photos: this.formBuilder.array(farmDetails?.photos ? farmDetails.photos : []),
            numberOfCrops: [{value: farmDetails?.numberOfCrops, disabled: false}],
            numberOfDiseases: [{value: farmDetails?.numberOfDiseases, disabled: false}],
            numberOfPests: [{value: farmDetails?.numberOfPests, disabled: false}],
            posts: this.createPostVOArray(farmDetails?.posts),
            cultivations: this.createCultivationListVOArray(farmDetails?.cultivations),
        });
    }

    get farmDetailsControl(): FormGroup {
        return this.getGroupControl('farmDetails') as FormGroup;
    }

    get farmDetails(): FarmDetailsComponent {
        return this.farmDetailsControl.value;
    }

    get farmDetailsIdControl(): FormControl {
        return this.farmDetailsControl.get('id') as FormControl;
    }

    get farmDetailsId(): string {
        return this.farmDetailsIdControl.value;
    }

    get farmDetailsCreatedByControl(): FormControl {
        return this.farmDetailsControl.get('createdBy') as FormControl;
    }

    get farmDetailsCreatedBy(): string {
        return this.farmDetailsCreatedByControl.value;
    }

    get farmDetailsUpdatedByControl(): FormControl {
        return this.farmDetailsControl.get('updatedBy') as FormControl;
    }

    get farmDetailsUpdatedBy(): string {
        return this.farmDetailsUpdatedByControl.value;
    }

    get farmDetailsCreatedDateControl(): FormControl {
        return this.farmDetailsControl.get('createdDate') as FormControl;
    }

    get farmDetailsCreatedDate(): Date {
        return this.farmDetailsCreatedDateControl.value;
    }

    get farmDetailsUpdatedDateControl(): FormControl {
        return this.farmDetailsControl.get('updatedDate') as FormControl;
    }

    get farmDetailsUpdatedDate(): Date {
        return this.farmDetailsUpdatedDateControl.value;
    }

    get farmDetailsNameControl(): FormControl {
        return this.farmDetailsControl.get('name') as FormControl;
    }

    get farmDetailsName(): string {
        return this.farmDetailsNameControl.value;
    }

    get farmDetailsDescriptionControl(): FormControl {
        return this.farmDetailsControl.get('description') as FormControl;
    }

    get farmDetailsDescription(): string {
        return this.farmDetailsDescriptionControl.value;
    }

    get farmDetailsLatitudeControl(): FormControl {
        return this.farmDetailsControl.get('latitude') as FormControl;
    }

    get farmDetailsLatitude(): number {
        return this.farmDetailsLatitudeControl.value;
    }

    get farmDetailsLongitudeControl(): FormControl {
        return this.farmDetailsControl.get('longitude') as FormControl;
    }

    get farmDetailsLongitude(): number {
        return this.farmDetailsLongitudeControl.value;
    }

    get farmDetailsOwnerControl(): FormControl {
        return this.farmDetailsControl.get('owner') as FormControl;
    }

    get farmDetailsOwner(): string {
        return this.farmDetailsOwnerControl.value;
    }

    get farmDetailsSizeControl(): FormControl {
        return this.farmDetailsControl.get('size') as FormControl;
    }

    get farmDetailsSize(): number {
        return this.farmDetailsSizeControl.value;
    }

    get farmDetailsUnitControl(): FormGroup {
        return this.farmDetailsControl.get('unit') as FormGroup;
    }

    get farmDetailsUnit(): Unit {
        return this.farmDetailsUnitControl.value;
    }

    get farmDetailsNearestVillageControl(): FormGroup {
        return this.farmDetailsControl.get('nearestVillage') as FormGroup;
    }

    get farmDetailsNearestVillage(): VillageVO {
        return this.farmDetailsNearestVillageControl.value;
    }


    farmDetailsNearestVillageAddDialog(): void {
    }

    
    farmDetailsNearestVillageSearch(): void {
    }

    handleFarmDetailsNearestVillageSelected(event: MatRadioChange, data: VillageVO): void {}
    
    farmDetailsNearestVillageSelected(event: MatRadioChange, data: VillageVO): void {
        
        this.farmDetailsNearestVillageSelect = data;
        this.handleFarmDetailsNearestVillageSelected(event, data);
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedFarmDetailsNearestVillage(): void {
        this.farmDetailsControl.patchValue({nearestVillage: this.farmDetailsNearestVillageSelect});
    }

    farmDetailsNearestVillageClear(): void {
        this.farmDetailsControl.patchValue({nearestVillage: new VillageVO()});
    }

    get farmDetailsOwnerIdControl(): FormControl {
        return this.farmDetailsControl.get('ownerId') as FormControl;
    }

    get farmDetailsOwnerId(): string {
        return this.farmDetailsOwnerIdControl.value;
    }

    get farmDetailsPhotosControl(): FormArray {
        return this.farmDetailsControl.get('photos') as FormArray;
    }

    get farmDetailsPhotos(): File[] {
        return this.farmDetailsPhotosControl.value;
    }

    get farmDetailsNumberOfCropsControl(): FormControl {
        return this.farmDetailsControl.get('numberOfCrops') as FormControl;
    }

    get farmDetailsNumberOfCrops(): number {
        return this.farmDetailsNumberOfCropsControl.value;
    }

    get farmDetailsNumberOfDiseasesControl(): FormControl {
        return this.farmDetailsControl.get('numberOfDiseases') as FormControl;
    }

    get farmDetailsNumberOfDiseases(): number {
        return this.farmDetailsNumberOfDiseasesControl.value;
    }

    get farmDetailsNumberOfPestsControl(): FormControl {
        return this.farmDetailsControl.get('numberOfPests') as FormControl;
    }

    get farmDetailsNumberOfPests(): number {
        return this.farmDetailsNumberOfPestsControl.value;
    }

    get farmDetailsPostsControl(): FormArray {
        return this.farmDetailsControl.get('posts') as FormArray;
    }

    get farmDetailsPosts(): PostVO[] {
        return this.farmDetailsPostsControl.value;
    }


    farmDetailsPostsAddDialog(): void {
    }

    
    farmDetailsPostsSearch(): void {
    }

    get farmDetailsCultivationsControl(): FormArray {
        return this.farmDetailsControl.get('cultivations') as FormArray;
    }

    get farmDetailsCultivations(): CultivationListVO[] {
        return this.farmDetailsCultivationsControl.value;
    }


    farmDetailsCultivationsAddDialog(): void {
    }

    
    farmDetailsCultivationsSearch(): void {
    }

    getItemControl(name: string): FormControl {
        return this.farmViewForm.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.farmViewForm.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.farmViewForm.get(name) as FormArray;
    }

    setFarmViewFormValue(form: any) {
        if(form.farmDetails) {
            this.farmViewForm.setControl('farmDetails', this.createFarmDetailsForm(form.farmDetails));
        }
    }

    createFarmVOGroup(value?: FarmVO): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            name: [value?.name],
            description: [value?.description],
            latitude: [value?.latitude],
            longitude: [value?.longitude],
            owner: [value?.owner],
            ownerId: [value?.ownerId],
            unit: [value?.unit],
            size: [value?.size],
        });
    }

    createFarmVOArray(values?: FarmVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createFarmVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createPostVOGroup(value?: PostVO): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            content: [value?.content],
        });
    }

    createPostVOArray(values?: PostVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createPostVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createFarmDetailsComponentGroup(value?: FarmDetailsComponent): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            name: [value?.name],
            description: [value?.description],
            latitude: [value?.latitude],
            longitude: [value?.longitude],
            owner: [value?.owner],
            size: [value?.size],
            unit: [value?.unit],
            ownerId: [value?.ownerId],
            numberOfCrops: [value?.numberOfCrops],
            numberOfDiseases: [value?.numberOfDiseases],
            numberOfPests: [value?.numberOfPests],
        });
    }

    createFarmDetailsComponentArray(values?: FarmDetailsComponent[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createFarmDetailsComponentGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createVillageVOGroup(value?: VillageVO): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            code: [value?.code],
            name: [value?.name],
        });
    }

    createVillageVOArray(values?: VillageVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createVillageVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

    createCultivationListVOGroup(value?: CultivationListVO): FormGroup { 
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            crop: [value?.crop],
            cropVariety: [value?.cropVariety],
            size: [value?.size],
            unit: [value?.unit],
            farm: [value?.farm],
            farmId: [value?.farmId],
            cropVarietyId: [value?.cropVarietyId],
        });
    }

    createCultivationListVOArray(values?: CultivationListVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createCultivationListVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

}
