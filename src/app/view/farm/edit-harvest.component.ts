// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
  Component,
  OnInit,
  inject,
  ViewChild,
  Input,
  Output,
  EventEmitter,
  AfterViewInit,
  signal,
  Inject,
  OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { MatDialogRef } from '@angular/material/dialog';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { FarmState } from '@app/store/farm/farm.state';
import * as FarmSelectors from '@app/store/farm/farm.selectors';
import * as FarmActions from '@app/store/farm/farm.actions';

import { FarmControllerImpl } from '@app/controller/farm/farm-controller.impl';
import { HarvestEditorComponent } from '@app/components/farm/cultivation/harvest/harvest-editor.component';
import { CultivationVO } from '@app/model/farm/cultivation/cultivation-vo';
import { HarvestUnit } from '@app/model/farm/cultivation/harvest/harvest-unit';
import { EditHarvestImplComponent } from '@app/view/farm/edit-harvest-impl.component';

export class EditHarvestVarsForm {
  harvest: HarvestEditorComponent | any;
}

@Component({
  selector: 'app-edit-harvest-base',
  template: '',
})
export abstract class EditHarvestComponent implements OnInit, AfterViewInit, OnDestroy {
  public dialogRef: MatDialogRef<EditHarvestImplComponent> = inject(MatDialogRef);
  dialogData: any;
  editHarvestForm: FormGroup = new FormGroup({});
  hide: boolean = false;
  protected route: ActivatedRoute = inject(ActivatedRoute);
  protected router: Router = inject(Router);
  protected formBuilder: FormBuilder = inject(FormBuilder);
  protected useCaseScope: UseCaseScope = inject(UseCaseScope);
  protected store: Store<FarmState> = inject(Store);
  dialog: MatDialog = inject(MatDialog);
  farmController: FarmControllerImpl = inject(FarmControllerImpl);
  @ViewChild('harvest') harvestComponent?: HarvestEditorComponent;
  harvestEditorForm: FormGroup = new FormGroup({});
  harvestCultivations$: Observable<CultivationVO[]>;
  harvestCultivationsSubscription?: Subscription;
  harvestCultivationsDataSource = new MatTableDataSource<CultivationVO>([]);
  harvestCultivationSelect: CultivationVO = new CultivationVO();
  harvestCultivationSearchField: FormControl = new FormControl();

  harvestCultivationModalColumns = ['actions'];

  unitT = HarvestUnit;
  unitOptions: string[] = Object.keys(this.unitT);
  harvestCultivationBackingList: SelectItem[] = [];
  messages: Observable<any>;
  messagesSubscription?: Subscription;
  success: Observable<boolean>;
  successSubscription?: Subscription;
  loading: Observable<boolean>;
  loadingSubscription?: Subscription;
  error: Observable<boolean>;
  errorSubscription?: Subscription;
  selected: any = null;

  editHarvestFormValueSubscription?: Subscription;

  constructor(@Inject(MAT_DIALOG_DATA) data: any) {
    this.loading = this.store.pipe(select(FarmSelectors.selectLoading));
    this.success = this.store.pipe(select(FarmSelectors.selectSuccess));
    this.error = this.store.pipe(select(FarmSelectors.selectError));
    this.messages = this.store.pipe(select(FarmSelectors.selectMessages));
  }

  abstract beforeOnInit(form: EditHarvestVarsForm): EditHarvestVarsForm;

  ngOnInit() {
    let form: EditHarvestVarsForm = this.beforeOnInit(new EditHarvestVarsForm());
    this.editHarvestForm = this.newForm(form);

    this.editHarvestFormValueSubscription = this.editHarvestForm.valueChanges.subscribe((change: any) => {
      this.handleFormChanges(change);
    });

    this.afterOnInit();
    this.harvestEditorForm = this.harvestControl;
  }

  handleFormChanges(change: any): void {}

  editHarvestFormReset() {
    this.store.dispatch(FarmActions.farmReset());
    this.editHarvestForm.reset();
    this.editHarvestForm.markAsPristine();

    if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
      this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
    } else {
      this.router.navigate([this.router.url]);
    }
  }

  afterOnInit(): void {}

  doNgAfterViewInit(): void {}

  ngAfterViewInit() {
    this.doNgAfterViewInit();
    this.farmController.resetUseCaseScope();
  }

  newForm(editHarvestVarsForm$: EditHarvestVarsForm): FormGroup {
    return this.formBuilder.group({
      harvest: this.createHarvestForm(editHarvestVarsForm$?.harvest),
    });
  }

  abstract doNgOnDestroy(): void;

  ngOnDestroy() {
    this.doNgOnDestroy();

    if (this.editHarvestFormValueSubscription) {
      this.editHarvestFormValueSubscription.unsubscribe();
    }

    if (this.harvestCultivationsSubscription) {
      this.harvestCultivationsSubscription.unsubscribe();
    }

    if (this.messagesSubscription) {
      this.messagesSubscription.unsubscribe();
    }

    if (this.successSubscription) {
      this.successSubscription.unsubscribe();
    }

    if (this.loadingSubscription) {
      this.loadingSubscription.unsubscribe();
    }

    if (this.errorSubscription) {
      this.errorSubscription.unsubscribe();
    }
  }

  get editHarvestVarsFormControl(): FormGroup {
    return this.getGroupControl('editHarvestVarsForm');
  }

  createHarvestForm(harvest?: HarvestEditorComponent): FormGroup {
    return this.formBuilder.group({
      id: [{ value: harvest?.id, disabled: false }],
      createdBy: [{ value: harvest?.createdBy, disabled: false }],
      updatedBy: [{ value: harvest?.updatedBy, disabled: false }],
      createdDate: [{ value: harvest?.createdDate, disabled: false }],
      updatedDate: [{ value: harvest?.updatedDate, disabled: false }],
      quantity: [{ value: harvest?.quantity, disabled: false }],
      unit: [{ value: harvest?.unit, disabled: false }, [Validators.required]],
      images: this.formBuilder.array(harvest?.images ? harvest.images : []),
      cultivation: this.createCultivationVOGroup(harvest?.cultivation),
    });
  }

  get harvestControl(): FormGroup {
    return this.getGroupControl('harvest') as FormGroup;
  }

  get harvest(): HarvestEditorComponent {
    return this.harvestControl.value;
  }

  get harvestIdControl(): FormControl {
    return this.harvestControl.get('id') as FormControl;
  }

  get harvestId(): string {
    return this.harvestIdControl.value;
  }

  get harvestCreatedByControl(): FormControl {
    return this.harvestControl.get('createdBy') as FormControl;
  }

  get harvestCreatedBy(): string {
    return this.harvestCreatedByControl.value;
  }

  get harvestUpdatedByControl(): FormControl {
    return this.harvestControl.get('updatedBy') as FormControl;
  }

  get harvestUpdatedBy(): string {
    return this.harvestUpdatedByControl.value;
  }

  get harvestCreatedDateControl(): FormControl {
    return this.harvestControl.get('createdDate') as FormControl;
  }

  get harvestCreatedDate(): Date {
    return this.harvestCreatedDateControl.value;
  }

  get harvestUpdatedDateControl(): FormControl {
    return this.harvestControl.get('updatedDate') as FormControl;
  }

  get harvestUpdatedDate(): Date {
    return this.harvestUpdatedDateControl.value;
  }

  get harvestQuantityControl(): FormControl {
    return this.harvestControl.get('quantity') as FormControl;
  }

  get harvestQuantity(): number {
    return this.harvestQuantityControl.value;
  }

  get harvestUnitControl(): FormGroup {
    return this.harvestControl.get('unit') as FormGroup;
  }

  get harvestUnit(): HarvestUnit {
    return this.harvestUnitControl.value;
  }

  get harvestImagesControl(): FormArray {
    return this.harvestControl.get('images') as FormArray;
  }

  get harvestImages(): File[] {
    return this.harvestImagesControl.value;
  }

  get harvestCultivationControl(): FormGroup {
    return this.harvestControl.get('cultivation') as FormGroup;
  }

  get harvestCultivation(): CultivationVO {
    return this.harvestCultivationControl.value;
  }

  harvestCultivationAddDialog(): void {}

  harvestCultivationSearch(): void {}

  handleHarvestCultivationSelected(event: MatRadioChange, data: CultivationVO): void {}

  harvestCultivationSelected(event: MatRadioChange, data: CultivationVO): void {
    this.harvestCultivationSelect = data;
    this.handleHarvestCultivationSelected(event, data);
  }

  /**
   * May be overridden to customise behaviour
   *
   */
  addSelectedHarvestCultivation(): void {
    this.harvestControl.patchValue({ cultivation: this.harvestCultivationSelect });
  }

  harvestCultivationClear(): void {
    this.harvestControl.patchValue({ cultivation: new CultivationVO() });
  }

  getItemControl(name: string): FormControl {
    return this.editHarvestForm.get(name) as FormControl;
  }

  getGroupControl(name: string): FormGroup {
    return this.editHarvestForm.get(name) as FormGroup;
  }

  getArrayControl(name: string): FormArray {
    return this.editHarvestForm.get(name) as FormArray;
  }

  setEditHarvestFormValue(form: any) {
    if (form.harvest) {
      this.editHarvestForm.setControl('harvest', this.createHarvestForm(form.harvest));
    }
  }

  createHarvestEditorComponentGroup(value?: HarvestEditorComponent): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      quantity: [value?.quantity],
      unit: [value?.unit],
    });
  }

  createHarvestEditorComponentArray(values?: HarvestEditorComponent[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createHarvestEditorComponentGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  createCultivationVOGroup(value?: CultivationVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      cultivationDate: [value?.cultivationDate],
      exptectedHarvestDate: [value?.exptectedHarvestDate],
      size: [value?.size],
      unit: [value?.unit],
    });
  }

  createCultivationVOArray(values?: CultivationVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createCultivationVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  handleCancelDialog(): void {}

  cancelDialog() {
    this.handleCancelDialog();
    this.dialogRef.close({ event: 'Cancel' });
  }

  handleDialogDone(data: any): any {
    return data;
  }

  dialogDone() {
    this.dialogRef.close({
      dialogData: this.handleDialogDone(this.editHarvestForm.value),
    });
  }
}
