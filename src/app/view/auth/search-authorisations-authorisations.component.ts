// Generated by andromda-jsf cartridge (view\table\table.component.ts.vsl) DO NOT EDIT!
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { Component, OnInit, ViewChild, Injector, Input, OnDestroy } from '@angular/core';
import { MatTableExporterDirective } from 'mat-table-exporter';
import { MatTableDataSource } from '@angular/material/table';
import { FormArray } from '@angular/forms';
import { ControllerBase } from '@app/controller/utils/controller.base';
import { ActivatedRoute, Router } from '@angular/router';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { AuthorisationState } from '@app/store/auth/authorisation.state';
import * as AuthorisationSelectors from '@app/store/auth/authorisation.selectors';

import { AuthorisationCriteria } from '@app/model//auth/authorisation-criteria';
import { AccessPointVO } from '@app/model//access/access-point-vo';
import { AuthorisationVO } from '@app/model//auth/authorisation-vo';
import { SearchAuthorisationsComponentImpl } from '@app/view/auth/search-authorisations.component.impl';
import { AuthorisationControllerImpl } from '@app/controller/auth/authorisation-controller.impl';

@Component({
  selector: 'search-authorisations-authorisations-base',
  template: '',
})
export abstract class SearchAuthorisationsAuthorisationsComponent implements OnInit, OnDestroy {
  authorisationsColumns = ['id', 'accessPoint.name', 'accessPoint.url', 'actions'];

  authorisations$: Observable<Array<AuthorisationVO>>;

  authorisationsDataSource = new MatTableDataSource<AuthorisationVO>([]);
  @ViewChild('authorisationsPaginator', { static: true }) authorisationsPaginator: MatPaginator;
  @ViewChild('authorisationsSort', { static: true }) authorisationsSort: MatSort;
  @ViewChild(MatTableExporterDirective) matTableExporter: MatTableExporterDirective;

  totalElements: number = 0;

  @Input() protected pageVariables: any;
  protected route: ActivatedRoute;
  protected router: Router;
  protected useCaseScope: UseCaseScope;
  protected store: Store<AuthorisationState>;
  protected authorisationController: AuthorisationControllerImpl;
  protected searchAuthorisationsComponent: SearchAuthorisationsComponentImpl;
  protected _injector: Injector;

  constructor(injector: Injector) {
    this.route = injector.get(ActivatedRoute);
    this.router = injector.get(Router);
    this.useCaseScope = injector.get(UseCaseScope);
    this.store = injector.get(Store);
    this.authorisationController = injector.get(AuthorisationControllerImpl);
    this.searchAuthorisationsComponent = injector.get(SearchAuthorisationsComponentImpl);
    this._injector = injector;
    this.authorisations$ = this.store.pipe(select(AuthorisationSelectors.selectAuthorisations));
  }

  ngOnInit(): void {}

  ngOnDestroy() {}

  ngAfterViewInit() {
    this.authorisations$.subscribe((authorisations) => {
      this.authorisationsDataSource.data = authorisations;
      this.totalElements = authorisations.length;
      this.authorisationsDataSource.paginator = this.authorisationsPaginator;
      this.authorisationsDataSource.sort = this.authorisationsSort;
    });
  }

  doSearchAuthorisationsEdit(form: any): any {}

  searchAuthorisationsEdit(id: number) {
    let form = {
      id: id,
    };
    let queryParams: any = {
      id: id,
    };
    this.authorisationController.setQueryParams(Object.assign({}, queryParams));
    let params = this.doSearchAuthorisationsEdit(form);
    this.useCaseScope.pageVariables = Object.assign({}, params);
    this.authorisationController.searchAuthorisationsEdit(params);
  }

  getAuthorisationsExportData(): any {
    return this.authorisationsDataSource?.data?.map((row) => {
      return {
        id: row?.id,
        accessPointname: row?.accessPoint?.name,
        accessPointurl: row?.accessPoint?.url,
      };
    });
  }
}
