// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
  Component,
  OnInit,
  Injector,
  ViewChild,
  Input,
  Output,
  EventEmitter,
  AfterViewInit,
  OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatTableDataSource } from '@angular/material/table';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { AuthorisationState } from '@app/store/auth/authorisation.state';
import * as AuthorisationSelectors from '@app/store/auth/authorisation.selectors';
import * as AuthorisationActions from '@app/store/auth/authorisation.actions';

import { AuthorisationCriteria } from '@app/model//auth/authorisation-criteria';
import { AuthorisationControllerImpl } from '@app/controller/auth/authorisation-controller.impl';
import { SearchAuthorisationsAuthorisationsImplComponent } from '@app/view/auth/search-authorisations-authorisations.component.impl';
import { AccessPointVO } from '@app/model//access/access-point-vo';
import { AuthorisationVO } from '@app/model//auth/authorisation-vo';
import { AuthorisationRestController } from '@app/service//auth/authorisation-rest-controller';

export class SearchAuthorisationsSearchForm {
  criteria: AuthorisationCriteria | any;
  authorisations: Array<AuthorisationVO>[] | any[];
  id: number | any;
}
export class SearchAuthorisationsVarsForm {
  criteria: AuthorisationCriteria | any;
}

@Component({
  selector: 'app-search-authorisations-base',
  template: '',
})
export abstract class SearchAuthorisationsComponent implements OnInit, AfterViewInit, OnDestroy {
  searchAuthorisationsForm: FormGroup | any;
  hide: boolean = false;
  protected route: ActivatedRoute;
  protected router: Router;
  protected formBuilder: FormBuilder;
  protected _injector: Injector;
  protected useCaseScope: UseCaseScope;
  protected store: Store<AuthorisationState>;
  dialog: MatDialog;
  authorisationController: AuthorisationControllerImpl;
  authorisationRestController: AuthorisationRestController;
  criteriaRolesBackingList: Array<SelectItem> = [];
  @ViewChild('authorisationsAccessPointModalPaginator', { static: true })
  authorisationsAccessPointModalPaginator: MatPaginator;
  @ViewChild('authorisationsAccessPointModalSort', { static: true }) authorisationsAccessPointModalSort: MatSort;

  authorisationsAccessPoints$: Observable<Array<AccessPointVO>>;
  authorisationsAccessPointsDataSource = new MatTableDataSource<AccessPointVO>([]);
  authorisationsAccessPointSelect: AccessPointVO = new AccessPointVO();
  authorisationsAccessPointSearchField: FormControl = new FormControl();

  authorisationsAccessPointModalColumns = ['actions', 'id', 'accessPointType.name', 'name', 'url'];

  criteria$: Observable<AuthorisationCriteria>;
  messages: Observable<any>;
  success: Observable<boolean>;
  loading: Observable<boolean>;
  loaderMessage: Observable<string>;
  error: Observable<boolean>;
  selected: any = null;

  @ViewChild('searchAuthorisationsAuthorisationsComponent')
  searchAuthorisationsAuthorisationsComponent: SearchAuthorisationsAuthorisationsComponentImpl;

  constructor(injector: Injector) {
    this.route = injector.get(ActivatedRoute);
    this.router = injector.get(Router);
    this.formBuilder = injector.get(FormBuilder);
    this.useCaseScope = injector.get(UseCaseScope);
    this.store = injector.get(Store);
    this.dialog = injector.get(MatDialog);
    this.authorisationController = injector.get(AuthorisationControllerImpl);
    this.authorisationRestController = injector.get(AuthorisationRestController);
    this._injector = injector;
    this.criteria$ = this.store.pipe(select(AuthorisationSelectors.selectCriteria));
    this.loading = this.store.pipe(select(AuthorisationSelectors.selectLoading));
    this.loaderMessage = this.store.pipe(select(AuthorisationSelectors.selectLoaderMessage));
    this.success = this.store.pipe(select(AuthorisationSelectors.selectSuccess));
    this.error = this.store.pipe(select(AuthorisationSelectors.selectError));
    this.messages = this.store.pipe(select(AuthorisationSelectors.selectMessages));
  }

  beforeOnInit(form: SearchAuthorisationsVarsForm): SearchAuthorisationsVarsForm {
    return form;
  }

  ngOnInit() {
    let form: SearchAuthorisationsVarsForm = this.beforeOnInit(new SearchAuthorisationsVarsForm());
    this.searchAuthorisationsForm = this.newForm(form);

    this.searchAuthorisationsForm.valueChanges.subscribe((change: any) => {
      this.handleFormChanges(change);
    });

    this.authorisationsAccessPoints$?.subscribe((data) => {
      this.authorisationsAccessPointsDataSource.data = data;
      this.authorisationsAccessPointsDataSource.paginator = this.authorisationsAccessPointModalPaginator;
      this.authorisationsAccessPointsDataSource.sort = this.authorisationsAccessPointModalSort;
    });

    this.afterOnInit();
  }

  handleFormChanges(change: any): void {}

  searchAuthorisationsFormReset() {
    this.store.dispatch(AuthorisationActions.authorisationReset());

    this.searchAuthorisationsForm.reset();
    this.searchAuthorisationsForm.markAsPristine();

    if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
      this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
    } else {
      this.router.navigate([this.router.url]);
    }
  }

  afterOnInit(): void {}

  doNgAfterViewInit(): void {}

  ngAfterViewInit() {
    this.doNgAfterViewInit();
    this.authorisationController.resetUseCaseScope();
  }

  newForm(searchAuthorisationsVarsForm$: SearchAuthorisationsVarsForm): FormGroup {
    return this.formBuilder.group({
      criteria: this.createCriteriaForm(searchAuthorisationsVarsForm$?.criteria),
      authorisations: this.formBuilder.array([
        this.formBuilder.group({
          id: [''],
        }),
      ]),
    });
  }

  abstract doNgOnDestroy(): void;

  ngOnDestroy() {
    this.doNgOnDestroy();
    this.store.dispatch(AuthorisationActions.authorisationReset());
  }

  get searchAuthorisationsSearchForm(): SearchAuthorisationsSearchForm {
    let form: SearchAuthorisationsSearchForm = new SearchAuthorisationsSearchForm();
    form.criteria = this.criteria;

    return form;
  }

  /**
   * This method may be overwritten
   */
  beforeSearchAuthorisationsSearch(form: SearchAuthorisationsSearchForm): void {}

  /**
   * This method may be overwritten
   */
  afterSearchAuthorisationsSearch(form: SearchAuthorisationsSearchForm): void {}

  searchAuthorisationsSearch(): void {
    let form: SearchAuthorisationsSearchForm = this.searchAuthorisationsSearchForm;
    this.beforeSearchAuthorisationsSearch(form);

    this.authorisationController.searchAuthorisationsSearch(form);
    this.afterSearchAuthorisationsSearch(form);
  }

  getSearchAuthorisationsSearchForm(value: any): SearchAuthorisationsSearchForm {
    let form: SearchAuthorisationsSearchForm = new SearchAuthorisationsSearchForm();

    if (value?.criteria) {
      form.criteria = value?.criteria;
    }

    return form;
  }

  get searchAuthorisationsVarsFormControl(): FormGroup {
    return this.getGroupControl('searchAuthorisationsVarsForm');
  }

  /**
   * This method may be overwritten
   */
  afterSetSearchAuthorisationsVarsForm(form: SearchAuthorisationsVarsForm): void {}

  setSearchAuthorisationsVarsForm(form: SearchAuthorisationsVarsForm) {
    this.searchAuthorisationsVarsFormControl.setControl('criteria', this.createCriteriaForm(form.criteria));

    this.afterSetSearchAuthorisationsVarsForm(form);
  }

  createCriteriaForm(criteria: AuthorisationCriteria): FormGroup {
    return this.formBuilder.group({
      accessPointName: [{ value: criteria?.accessPointName, disabled: false }],
      accessPointUrl: [{ value: criteria?.accessPointUrl, disabled: false }],
      roles: this.formBuilder.array(criteria?.roles ? criteria.roles : []),
    });
  }

  get criteriaControl(): FormGroup {
    return this.getGroupControl('criteria') as FormGroup;
  }

  get criteria(): AuthorisationCriteria {
    return this.criteriaControl.value;
  }

  get criteriaAccessPointNameControl(): FormControl {
    return this.criteriaControl.get('accessPointName') as FormControl;
  }

  get criteriaAccessPointName(): string {
    return this.criteriaAccessPointNameControl.value;
  }

  get criteriaAccessPointUrlControl(): FormControl {
    return this.criteriaControl.get('accessPointUrl') as FormControl;
  }

  get criteriaAccessPointUrl(): string {
    return this.criteriaAccessPointUrlControl.value;
  }

  get criteriaRolesControl(): FormArray {
    return this.criteriaControl.get('roles') as FormArray;
  }

  get criteriaRoles(): string[] {
    return this.criteriaRolesControl.value;
  }

  /**
   * Add the selected item to the list only if it already exist.
   * Make sure to reset the selection.
   * @param $event
   */
  onCriteriaRolesChange($event: MatSelectChange) {
    if (!this.criteriaRoles.includes($event.value)) {
      this.criteriaRolesControl.push(new FormControl($event.value));
    }
    $event.source.value = '';
  }

  /**
   * Retrieve the label to be displayes
   * @param value
   * @returns
   */
  getCriteriaRolesLabel(value: string): string | undefined {
    return this.criteriaRolesBackingList.find((item) => item.value === value)?.label;
  }

  /**
   * Delete an item from the list
   * @param index
   */
  criteriaRolesDelete(index: number) {
    this.criteriaRolesControl.removeAt(index);
  }

  getItemControl(name: string): FormControl {
    return this.searchAuthorisationsForm.get(name) as FormControl;
  }

  getGroupControl(name: string): FormGroup {
    return this.searchAuthorisationsForm.get(name) as FormGroup;
  }

  getArrayControl(name: string): FormArray {
    return this.searchAuthorisationsForm.get(name) as FormArray;
  }

  setSearchAuthorisationsFormValue(form: any) {
    if (form.criteria) {
      this.searchAuthorisationsForm.setControl('criteria', this.createCriteriaForm(form.criteria));
    }
  }

  setAuthorisations(authorisations: Array<AuthorisationVO>): FormArray {
    const authorisationsArray = new FormArray([]);

    if (!authorisations || authorisations === undefined || authorisations === null) {
      return authorisationsArray;
    }

    authorisations.forEach((item) => {
      authorisationsArray.push(this.createAuthorisationsGroup(item));
    });

    this.searchAuthorisationsForm.setControl('authorisations', authorisationsArray);

    return authorisationsArray;
  }

  get authorisationsControl(): FormArray {
    return this.getArrayControl('authorisations');
  }

  get authorisations(): Array<AuthorisationVO>[] {
    return this.authorisationsControl.value;
  }

  deleteFromAuthorisations(index: number) {
    this.authorisationsControl.removeAt(index);
  }

  addToAuthorisations(data: any) {
    this.authorisationsControl.push(this.createAuthorisationsGroup(data));
  }

  createAuthorisationsGroup(data: any): FormGroup {
    return this.formBuilder.group({
      id: [data?.id],
    });
  }

  addAuthorisationsDummyData() {
    this.authorisationsControl.push(
      this.formBuilder.group({
        id: [1],
      })
    );

    this.authorisationsControl.push(
      this.formBuilder.group({
        id: [2],
      })
    );
  }

  createAuthorisationCriteriaGroup(value: AuthorisationCriteria): FormGroup {
    return this.formBuilder.group({
      accessPointName: [value?.accessPointName],
      accessPointUrl: [value?.accessPointUrl],
    });
  }

  createAuthorisationCriteriaArray(values: AuthorisationCriteria[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAuthorisationCriteriaGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }

  createAccessPointVOGroup(value: AccessPointVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      name: [value?.name],
      url: [value?.url],
      icon: [value?.icon],
    });
  }

  createAccessPointVOArray(values: AccessPointVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAccessPointVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }

  createAuthorisationVOGroup(value: AuthorisationVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
    });
  }

  createAuthorisationVOArray(values: AuthorisationVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAuthorisationVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }
}
