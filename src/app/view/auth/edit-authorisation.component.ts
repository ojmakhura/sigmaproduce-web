// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
  AfterViewInit,
  Component,
  Injector,
  OnDestroy,
  OnInit,
  ViewChild
} from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatRadioChange } from '@angular/material/radio';
import { MatSelectChange } from '@angular/material/select';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import * as AuthorisationActions from '@app/store/auth/authorisation.actions';
import * as AuthorisationSelectors from '@app/store/auth/authorisation.selectors';
import { AuthorisationState } from '@app/store/auth/authorisation.state';
import { SelectItem } from '@app/utils/select-item';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';

import { AuthorisationControllerImpl } from '@app/controller/auth/authorisation-controller.impl';
import { AccessPointVO } from '@app/model//access/access-point-vo';
import { AuthorisationCriteria } from '@app/model//auth/authorisation-criteria';
import { AuthorisationVO } from '@app/model//auth/authorisation-vo';
import { AuthorisationRestController } from '@app/service//auth/authorisation-rest-controller';
import { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';

export class EditAuthorisationSaveForm {
  authorisation: AuthorisationVO | any;
}

export class EditAuthorisationSearchForm {
  criteria: AuthorisationCriteria | any;
  authorisations: Array<AuthorisationVO>[] | any[];
  id: number | any;
}

export class EditAuthorisationDeleteForm {
  authorisation: AuthorisationVO | any;
}
export class EditAuthorisationVarsForm {
  authorisation: AuthorisationVO | any;
}

@Component({
  selector: 'app-edit-authorisation-base',
  template: '',
})
export abstract class EditAuthorisationComponent implements OnInit, AfterViewInit, OnDestroy {
  editAuthorisationForm: FormGroup | any;
  hide: boolean = false;
  protected route: ActivatedRoute;
  protected router: Router;
  protected formBuilder: FormBuilder;
  protected _injector: Injector;
  protected useCaseScope: UseCaseScope;
  protected store: Store<AuthorisationState>;
  dialog: MatDialog;
  authorisationController: AuthorisationControllerImpl;
  authorisationRestController: AuthorisationRestController;
  @ViewChild('authorisationAccessPointModalPaginator', { static: true })
  authorisationAccessPointModalPaginator: MatPaginator;
  @ViewChild('authorisationAccessPointModalSort', { static: true }) authorisationAccessPointModalSort: MatSort;

  authorisationAccessPoints$: Observable<Array<AccessPointVO>>;
  authorisationAccessPointsDataSource = new MatTableDataSource<AccessPointVO>([]);
  authorisationAccessPointSelect: AccessPointVO = new AccessPointVO();
  authorisationAccessPointSearchField: FormControl = new FormControl();

  authorisationAccessPointModalColumns = ['actions', 'id', 'accessPointType.name', 'name', 'url'];

  authorisationAccessPointBackingList: Array<SelectItem> = [];
  authorisationRolesBackingList: Array<SelectItem> = [];
  authorisation$: Observable<AuthorisationVO>;
  messages: Observable<any>;
  success: Observable<boolean>;
  loading: Observable<boolean>;
  loaderMessage: Observable<string>;
  error: Observable<boolean>;
  selected: any = null;

  constructor(injector: Injector) {
    this.route = injector.get(ActivatedRoute);
    this.router = injector.get(Router);
    this.formBuilder = injector.get(FormBuilder);
    this.useCaseScope = injector.get(UseCaseScope);
    this.store = injector.get(Store);
    this.dialog = injector.get(MatDialog);
    this.authorisationController = injector.get(AuthorisationControllerImpl);
    this.authorisationRestController = injector.get(AuthorisationRestController);
    this._injector = injector;
    this.authorisation$ = this.store.pipe(select(AuthorisationSelectors.selectAuthorisation));
    this.loading = this.store.pipe(select(AuthorisationSelectors.selectLoading));
    this.loaderMessage = this.store.pipe(select(AuthorisationSelectors.selectLoaderMessage));
    this.success = this.store.pipe(select(AuthorisationSelectors.selectSuccess));
    this.error = this.store.pipe(select(AuthorisationSelectors.selectError));
    this.messages = this.store.pipe(select(AuthorisationSelectors.selectMessages));
  }

  beforeOnInit(form: EditAuthorisationVarsForm): EditAuthorisationVarsForm {
    return form;
  }

  ngOnInit() {
    let form: EditAuthorisationVarsForm = this.beforeOnInit(new EditAuthorisationVarsForm());
    this.editAuthorisationForm = this.newForm(form);

    this.editAuthorisationForm.valueChanges.subscribe((change: any) => {
      this.handleFormChanges(change);
    });

    this.authorisationAccessPoints$?.subscribe((data) => {
      this.authorisationAccessPointsDataSource.data = data;
      this.authorisationAccessPointsDataSource.paginator = this.authorisationAccessPointModalPaginator;
      this.authorisationAccessPointsDataSource.sort = this.authorisationAccessPointModalSort;
    });

    this.afterOnInit();
  }

  handleFormChanges(change: any): void {}

  editAuthorisationFormReset() {
    this.store.dispatch(AuthorisationActions.authorisationReset());

    this.editAuthorisationForm.reset();
    this.editAuthorisationForm.markAsPristine();

    if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
      this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
    } else {
      this.router.navigate([this.router.url]);
    }
  }

  afterOnInit(): void {}

  doNgAfterViewInit(): void {}

  ngAfterViewInit() {
    this.doNgAfterViewInit();
    this.authorisationController.resetUseCaseScope();
  }

  newForm(editAuthorisationVarsForm$: EditAuthorisationVarsForm): FormGroup {
    return this.formBuilder.group({
      authorisation: this.createAuthorisationForm(editAuthorisationVarsForm$?.authorisation),
    });
  }

  abstract doNgOnDestroy(): void;

  ngOnDestroy() {
    this.doNgOnDestroy();
    this.store.dispatch(AuthorisationActions.authorisationReset());
  }

  get editAuthorisationSaveForm(): EditAuthorisationSaveForm {
    let form: EditAuthorisationSaveForm = new EditAuthorisationSaveForm();
    form.authorisation = this.authorisation;

    return form;
  }

  /**
   * This method may be overwritten
   */
  beforeEditAuthorisationSave(form: EditAuthorisationSaveForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditAuthorisationSave(form: EditAuthorisationSaveForm): void {}

  editAuthorisationSave(): void {
    let form: EditAuthorisationSaveForm = this.editAuthorisationSaveForm;
    this.beforeEditAuthorisationSave(form);

    this.authorisationController.editAuthorisationSave(form);
    this.afterEditAuthorisationSave(form);
  }

  getEditAuthorisationSaveForm(value: any): EditAuthorisationSaveForm {
    let form: EditAuthorisationSaveForm = new EditAuthorisationSaveForm();

    if (value?.authorisation) {
      form.authorisation = value?.authorisation;
    }

    return form;
  }

  get editAuthorisationSearchForm(): EditAuthorisationSearchForm {
    let form: EditAuthorisationSearchForm = new EditAuthorisationSearchForm();

    return form;
  }

  /**
   * This method may be overwritten
   */
  beforeEditAuthorisationSearch(form: EditAuthorisationSearchForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditAuthorisationSearch(form: EditAuthorisationSearchForm): void {}

  editAuthorisationSearch(): void {
    let form: EditAuthorisationSearchForm = this.editAuthorisationSearchForm;
    this.beforeEditAuthorisationSearch(form);

    this.authorisationController.editAuthorisationSearch(form);
    this.afterEditAuthorisationSearch(form);
  }

  getEditAuthorisationSearchForm(value: any): EditAuthorisationSearchForm {
    let form: EditAuthorisationSearchForm = new EditAuthorisationSearchForm();

    return form;
  }

  get editAuthorisationDeleteForm(): EditAuthorisationDeleteForm {
    let form: EditAuthorisationDeleteForm = new EditAuthorisationDeleteForm();
    form.authorisation = this.authorisation;

    return form;
  }

  /**
   * This method may be overwritten
   */
  beforeEditAuthorisationDelete(form: EditAuthorisationDeleteForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditAuthorisationDelete(form: EditAuthorisationDeleteForm): void {}

  editAuthorisationDelete(): void {
    let form: EditAuthorisationDeleteForm = this.editAuthorisationDeleteForm;
    this.beforeEditAuthorisationDelete(form);

    this.authorisationController.editAuthorisationDelete(form);
    this.afterEditAuthorisationDelete(form);
  }

  getEditAuthorisationDeleteForm(value: any): EditAuthorisationDeleteForm {
    let form: EditAuthorisationDeleteForm = new EditAuthorisationDeleteForm();

    if (value?.authorisation) {
      form.authorisation = value?.authorisation;
    }

    return form;
  }

  get editAuthorisationVarsFormControl(): FormGroup {
    return this.getGroupControl('editAuthorisationVarsForm');
  }

  /**
   * This method may be overwritten
   */
  afterSetEditAuthorisationVarsForm(form: EditAuthorisationVarsForm): void {}

  setEditAuthorisationVarsForm(form: EditAuthorisationVarsForm) {
    this.editAuthorisationVarsFormControl.setControl('authorisation', this.createAuthorisationForm(form.authorisation));

    this.afterSetEditAuthorisationVarsForm(form);
  }

  createAuthorisationForm(authorisation: AuthorisationVO): FormGroup {
    return this.formBuilder.group({
      id: [{ value: authorisation?.id, disabled: false }],
      createdBy: [{ value: authorisation?.createdBy, disabled: false }],
      updatedBy: [{ value: authorisation?.updatedBy, disabled: false }],
      createdDate: [{ value: authorisation?.createdDate, disabled: false }],
      updatedDate: [{ value: authorisation?.updatedDate, disabled: false }],
      accessPoint: this.createAccessPointVOGroup(authorisation?.accessPoint),
      roles: this.formBuilder.array(authorisation?.roles ? authorisation.roles : []),
    });
  }

  get authorisationControl(): FormGroup {
    return this.getGroupControl('authorisation') as FormGroup;
  }

  get authorisation(): AuthorisationVO {
    return this.authorisationControl.value;
  }

  get authorisationIdControl(): FormControl {
    return this.authorisationControl.get('id') as FormControl;
  }

  get authorisationId(): number {
    return this.authorisationIdControl.value;
  }

  get authorisationCreatedByControl(): FormControl {
    return this.authorisationControl.get('createdBy') as FormControl;
  }

  get authorisationCreatedBy(): string {
    return this.authorisationCreatedByControl.value;
  }

  get authorisationUpdatedByControl(): FormControl {
    return this.authorisationControl.get('updatedBy') as FormControl;
  }

  get authorisationUpdatedBy(): string {
    return this.authorisationUpdatedByControl.value;
  }

  get authorisationCreatedDateControl(): FormControl {
    return this.authorisationControl.get('createdDate') as FormControl;
  }

  get authorisationCreatedDate(): Date {
    return this.authorisationCreatedDateControl.value;
  }

  get authorisationUpdatedDateControl(): FormControl {
    return this.authorisationControl.get('updatedDate') as FormControl;
  }

  get authorisationUpdatedDate(): Date {
    return this.authorisationUpdatedDateControl.value;
  }

  get authorisationAccessPointControl(): FormGroup {
    return this.authorisationControl.get('accessPoint') as FormGroup;
  }

  get authorisationAccessPoint(): AccessPointVO {
    return this.authorisationAccessPointControl.value;
  }

  authorisationAccessPointAddDialog(): void {}

  authorisationAccessPointSearch(): void {}

  handleAuthorisationAccessPointSelected(event: MatRadioChange, data: AccessPointVO): void {}

  authorisationAccessPointSelected(event: MatRadioChange, data: AccessPointVO): void {
    this.authorisationAccessPointSelect = data;
    this.handleAuthorisationAccessPointSelected(event, data);
  }

  /**
   * May be overridden to customise behaviour
   *
   */
  addSelectedAuthorisationAccessPoint(): void {
    this.authorisationControl.patchValue({ accessPoint: this.authorisationAccessPointSelect });
  }

  authorisationAccessPointClear(): void {
    this.authorisationControl.patchValue({ accessPoint: new AccessPointVO() });
  }

  get authorisationRolesControl(): FormArray {
    return this.authorisationControl.get('roles') as FormArray;
  }

  get authorisationRoles(): string[] {
    return this.authorisationRolesControl.value;
  }

  /**
   * Add the selected item to the list only if it already exist.
   * Make sure to reset the selection.
   * @param $event
   */
  onAuthorisationRolesChange($event: MatSelectChange) {
    if (!this.authorisationRoles.includes($event.value)) {
      this.authorisationRolesControl.push(new FormControl($event.value));
    }
    $event.source.value = '';
  }

  /**
   * Retrieve the label to be displayes
   * @param value
   * @returns
   */
  getAuthorisationRolesLabel(value: string): string | undefined {
    return this.authorisationRolesBackingList.find((item) => item.value === value)?.label;
  }

  /**
   * Delete an item from the list
   * @param index
   */
  authorisationRolesDelete(index: number) {
    this.authorisationRolesControl.removeAt(index);
  }

  getItemControl(name: string): FormControl {
    return this.editAuthorisationForm.get(name) as FormControl;
  }

  getGroupControl(name: string): FormGroup {
    return this.editAuthorisationForm.get(name) as FormGroup;
  }

  getArrayControl(name: string): FormArray {
    return this.editAuthorisationForm.get(name) as FormArray;
  }

  setEditAuthorisationFormValue(form: any) {
    if (form.authorisation) {
      this.editAuthorisationForm.setControl('authorisation', this.createAuthorisationForm(form.authorisation));
    }
  }

  createAuthorisationCriteriaGroup(value: AuthorisationCriteria): FormGroup {
    return this.formBuilder.group({
      accessPointName: [value?.accessPointName],
      accessPointUrl: [value?.accessPointUrl],
    });
  }

  createAuthorisationCriteriaArray(values: AuthorisationCriteria[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAuthorisationCriteriaGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }

  createAccessPointVOGroup(value: AccessPointVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      name: [value?.name],
      url: [value?.url],
      icon: [value?.icon],
    });
  }

  createAccessPointVOArray(values: AccessPointVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAccessPointVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }

  createAuthorisationVOGroup(value: AuthorisationVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
    });
  }

  createAuthorisationVOArray(values: AuthorisationVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createAuthorisationVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }
}
