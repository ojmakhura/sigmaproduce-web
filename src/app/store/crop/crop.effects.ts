// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as CropActions from './crop.actions';
import { CropApi } from '@app/service/crop/crop-api';
import { CropListVO } from '@app/model/crop/crop-list-vo';

@Injectable()
export class CropEffects {
  constructor(private actions$: Actions, private cropApi: CropApi) {}

  findById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(CropActions.findById),
      mergeMap(({ id }) =>
        this.cropApi.findById(id).pipe(
          map((crop) =>
            CropActions.findByIdSuccess({
              crop,
              messages: [`Crop ${crop.name} found.`],
              success: true,
            })
          ),
          catchError((error) => [CropActions.cropFailure({ messages: [error?.error ? error.error : error] })])
        )
      )
    )
  );

  save$ = createEffect(() =>
    this.actions$.pipe(
      ofType(CropActions.save),
      mergeMap(({ crop }) =>
        this.cropApi.save(crop).pipe(
          map((crop) =>
            CropActions.saveSuccess({
              crop,
              messages: [`Crop ${crop.name} saved.`],
              success: true,
            })
          ),
          catchError((error) => [
            CropActions.cropFailure({
              messages: [error?.error ? (error?.error ? error.error : error) : error],
            }),
          ])
        )
      )
    )
  );

  remove$ = createEffect(() =>
    this.actions$.pipe(
      ofType(CropActions.remove),
      mergeMap(({ id }) =>
        this.cropApi.remove(id).pipe(
          map((removed) =>
            CropActions.removeSuccess({
              removed,
              messages: [`Crop successfully removed.`],
              success: true,
            })
          ),
          catchError((error) => [CropActions.cropFailure({ messages: [error?.error ? error.error : error] })])
        )
      )
    )
  );

  getAll$ = createEffect(() =>
    this.actions$.pipe(
      ofType(CropActions.getAll),
      mergeMap(() =>
        this.cropApi
          .getAll()
          .pipe(
            map((data) => {
              data.sort((a: CropListVO, b: CropListVO) => {
                return a.name.localeCompare(b.name);
              });

              return data;
            })
          )
          .pipe(
            map((crops) =>
              CropActions.getAllSuccess({
                crops,
                messages: [`${crops.length} crop found.`],
                success: true,
              })
            ),
            catchError((error) => [CropActions.cropFailure({ messages: [error?.error ? error.error : error] })])
          )
      )
    )
  );

  getAllPaged$ = createEffect(() =>
    this.actions$.pipe(
      ofType(CropActions.getAllPaged),
      mergeMap(({ pageNumber, pageSize }) =>
        this.cropApi
          .getAllPaged(pageNumber, pageSize)
          .pipe(
            map((data) => {
              data.sort((a: CropListVO, b: CropListVO) => {
                return a.name.localeCompare(b.name);
              });

              return data;
            })
          )
          .pipe(
            map((crops) =>
              CropActions.getAllPagedSuccess({
                crops,
                messages: [`${crops.length} crop found.`],
                success: true,
              })
            ),
            catchError((error) => [CropActions.cropFailure({ messages: [error?.error ? error.error : error] })])
          )
      )
    )
  );

  search$ = createEffect(() =>
    this.actions$.pipe(
      ofType(CropActions.search),
      mergeMap(({ criteria }) =>
        this.cropApi
          .search(criteria)
          .pipe(
            map((data) => {
              data.sort((a: CropListVO, b: CropListVO) => {
                return a.name.localeCompare(b.name);
              });

              return data;
            })
          )
          .pipe(
            map((crops) =>
              CropActions.searchSuccess({
                crops,
                messages: [`${crops.length} crop found.`],
                success: true,
              })
            ),
            catchError((error) => [CropActions.cropFailure({ messages: [error?.error ? error.error : error] })])
          )
      )
    )
  );

  searchPaged$ = createEffect(() =>
    this.actions$.pipe(
      ofType(CropActions.searchPaged),
      mergeMap(({ pageNumber, pageSize, criteria }) =>
        this.cropApi
          .pagedSearch(pageNumber, pageSize, criteria)
          .pipe(
            map((data) => {
              data.sort((a: CropListVO, b: CropListVO) => {
                return a.name.localeCompare(b.name);
              });

              return data;
            })
          )
          .pipe(
            map((crops) =>
              CropActions.searchSuccess({
                crops,
                messages: [`${crops.length} crop found.`],
                success: true,
              })
            ),
            catchError((error) => [CropActions.cropFailure({ messages: [error?.error ? error.error : error] })])
          )
      )
    )
  );
}
