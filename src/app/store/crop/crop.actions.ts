// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { CropListVO } from '@app/model/bw/co/sigmaproduce/crop/crop-list-vo';
import { CropVO } from '@app/model/bw/co/sigmaproduce/crop/crop-vo';
import { createAction, props } from '@ngrx/store';

export enum CropActionType {
  FIND_BY_ID = '[Crop] Find By Id',
  FIND_BY_ID_SUCCESS = '[Crop] Find By Id Success',
  SAVE = '[Crop] Save',
  SAVE_SUCCESS = '[Crop] Save Success',
  REMOVE = '[Crop] Remove',
  REMOVE_SUCCESS = '[Crop] Remove Success',
  GET_ALL = '[Crop] Get All',
  GET_ALL_SUCCESS = '[Crop] Get All Success',
  SEARCH = '[Crop] Search',
  SEARCH_SUCCESS = '[Crop] Search Success',
  GET_ALL_PAGED = '[Crop] Get All Paged',
  GET_ALL_PAGED_SUCCESS = '[Crop] Get All Paged Success',
  PAGED_SEARCH = '[Crop] Paged Search',
  PAGED_SEARCH_SUCCESS = '[Crop] Paged Search Success',
  CROP_RESET = '[Crop] Crop Reset',
  CROP_FAILURE = '[Crop] Crop Action Failure',
  CROP_LOADING = '[Crop] Crop Loading',
}

export const findById = createAction(
  CropActionType.FIND_BY_ID,
  props<{ id: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const findByIdSuccess = createAction(
  CropActionType.FIND_BY_ID_SUCCESS,
  props<{ crop: CropVO | any; messages: any[]; success: boolean }>()
);

export const save = createAction(
  CropActionType.SAVE,
  props<{ crop: CropVO | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const saveSuccess = createAction(
  CropActionType.SAVE_SUCCESS,
  props<{ crop: CropVO | any; messages: any[]; success: boolean }>()
);

export const remove = createAction(
  CropActionType.REMOVE,
  props<{ id: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const removeSuccess = createAction(
  CropActionType.REMOVE_SUCCESS,
  props<{ removed: boolean | any; messages: any[]; success: boolean }>()
);

export const getAll = createAction(
  CropActionType.GET_ALL,
  props<{ loading: boolean; loaderMessage: string | undefined }>()
);

export const getAllSuccess = createAction(
  CropActionType.GET_ALL_SUCCESS,
  props<{ crops: CropListVO[] | any[]; messages: any[]; success: boolean }>()
);

export const search = createAction(
  CropActionType.SEARCH,
  props<{ criteria: string | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const searchSuccess = createAction(
  CropActionType.SEARCH_SUCCESS,
  props<{ crops: CropListVO[] | any[]; messages: any[]; success: boolean }>()
);

export const searchPaged = createAction(
  CropActionType.PAGED_SEARCH,
  props<{
    pageNumber: number | any;
    pageSize: number | any;
    criteria: string | any;
    loading: boolean;
    loaderMessage: string | undefined;
  }>()
);

export const searchPagedSuccess = createAction(
  CropActionType.PAGED_SEARCH_SUCCESS,
  props<{ crops: CropListVO[] | any[]; messages: any[]; success: boolean }>()
);

export const getAllPaged = createAction(
  CropActionType.GET_ALL_PAGED,
  props<{ pageNumber: number | any; pageSize: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const getAllPagedSuccess = createAction(
  CropActionType.GET_ALL_PAGED_SUCCESS,
  props<{ crops: CropListVO[] | any[]; messages: any[]; success: boolean }>()
);

export const cropReset = createAction(CropActionType.CROP_RESET);

export const cropLoading = createAction(
  CropActionType.CROP_LOADING,
  props<{ loading: boolean; success: boolean; messages: any[] }>()
);

export const cropFailure = createAction(CropActionType.CROP_FAILURE, props<{ messages: any[] }>());
