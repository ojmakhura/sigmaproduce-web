// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as CropActions from './crop.actions';
import { cropKey, initialState } from './crop.state';

export const cropReducer = createReducer(
  initialState,
  on(CropActions.findById, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(CropActions.findByIdSuccess, (state, action) => ({
    ...state,
    id: null,
    crop: action.crop,
    criteria: null,
    crops: [],
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(CropActions.save, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(CropActions.saveSuccess, (state, action) => ({
    ...state,
    id: null,
    crop: action.crop,
    criteria: null,
    crops: [],
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(CropActions.remove, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(CropActions.removeSuccess, (state, action) => ({
    ...state,
    id: null,
    crop: null,
    criteria: null,
    crops: [],
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(CropActions.getAll, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(CropActions.getAllSuccess, (state, action) => ({
    ...state,
    id: null,
    crop: null,
    criteria: null,
    crops: action.crops,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(CropActions.search, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(CropActions.searchSuccess, (state, action) => ({
    ...state,
    id: null,
    crop: null,
    criteria: null,
    crops: action.crops,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(CropActions.getAllPaged, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(CropActions.getAllPagedSuccess, (state, action) => ({
    ...state,
    id: null,
    crop: null,
    criteria: null,
    crops: action.crops,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(CropActions.cropReset, (state) => ({
    ...state,
    criteria: null,
    id: null,
    crops: [],
    crop: null,
    loading: false,
    success: false,
    error: false,
    messges: [],
  })),
  on(CropActions.cropFailure, (state, action) => ({
    ...state,
    loading: false,
    success: false,
    error: true,
    messages: action.messages,
  })),
  on(CropActions.cropLoading, (state, action) => ({
    ...state,
    loading: action.loading,
    success: false,
  }))
);

export const cropFeature = createFeature({
  name: cropKey,
  reducer: cropReducer,
});
