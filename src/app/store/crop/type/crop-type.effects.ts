// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as CropTypeActions from './crop-type.actions';
import { CropTypeApi } from '@app/service/crop/type/crop-type-api';
import { CropTypeListVO } from '@app/model/crop/type/crop-type-list-vo';

@Injectable()
export class CropTypeEffects {
  constructor(private actions$: Actions, private cropTypeApi: CropTypeApi) {}

  findById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(CropTypeActions.findById),
      mergeMap(({ id }) =>
        this.cropTypeApi.findById(id).pipe(
          map((cropType) =>
            CropTypeActions.findByIdSuccess({
              cropType,
              messages: [`Access point type ${cropType.name} found.`],
              success: true,
            })
          ),
          catchError((error) => [CropTypeActions.cropTypeFailure({ messages: [error?.error ? error.error : error] })])
        )
      )
    )
  );

  save$ = createEffect(() =>
    this.actions$.pipe(
      ofType(CropTypeActions.save),
      mergeMap(({ cropType }) =>
        this.cropTypeApi.save(cropType).pipe(
          map((cropType) =>
            CropTypeActions.saveSuccess({
              cropType,
              messages: [`Access point type ${cropType.name} saved.`],
              success: true,
            })
          ),
          catchError((error) => [
            CropTypeActions.cropTypeFailure({
              messages: [error?.error ? (error?.error ? error.error : error) : error],
            }),
          ])
        )
      )
    )
  );

  remove$ = createEffect(() =>
    this.actions$.pipe(
      ofType(CropTypeActions.remove),
      mergeMap(({ id }) =>
        this.cropTypeApi.remove(id).pipe(
          map((removed) =>
            CropTypeActions.removeSuccess({
              removed,
              messages: [`Access point type successfully removed.`],
              success: true,
            })
          ),
          catchError((error) => [CropTypeActions.cropTypeFailure({ messages: [error?.error ? error.error : error] })])
        )
      )
    )
  );

  getAll$ = createEffect(() =>
    this.actions$.pipe(
      ofType(CropTypeActions.getAll),
      mergeMap(() =>
        this.cropTypeApi
          .getAll()
          .pipe(
            map((data) => {
              data.sort((a: CropTypeListVO, b: CropTypeListVO) => {
                return a.name.localeCompare(b.name);
              });

              return data;
            })
          )
          .pipe(
            map((cropTypes) =>
              CropTypeActions.getAllSuccess({
                cropTypes,
                messages: [`${cropTypes.length} access point types found.`],
                success: true,
              })
            ),
            catchError((error) => [CropTypeActions.cropTypeFailure({ messages: [error?.error ? error.error : error] })])
          )
      )
    )
  );

  search$ = createEffect(() =>
    this.actions$.pipe(
      ofType(CropTypeActions.search),
      mergeMap(({ criteria }) =>
        this.cropTypeApi
          .search(criteria)
          .pipe(
            map((data) => {
              data.sort((a: CropTypeListVO, b: CropTypeListVO) => {
                return a.name.localeCompare(b.name);
              });

              return data;
            })
          )
          .pipe(
            map((cropTypes) =>
              CropTypeActions.searchSuccess({
                cropTypes,
                messages: [`${cropTypes.length} access point types found.`],
                success: true,
              })
            ),
            catchError((error) => [CropTypeActions.cropTypeFailure({ messages: [error?.error ? error.error : error] })])
          )
      )
    )
  );
}
