// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as CropTypeActions from './crop-type.actions';
import { cropTypeKey, initialState } from './crop-type.state';

export const cropTypeReducer = createReducer(
  initialState,
  on(CropTypeActions.findById, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(CropTypeActions.findByIdSuccess, (state, action) => ({
    ...state,
    id: null,
    cropType: action.cropType,
    criteria: null,
    cropTypes: [],
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(CropTypeActions.save, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(CropTypeActions.saveSuccess, (state, action) => ({
    ...state,
    id: null,
    cropType: action.cropType,
    criteria: null,
    cropTypes: [],
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(CropTypeActions.remove, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(CropTypeActions.removeSuccess, (state, action) => ({
    ...state,
    id: null,
    cropType: null,
    criteria: null,
    cropTypes: [],
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(CropTypeActions.getAll, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(CropTypeActions.getAllSuccess, (state, action) => ({
    ...state,
    id: null,
    cropType: null,
    criteria: null,
    cropTypes: action.cropTypes,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(CropTypeActions.search, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(CropTypeActions.searchSuccess, (state, action) => ({
    ...state,
    id: null,
    cropType: null,
    criteria: null,
    cropTypes: action.cropTypes,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(CropTypeActions.getAllPaged, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(CropTypeActions.getAllPagedSuccess, (state, action) => ({
    ...state,
    id: null,
    cropType: null,
    criteria: null,
    cropTypes: action.cropTypes,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(CropTypeActions.cropTypeReset, (state) => ({
    ...state,
    criteria: null,
    cropType: null,
    id: null,
    cropTypes: [],
    loading: false,
    success: false,
    error: false,
    messges: [],
  })),
  on(CropTypeActions.cropTypeFailure, (state, action) => ({
    ...state,
    loading: false,
    success: false,
    error: true,
    messages: action.messages,
  })),
  on(CropTypeActions.cropTypeLoading, (state, action) => ({
    ...state,
    loading: action.loading,
    success: false,
  }))
);

export const cropTypeFeature = createFeature({
  name: cropTypeKey,
  reducer: cropTypeReducer,
});
