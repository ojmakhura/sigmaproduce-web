// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { AccessPointCriteria } from '@app/model//access/access-point-criteria';
import { AccessPointVO } from '@app/model//access/access-point-vo';
import { DataPage } from '@app/model//data-page';

export enum AccessPointActionType {
  FIND_BY_ID = '[AccessPoint] Find By Id',
  FIND_BY_ID_SUCCESS = '[AccessPoint] Find By Id Success',
  SAVE = '[AccessPoint] Save',
  SAVE_SUCCESS = '[AccessPoint] Save Success',
  REMOVE = '[AccessPoint] Remove',
  REMOVE_SUCCESS = '[AccessPoint] Remove Success',
  GET_ALL = '[AccessPoint] Get All',
  GET_ALL_SUCCESS = '[AccessPoint] Get All Success',
  SEARCH = '[AccessPoint] Search',
  SEARCH_SUCCESS = '[AccessPoint] Search Success',
  GET_ALL_PAGED = '[AccessPoint] Get All Paged',
  GET_ALL_PAGED_SUCCESS = '[AccessPoint] Get All Paged Success',
  PAGED_SEARCH = '[AccessPoint] Paged Search',
  PAGED_SEARCH_SUCCESS = '[AccessPoint] Paged Search Success',
  ACCESS_POINT_RESET = '[AccessPoint] AccessPoint Reset',
  ACCESS_POINT_FAILURE = '[AccessPoint] AccessPoint Action Failure',
  ACCESS_POINT_LOADING = '[AccessPoint] AccessPoint Loading',
}

export const findById = createAction(
  AccessPointActionType.FIND_BY_ID,
  props<{ id: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const findByIdSuccess = createAction(
  AccessPointActionType.FIND_BY_ID_SUCCESS,
  props<{ accessPoint: AccessPointVO | any; messages: any[]; success: boolean }>()
);

export const save = createAction(
  AccessPointActionType.SAVE,
  props<{ accessPoint: AccessPointVO | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const saveSuccess = createAction(
  AccessPointActionType.SAVE_SUCCESS,
  props<{ accessPoint: AccessPointVO | any; messages: any[]; success: boolean }>()
);

export const remove = createAction(
  AccessPointActionType.REMOVE,
  props<{ id: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const removeSuccess = createAction(
  AccessPointActionType.REMOVE_SUCCESS,
  props<{ removed: boolean | any; messages: any[]; success: boolean }>()
);

export const getAll = createAction(
  AccessPointActionType.GET_ALL,
  props<{ loading: boolean; loaderMessage: string | undefined }>()
);

export const getAllSuccess = createAction(
  AccessPointActionType.GET_ALL_SUCCESS,
  props<{ accessPoints: AccessPointVO[] | any[]; messages: any[]; success: boolean }>()
);

export const search = createAction(
  AccessPointActionType.SEARCH,
  props<{ criteria: AccessPointCriteria | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const searchSuccess = createAction(
  AccessPointActionType.SEARCH_SUCCESS,
  props<{ accessPoints: AccessPointVO[] | any[]; messages: any[]; success: boolean }>()
);

export const getAllPaged = createAction(
  AccessPointActionType.GET_ALL_PAGED,
  props<{ pageNumber: number | any; pageSize: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const getAllPagedSuccess = createAction(
  AccessPointActionType.GET_ALL_PAGED_SUCCESS,
  props<{ accessPoints: AccessPointVO[] | any[]; messages: any[]; success: boolean }>()
);

export const pagedSearch = createAction(
  AccessPointActionType.PAGED_SEARCH,
  props<{
    pageNumber: number | any;
    pageSize: number | any;
    criteria: AccessPointCriteria | any;
    loading: boolean;
    loaderMessage: string | undefined;
  }>()
);

export const pagedSearchSuccess = createAction(
  AccessPointActionType.PAGED_SEARCH_SUCCESS,
  props<{ accessPointPage: DataPage | any; messages: any[]; success: boolean }>()
);

export const accessPointReset = createAction(AccessPointActionType.ACCESS_POINT_RESET);

export const accessPointLoading = createAction(
  AccessPointActionType.ACCESS_POINT_LOADING,
  props<{ loading: boolean; loaderMessage: string | undefined; success: boolean; messages: any[] }>()
);

export const accessPointFailure = createAction(
  AccessPointActionType.ACCESS_POINT_FAILURE,
  props<{ messages: any[] }>()
);
