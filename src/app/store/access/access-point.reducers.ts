// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as AccessPointActions from './access-point.actions';
import { accessPointKey, initialState } from './access-point.state';

export const accessPointReducer = createReducer(
  initialState,
  on(AccessPointActions.findById, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
    messages: [],
  })),
  on(AccessPointActions.findByIdSuccess, (state, action) => ({
    ...state,
    accessPoints: [],
    id: null,
    accessPoint: action.accessPoint,
    criteria: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(AccessPointActions.save, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
    messages: [],
  })),
  on(AccessPointActions.saveSuccess, (state, action) => ({
    ...state,
    accessPoints: [],
    id: null,
    accessPoint: action.accessPoint,
    criteria: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(AccessPointActions.remove, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(AccessPointActions.removeSuccess, (state, action) => ({
    ...state,
    accessPoints: [],
    id: null,
    accessPoint: null,
    criteria: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(AccessPointActions.getAll, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(AccessPointActions.getAllSuccess, (state, action) => ({
    ...state,
    accessPoints: action.accessPoints,
    id: null,
    accessPoint: null,
    criteria: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(AccessPointActions.search, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(AccessPointActions.searchSuccess, (state, action) => ({
    ...state,
    accessPoints: action.accessPoints,
    id: null,
    accessPoint: null,
    criteria: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(AccessPointActions.getAllPaged, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(AccessPointActions.getAllPagedSuccess, (state, action) => ({
    ...state,
    accessPoints: action.accessPoints,
    id: null,
    accessPoint: null,
    criteria: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(AccessPointActions.pagedSearch, (state, action) => ({
    ...state,
    accessPoints: [],
    accessPoint: null,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(AccessPointActions.pagedSearchSuccess, (state, action) => ({
    ...state,
    accessPointPage: action.accessPointPage,
    id: null,
    accessPoint: null,
    criteria: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(AccessPointActions.accessPointReset, (state) => ({
    ...state,
    accessPoints: [],
    id: null,
    accessPoint: null,
    criteria: null,
    loading: false,
    loaderMessage: undefined,
    success: false,
    error: false,
    messages: [],
  })),
  on(AccessPointActions.accessPointFailure, (state, action) => ({
    ...state,
    loading: false,
    loaderMessage: undefined,
    success: false,
    error: true,
    messages: action.messages,
  })),
  on(AccessPointActions.accessPointLoading, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
    success: false,
  }))
);

export const accessPointFeature = createFeature({
  name: accessPointKey,
  reducer: accessPointReducer,
});
